-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_decaps is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ss_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss_ce0 : OUT STD_LOGIC;
    ss_we0 : OUT STD_LOGIC;
    ss_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ss_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss_ce1 : OUT STD_LOGIC;
    ss_we1 : OUT STD_LOGIC;
    ss_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ct_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_ce0 : OUT STD_LOGIC;
    ct_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ct_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_ce1 : OUT STD_LOGIC;
    ct_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_decaps is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_decaps,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-ffg1156-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.209000,HLS_SYN_LAT=3860863,HLS_SYN_TPT=none,HLS_SYN_MEM=36,HLS_SYN_DSP=6,HLS_SYN_FF=23468,HLS_SYN_LUT=85190,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_26D : STD_LOGIC_VECTOR (9 downto 0) := "1001101101";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv13_1400 : STD_LOGIC_VECTOR (12 downto 0) := "1010000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_12FC : STD_LOGIC_VECTOR (12 downto 0) := "1001011111100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_543 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_589 : STD_LOGIC_VECTOR (12 downto 0);
    signal r0_0_0_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_0_reg_612 : STD_LOGIC_VECTOR (12 downto 0);
    signal r1_0_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_reg_635 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_0_reg_657 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_frodo_unpack_1_fu_745_ap_ready : STD_LOGIC;
    signal grp_frodo_unpack_1_fu_745_ap_done : STD_LOGIC;
    signal icmp_ln60_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_772_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln62_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_reg_1172 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_19_fu_789_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_19_reg_1185 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln78_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_20_fu_840_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_20_reg_1198 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln83_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_889_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_21_reg_1211 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln92_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln93_1_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_1_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln107_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_1236 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state27_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_22_fu_941_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln109_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_reg_1245 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln123_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state35_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln123_fu_981_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln126_1_fu_1015_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal icmp_ln131_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state38_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_23_fu_1029_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln133_fu_1051_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln141_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln141_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln139_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_24_fu_1077_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_24_reg_1321 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln142_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_reg_1326 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln157_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state43_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal zext_ln160_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_reg_1346 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_1_fu_1116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_1_reg_1356 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln157_fu_1121_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln162_fu_1127_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln162_reg_1371 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_25_fu_1137_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_25_reg_1379 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln162_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_matrix_mult_AS_fu_686_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_frodo_key_encode_fu_759_ap_ready : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state35 : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state38 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal Bp_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Bp_ce0 : STD_LOGIC;
    signal Bp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Bp_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal Bp_ce1 : STD_LOGIC;
    signal Bp_we1 : STD_LOGIC;
    signal Bp_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Bpp_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Bpp_ce0 : STD_LOGIC;
    signal Bpp_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal Bpp_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal Bpp_ce1 : STD_LOGIC;
    signal Bpp_we1 : STD_LOGIC;
    signal Bpp_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal Bpp_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal Bbpp_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Bbpp_ce0 : STD_LOGIC;
    signal Bbpp_we0 : STD_LOGIC;
    signal Bbpp_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Bbpp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Bbpp_ce1 : STD_LOGIC;
    signal Bbpp_we1 : STD_LOGIC;
    signal Bbpp_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_ce1 : STD_LOGIC;
    signal C_we1 : STD_LOGIC;
    signal M_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal M_ce0 : STD_LOGIC;
    signal M_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal M_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal M_ce1 : STD_LOGIC;
    signal M_we1 : STD_LOGIC;
    signal M_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal V_ce0 : STD_LOGIC;
    signal V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal V_ce1 : STD_LOGIC;
    signal V_we1 : STD_LOGIC;
    signal V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mup_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mup_ce0 : STD_LOGIC;
    signal mup_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mup_ce1 : STD_LOGIC;
    signal mup_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Cp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Cp_ce0 : STD_LOGIC;
    signal Cp_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal Cp_ce1 : STD_LOGIC;
    signal Cp_we1 : STD_LOGIC;
    signal G2in_ce0 : STD_LOGIC;
    signal G2in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2in_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2in_ce1 : STD_LOGIC;
    signal G2in_we1 : STD_LOGIC;
    signal G2in_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2in_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce0 : STD_LOGIC;
    signal G2out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce1 : STD_LOGIC;
    signal G2out_we1 : STD_LOGIC;
    signal G2out_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_SE_ce0 : STD_LOGIC;
    signal seed_SE_we0 : STD_LOGIC;
    signal seed_SE_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_ce1 : STD_LOGIC;
    signal seed_SE_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_we0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal S_ce1 : STD_LOGIC;
    signal S_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal kb_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal kb_ce0 : STD_LOGIC;
    signal kb_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal kb_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal kb_ce1 : STD_LOGIC;
    signal kb_we1 : STD_LOGIC;
    signal kb_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_ce0 : STD_LOGIC;
    signal r_we0 : STD_LOGIC;
    signal r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_ce1 : STD_LOGIC;
    signal r_we1 : STD_LOGIC;
    signal r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_ce1 : STD_LOGIC;
    signal B_we1 : STD_LOGIC;
    signal B_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ct_k_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ct_k_ce0 : STD_LOGIC;
    signal ct_k_we0 : STD_LOGIC;
    signal ct_k_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ct_k_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ct_k_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ct_k_ce1 : STD_LOGIC;
    signal ct_k_we1 : STD_LOGIC;
    signal ct_k_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_8_fu_679_ap_start : STD_LOGIC;
    signal grp_shake128_8_fu_679_ap_done : STD_LOGIC;
    signal grp_shake128_8_fu_679_ap_idle : STD_LOGIC;
    signal grp_shake128_8_fu_679_ap_ready : STD_LOGIC;
    signal grp_shake128_8_fu_679_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake128_8_fu_679_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_8_fu_679_output_r_we0 : STD_LOGIC;
    signal grp_shake128_8_fu_679_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_8_fu_679_output_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake128_8_fu_679_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_8_fu_679_output_r_we1 : STD_LOGIC;
    signal grp_shake128_8_fu_679_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_8_fu_679_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_8_fu_679_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_8_fu_679_input_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_8_fu_679_input_r_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_ap_start : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_686_B_ce0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_B_we0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_B_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_AS_fu_686_B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_686_B_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_B_we1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_B_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_AS_fu_686_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_686_S_ce0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_686_seedA_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_matrix_mult_AS_fu_686_seedA_ce0 : STD_LOGIC;
    signal grp_shake128_10304_fu_696_ap_start : STD_LOGIC;
    signal grp_shake128_10304_fu_696_ap_done : STD_LOGIC;
    signal grp_shake128_10304_fu_696_ap_idle : STD_LOGIC;
    signal grp_shake128_10304_fu_696_ap_ready : STD_LOGIC;
    signal grp_shake128_10304_fu_696_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_10304_fu_696_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_10304_fu_696_output_r_we0 : STD_LOGIC;
    signal grp_shake128_10304_fu_696_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10304_fu_696_output_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_10304_fu_696_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_10304_fu_696_output_r_we1 : STD_LOGIC;
    signal grp_shake128_10304_fu_696_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10304_fu_696_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10304_fu_696_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_10304_fu_696_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10304_fu_696_input_r_ce1 : STD_LOGIC;
    signal grp_shake128_S_fu_702_ap_start : STD_LOGIC;
    signal grp_shake128_S_fu_702_ap_done : STD_LOGIC;
    signal grp_shake128_S_fu_702_ap_idle : STD_LOGIC;
    signal grp_shake128_S_fu_702_ap_ready : STD_LOGIC;
    signal grp_shake128_S_fu_702_output_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_S_fu_702_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_S_fu_702_output_r_we1 : STD_LOGIC;
    signal grp_shake128_S_fu_702_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_S_fu_702_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_S_fu_702_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_S_fu_702_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_S_fu_702_input_r_ce1 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_ap_start : STD_LOGIC;
    signal grp_frodo_sample_fu_708_ap_done : STD_LOGIC;
    signal grp_frodo_sample_fu_708_ap_idle : STD_LOGIC;
    signal grp_frodo_sample_fu_708_ap_ready : STD_LOGIC;
    signal grp_frodo_sample_fu_708_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_sample_fu_708_V_ce1 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_V_we1 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_sample_fu_708_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_sample_fu_708_S_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_S_we0 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_S_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_frodo_sample_fu_708_E_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_sample_fu_708_E_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_E_we0 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_E_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_sample_fu_708_entrada_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_708_entrada_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_708_entrada_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_708_entrada_ce1 : STD_LOGIC;
    signal grp_frodo_key_decode_fu_716_ap_start : STD_LOGIC;
    signal grp_frodo_key_decode_fu_716_ap_done : STD_LOGIC;
    signal grp_frodo_key_decode_fu_716_ap_idle : STD_LOGIC;
    signal grp_frodo_key_decode_fu_716_ap_ready : STD_LOGIC;
    signal grp_frodo_key_decode_fu_716_out_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_frodo_key_decode_fu_716_out_r_ce1 : STD_LOGIC;
    signal grp_frodo_key_decode_fu_716_out_r_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_frodo_key_decode_fu_716_out_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_key_decode_fu_716_in_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_key_decode_fu_716_in_r_ce0 : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_ap_start : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_ap_done : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_ap_idle : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_ap_ready : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_C_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_219_fu_722_C_ce1 : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_C_we1 : STD_LOGIC;
    signal grp_frodo_unpack_219_fu_722_C_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_unpack_219_fu_722_b_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_219_fu_722_b_ce0 : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_ap_start : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_ap_done : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_ap_idle : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_ap_ready : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_C_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_2_fu_730_C_ce1 : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_C_we1 : STD_LOGIC;
    signal grp_frodo_unpack_2_fu_730_C_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_unpack_2_fu_730_b_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_unpack_2_fu_730_b_ce0 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_ap_start : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_ap_done : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_mult_bs_fu_737_V_ce0 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_mult_bs_fu_737_V_ce1 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_V_we1 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_bs_fu_737_B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_bs_fu_737_B_ce0 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_bs_fu_737_B_ce1 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_S_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_matrix_mult_bs_fu_737_S_ce0 : STD_LOGIC;
    signal grp_matrix_mult_bs_fu_737_S_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_matrix_mult_bs_fu_737_S_ce1 : STD_LOGIC;
    signal grp_frodo_unpack_1_fu_745_ap_start : STD_LOGIC;
    signal grp_frodo_unpack_1_fu_745_ap_idle : STD_LOGIC;
    signal grp_frodo_unpack_1_fu_745_C_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_unpack_1_fu_745_C_ce1 : STD_LOGIC;
    signal grp_frodo_unpack_1_fu_745_C_we1 : STD_LOGIC;
    signal grp_frodo_unpack_1_fu_745_C_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_unpack_1_fu_745_b_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_1_fu_745_b_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_ap_start : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_ap_done : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_mult_64_fu_752_V_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_mult_64_fu_752_V_ce1 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_V_we1 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_64_fu_752_B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_752_B_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_752_B_ce1 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_752_S_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_752_S_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_752_S_ce1 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_ap_start : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_ap_idle : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_C_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_key_encode_fu_759_C_ce1 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_C_we1 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_C_d1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_frodo_key_encode_fu_759_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_key_encode_fu_759_V_ce0 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_759_mu_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_frodo_key_encode_fu_759_mu_ce0 : STD_LOGIC;
    signal i_1_reg_554 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_reg_566 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_3_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal i_7_reg_646 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_9_reg_668 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_shake128_8_fu_679_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_matrix_mult_AS_fu_686_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_shake128_10304_fu_696_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_shake128_S_fu_702_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_frodo_sample_fu_708_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_frodo_key_decode_fu_716_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_frodo_unpack_219_fu_722_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_frodo_unpack_2_fu_730_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_matrix_mult_bs_fu_737_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_frodo_unpack_1_fu_745_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_matrix_mult_64_fu_752_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_frodo_key_encode_fu_759_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln79_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_1_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_1_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln126_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln126_1_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln133_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_1_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kb_addr_gep_fu_470_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln164_fu_1143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_1_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_814_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal or_ln_fu_874_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln2_fu_919_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln95_fu_928_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_108_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_804_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln79_fu_823_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1_fu_846_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln_fu_864_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln93_fu_905_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_909_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln123_fu_969_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln126_2_fu_987_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln126_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln126_3_fu_1005_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln126_1_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln126_fu_997_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln133_1_fu_1041_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln133_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln141_fu_1059_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln142_fu_1088_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln157_fu_1110_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln164_fu_1148_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component shake128_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_we0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_we1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        seedA_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        seedA_ce0 : OUT STD_LOGIC;
        seedA_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_10304 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_S IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_sample IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_we1 : OUT STD_LOGIC;
        V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        E_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        E_ce0 : OUT STD_LOGIC;
        E_we0 : OUT STD_LOGIC;
        E_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        entrada_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        entrada_ce0 : OUT STD_LOGIC;
        entrada_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        entrada_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        entrada_ce1 : OUT STD_LOGIC;
        entrada_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_key_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        out_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_unpack_219 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_we1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_unpack_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_we1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_bs IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_we1 : OUT STD_LOGIC;
        V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_unpack_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_we1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_we1 : OUT STD_LOGIC;
        V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_key_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_we1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        mu_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        mu_ce0 : OUT STD_LOGIC;
        mu_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_Bp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_Bpp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (14 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component frodo_decaps_Bbpp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_mup IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (1 downto 0);
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_Cp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component frodo_decaps_G2in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS_seeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component frodo_decaps_kb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_ct_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    Bp_U : component frodo_decaps_Bp
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bp_address0,
        ce0 => Bp_ce0,
        q0 => Bp_q0,
        address1 => Bp_address1,
        ce1 => Bp_ce1,
        we1 => Bp_we1,
        d1 => grp_frodo_unpack_219_fu_722_C_d1,
        q1 => Bp_q1);

    Bpp_U : component frodo_decaps_Bpp
    generic map (
        DataWidth => 15,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bpp_address0,
        ce0 => Bpp_ce0,
        q0 => Bpp_q0,
        address1 => Bpp_address1,
        ce1 => Bpp_ce1,
        we1 => Bpp_we1,
        d1 => Bpp_d1,
        q1 => Bpp_q1);

    Bbpp_U : component frodo_decaps_Bbpp
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bbpp_address0,
        ce0 => Bbpp_ce0,
        we0 => Bbpp_we0,
        d0 => Bbpp_d0,
        q0 => Bbpp_q0,
        address1 => grp_matrix_mult_AS_fu_686_B_address1,
        ce1 => Bbpp_ce1,
        we1 => Bbpp_we1,
        d1 => grp_matrix_mult_AS_fu_686_B_d1,
        q1 => Bbpp_q1);

    C_U : component frodo_decaps_C
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        q0 => C_q0,
        address1 => grp_frodo_unpack_1_fu_745_C_address1,
        ce1 => C_ce1,
        we1 => C_we1,
        d1 => grp_frodo_unpack_1_fu_745_C_d1);

    M_U : component frodo_decaps_C
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => M_address0,
        ce0 => M_ce0,
        q0 => M_q0,
        address1 => M_address1,
        ce1 => M_ce1,
        we1 => M_we1,
        d1 => M_d1);

    V_U : component frodo_decaps_C
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => V_address0,
        ce0 => V_ce0,
        q0 => V_q0,
        address1 => V_address1,
        ce1 => V_ce1,
        we1 => V_we1,
        d1 => V_d1);

    mup_U : component frodo_decaps_mup
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mup_address0,
        ce0 => mup_ce0,
        q0 => mup_q0,
        address1 => grp_frodo_key_decode_fu_716_out_r_address1,
        ce1 => mup_ce1,
        we1 => mup_we1,
        d1 => grp_frodo_key_decode_fu_716_out_r_d1);

    Cp_U : component frodo_decaps_Cp
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Cp_address0,
        ce0 => Cp_ce0,
        q0 => Cp_q0,
        address1 => grp_frodo_key_encode_fu_759_C_address1,
        ce1 => Cp_ce1,
        we1 => Cp_we1,
        d1 => grp_frodo_key_encode_fu_759_C_d1);

    G2in_U : component frodo_decaps_G2in
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_shake128_S_fu_702_input_r_address0,
        ce0 => G2in_ce0,
        q0 => G2in_q0,
        address1 => G2in_address1,
        ce1 => G2in_ce1,
        we1 => G2in_we1,
        d1 => G2in_d1,
        q1 => G2in_q1);

    G2out_U : component frodo_decaps_G2in
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => G2out_address0,
        ce0 => G2out_ce0,
        q0 => G2out_q0,
        address1 => G2out_address1,
        ce1 => G2out_ce1,
        we1 => G2out_we1,
        d1 => grp_shake128_S_fu_702_output_r_d1,
        q1 => G2out_q1);

    seed_SE_U : component matrix_mult_AS_seeOg
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_SE_address0,
        ce0 => seed_SE_ce0,
        we0 => seed_SE_we0,
        d0 => seed_SE_d0,
        q0 => seed_SE_q0,
        address1 => grp_shake128_10304_fu_696_input_r_address1,
        ce1 => seed_SE_ce1,
        q1 => seed_SE_q1);

    S_U : component frodo_decaps_S
    generic map (
        DataWidth => 5,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        we0 => S_we0,
        d0 => grp_frodo_sample_fu_708_S_d0,
        q0 => S_q0,
        address1 => grp_matrix_mult_64_fu_752_B_address1,
        ce1 => S_ce1,
        q1 => S_q1);

    kb_U : component frodo_decaps_kb
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kb_address0,
        ce0 => kb_ce0,
        q0 => kb_q0,
        address1 => kb_address1,
        ce1 => kb_ce1,
        we1 => kb_we1,
        d1 => kb_d1);

    r_U : component frodo_decaps_r
    generic map (
        DataWidth => 16,
        AddressRange => 10304,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r_address0,
        ce0 => r_ce0,
        we0 => r_we0,
        d0 => grp_shake128_10304_fu_696_output_r_d0,
        q0 => r_q0,
        address1 => r_address1,
        ce1 => r_ce1,
        we1 => r_we1,
        d1 => grp_shake128_10304_fu_696_output_r_d1,
        q1 => r_q1);

    B_U : component frodo_decaps_Bp
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_matrix_mult_64_fu_752_S_address0,
        ce0 => B_ce0,
        q0 => B_q0,
        address1 => B_address1,
        ce1 => B_ce1,
        we1 => B_we1,
        d1 => grp_frodo_unpack_2_fu_730_C_d1,
        q1 => B_q1);

    ct_k_U : component frodo_decaps_ct_k
    generic map (
        DataWidth => 16,
        AddressRange => 4868,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ct_k_address0,
        ce0 => ct_k_ce0,
        we0 => ct_k_we0,
        d0 => ct_k_d0,
        q0 => ct_k_q0,
        address1 => ct_k_address1,
        ce1 => ct_k_ce1,
        we1 => ct_k_we1,
        d1 => ct_q1,
        q1 => ct_k_q1);

    grp_shake128_8_fu_679 : component shake128_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_8_fu_679_ap_start,
        ap_done => grp_shake128_8_fu_679_ap_done,
        ap_idle => grp_shake128_8_fu_679_ap_idle,
        ap_ready => grp_shake128_8_fu_679_ap_ready,
        output_r_address0 => grp_shake128_8_fu_679_output_r_address0,
        output_r_ce0 => grp_shake128_8_fu_679_output_r_ce0,
        output_r_we0 => grp_shake128_8_fu_679_output_r_we0,
        output_r_d0 => grp_shake128_8_fu_679_output_r_d0,
        output_r_address1 => grp_shake128_8_fu_679_output_r_address1,
        output_r_ce1 => grp_shake128_8_fu_679_output_r_ce1,
        output_r_we1 => grp_shake128_8_fu_679_output_r_we1,
        output_r_d1 => grp_shake128_8_fu_679_output_r_d1,
        input_r_address0 => grp_shake128_8_fu_679_input_r_address0,
        input_r_ce0 => grp_shake128_8_fu_679_input_r_ce0,
        input_r_q0 => ct_k_q0,
        input_r_address1 => grp_shake128_8_fu_679_input_r_address1,
        input_r_ce1 => grp_shake128_8_fu_679_input_r_ce1,
        input_r_q1 => ct_k_q1);

    grp_matrix_mult_AS_fu_686 : component matrix_mult_AS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_AS_fu_686_ap_start,
        ap_done => grp_matrix_mult_AS_fu_686_ap_done,
        ap_idle => grp_matrix_mult_AS_fu_686_ap_idle,
        ap_ready => grp_matrix_mult_AS_fu_686_ap_ready,
        B_address0 => grp_matrix_mult_AS_fu_686_B_address0,
        B_ce0 => grp_matrix_mult_AS_fu_686_B_ce0,
        B_we0 => grp_matrix_mult_AS_fu_686_B_we0,
        B_d0 => grp_matrix_mult_AS_fu_686_B_d0,
        B_q0 => Bbpp_q0,
        B_address1 => grp_matrix_mult_AS_fu_686_B_address1,
        B_ce1 => grp_matrix_mult_AS_fu_686_B_ce1,
        B_we1 => grp_matrix_mult_AS_fu_686_B_we1,
        B_d1 => grp_matrix_mult_AS_fu_686_B_d1,
        B_q1 => Bbpp_q1,
        S_address0 => grp_matrix_mult_AS_fu_686_S_address0,
        S_ce0 => grp_matrix_mult_AS_fu_686_S_ce0,
        S_q0 => S_q0,
        seedA_address0 => grp_matrix_mult_AS_fu_686_seedA_address0,
        seedA_ce0 => grp_matrix_mult_AS_fu_686_seedA_ce0,
        seedA_q0 => sk_q0);

    grp_shake128_10304_fu_696 : component shake128_10304
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_10304_fu_696_ap_start,
        ap_done => grp_shake128_10304_fu_696_ap_done,
        ap_idle => grp_shake128_10304_fu_696_ap_idle,
        ap_ready => grp_shake128_10304_fu_696_ap_ready,
        output_r_address0 => grp_shake128_10304_fu_696_output_r_address0,
        output_r_ce0 => grp_shake128_10304_fu_696_output_r_ce0,
        output_r_we0 => grp_shake128_10304_fu_696_output_r_we0,
        output_r_d0 => grp_shake128_10304_fu_696_output_r_d0,
        output_r_address1 => grp_shake128_10304_fu_696_output_r_address1,
        output_r_ce1 => grp_shake128_10304_fu_696_output_r_ce1,
        output_r_we1 => grp_shake128_10304_fu_696_output_r_we1,
        output_r_d1 => grp_shake128_10304_fu_696_output_r_d1,
        input_r_address0 => grp_shake128_10304_fu_696_input_r_address0,
        input_r_ce0 => grp_shake128_10304_fu_696_input_r_ce0,
        input_r_q0 => seed_SE_q0,
        input_r_address1 => grp_shake128_10304_fu_696_input_r_address1,
        input_r_ce1 => grp_shake128_10304_fu_696_input_r_ce1,
        input_r_q1 => seed_SE_q1);

    grp_shake128_S_fu_702 : component shake128_S
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_S_fu_702_ap_start,
        ap_done => grp_shake128_S_fu_702_ap_done,
        ap_idle => grp_shake128_S_fu_702_ap_idle,
        ap_ready => grp_shake128_S_fu_702_ap_ready,
        output_r_address1 => grp_shake128_S_fu_702_output_r_address1,
        output_r_ce1 => grp_shake128_S_fu_702_output_r_ce1,
        output_r_we1 => grp_shake128_S_fu_702_output_r_we1,
        output_r_d1 => grp_shake128_S_fu_702_output_r_d1,
        input_r_address0 => grp_shake128_S_fu_702_input_r_address0,
        input_r_ce0 => grp_shake128_S_fu_702_input_r_ce0,
        input_r_q0 => G2in_q0,
        input_r_address1 => grp_shake128_S_fu_702_input_r_address1,
        input_r_ce1 => grp_shake128_S_fu_702_input_r_ce1,
        input_r_q1 => G2in_q1);

    grp_frodo_sample_fu_708 : component frodo_sample
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_sample_fu_708_ap_start,
        ap_done => grp_frodo_sample_fu_708_ap_done,
        ap_idle => grp_frodo_sample_fu_708_ap_idle,
        ap_ready => grp_frodo_sample_fu_708_ap_ready,
        V_address1 => grp_frodo_sample_fu_708_V_address1,
        V_ce1 => grp_frodo_sample_fu_708_V_ce1,
        V_we1 => grp_frodo_sample_fu_708_V_we1,
        V_d1 => grp_frodo_sample_fu_708_V_d1,
        S_address0 => grp_frodo_sample_fu_708_S_address0,
        S_ce0 => grp_frodo_sample_fu_708_S_ce0,
        S_we0 => grp_frodo_sample_fu_708_S_we0,
        S_d0 => grp_frodo_sample_fu_708_S_d0,
        E_address0 => grp_frodo_sample_fu_708_E_address0,
        E_ce0 => grp_frodo_sample_fu_708_E_ce0,
        E_we0 => grp_frodo_sample_fu_708_E_we0,
        E_d0 => grp_frodo_sample_fu_708_E_d0,
        entrada_address0 => grp_frodo_sample_fu_708_entrada_address0,
        entrada_ce0 => grp_frodo_sample_fu_708_entrada_ce0,
        entrada_q0 => r_q0,
        entrada_address1 => grp_frodo_sample_fu_708_entrada_address1,
        entrada_ce1 => grp_frodo_sample_fu_708_entrada_ce1,
        entrada_q1 => r_q1);

    grp_frodo_key_decode_fu_716 : component frodo_key_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_key_decode_fu_716_ap_start,
        ap_done => grp_frodo_key_decode_fu_716_ap_done,
        ap_idle => grp_frodo_key_decode_fu_716_ap_idle,
        ap_ready => grp_frodo_key_decode_fu_716_ap_ready,
        out_r_address1 => grp_frodo_key_decode_fu_716_out_r_address1,
        out_r_ce1 => grp_frodo_key_decode_fu_716_out_r_ce1,
        out_r_we1 => grp_frodo_key_decode_fu_716_out_r_we1,
        out_r_d1 => grp_frodo_key_decode_fu_716_out_r_d1,
        in_r_address0 => grp_frodo_key_decode_fu_716_in_r_address0,
        in_r_ce0 => grp_frodo_key_decode_fu_716_in_r_ce0,
        in_r_q0 => M_q0);

    grp_frodo_unpack_219_fu_722 : component frodo_unpack_219
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_unpack_219_fu_722_ap_start,
        ap_done => grp_frodo_unpack_219_fu_722_ap_done,
        ap_idle => grp_frodo_unpack_219_fu_722_ap_idle,
        ap_ready => grp_frodo_unpack_219_fu_722_ap_ready,
        C_address1 => grp_frodo_unpack_219_fu_722_C_address1,
        C_ce1 => grp_frodo_unpack_219_fu_722_C_ce1,
        C_we1 => grp_frodo_unpack_219_fu_722_C_we1,
        C_d1 => grp_frodo_unpack_219_fu_722_C_d1,
        b_address0 => grp_frodo_unpack_219_fu_722_b_address0,
        b_ce0 => grp_frodo_unpack_219_fu_722_b_ce0,
        b_q0 => ct_q0);

    grp_frodo_unpack_2_fu_730 : component frodo_unpack_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_unpack_2_fu_730_ap_start,
        ap_done => grp_frodo_unpack_2_fu_730_ap_done,
        ap_idle => grp_frodo_unpack_2_fu_730_ap_idle,
        ap_ready => grp_frodo_unpack_2_fu_730_ap_ready,
        C_address1 => grp_frodo_unpack_2_fu_730_C_address1,
        C_ce1 => grp_frodo_unpack_2_fu_730_C_ce1,
        C_we1 => grp_frodo_unpack_2_fu_730_C_we1,
        C_d1 => grp_frodo_unpack_2_fu_730_C_d1,
        b_address0 => grp_frodo_unpack_2_fu_730_b_address0,
        b_ce0 => grp_frodo_unpack_2_fu_730_b_ce0,
        b_q0 => sk_q0);

    grp_matrix_mult_bs_fu_737 : component matrix_mult_bs
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_bs_fu_737_ap_start,
        ap_done => grp_matrix_mult_bs_fu_737_ap_done,
        ap_idle => grp_matrix_mult_bs_fu_737_ap_idle,
        ap_ready => grp_matrix_mult_bs_fu_737_ap_ready,
        V_address0 => grp_matrix_mult_bs_fu_737_V_address0,
        V_ce0 => grp_matrix_mult_bs_fu_737_V_ce0,
        V_q0 => M_q0,
        V_address1 => grp_matrix_mult_bs_fu_737_V_address1,
        V_ce1 => grp_matrix_mult_bs_fu_737_V_ce1,
        V_we1 => grp_matrix_mult_bs_fu_737_V_we1,
        V_d1 => grp_matrix_mult_bs_fu_737_V_d1,
        B_address0 => grp_matrix_mult_bs_fu_737_B_address0,
        B_ce0 => grp_matrix_mult_bs_fu_737_B_ce0,
        B_q0 => Bp_q0,
        B_address1 => grp_matrix_mult_bs_fu_737_B_address1,
        B_ce1 => grp_matrix_mult_bs_fu_737_B_ce1,
        B_q1 => Bp_q1,
        S_address0 => grp_matrix_mult_bs_fu_737_S_address0,
        S_ce0 => grp_matrix_mult_bs_fu_737_S_ce0,
        S_q0 => sk_q0,
        S_address1 => grp_matrix_mult_bs_fu_737_S_address1,
        S_ce1 => grp_matrix_mult_bs_fu_737_S_ce1,
        S_q1 => sk_q1);

    grp_frodo_unpack_1_fu_745 : component frodo_unpack_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_unpack_1_fu_745_ap_start,
        ap_done => grp_frodo_unpack_1_fu_745_ap_done,
        ap_idle => grp_frodo_unpack_1_fu_745_ap_idle,
        ap_ready => grp_frodo_unpack_1_fu_745_ap_ready,
        C_address1 => grp_frodo_unpack_1_fu_745_C_address1,
        C_ce1 => grp_frodo_unpack_1_fu_745_C_ce1,
        C_we1 => grp_frodo_unpack_1_fu_745_C_we1,
        C_d1 => grp_frodo_unpack_1_fu_745_C_d1,
        b_address0 => grp_frodo_unpack_1_fu_745_b_address0,
        b_ce0 => grp_frodo_unpack_1_fu_745_b_ce0,
        b_q0 => ct_q0);

    grp_matrix_mult_64_fu_752 : component matrix_mult_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_64_fu_752_ap_start,
        ap_done => grp_matrix_mult_64_fu_752_ap_done,
        ap_idle => grp_matrix_mult_64_fu_752_ap_idle,
        ap_ready => grp_matrix_mult_64_fu_752_ap_ready,
        V_address0 => grp_matrix_mult_64_fu_752_V_address0,
        V_ce0 => grp_matrix_mult_64_fu_752_V_ce0,
        V_q0 => V_q0,
        V_address1 => grp_matrix_mult_64_fu_752_V_address1,
        V_ce1 => grp_matrix_mult_64_fu_752_V_ce1,
        V_we1 => grp_matrix_mult_64_fu_752_V_we1,
        V_d1 => grp_matrix_mult_64_fu_752_V_d1,
        B_address0 => grp_matrix_mult_64_fu_752_B_address0,
        B_ce0 => grp_matrix_mult_64_fu_752_B_ce0,
        B_q0 => S_q0,
        B_address1 => grp_matrix_mult_64_fu_752_B_address1,
        B_ce1 => grp_matrix_mult_64_fu_752_B_ce1,
        B_q1 => S_q1,
        S_address0 => grp_matrix_mult_64_fu_752_S_address0,
        S_ce0 => grp_matrix_mult_64_fu_752_S_ce0,
        S_q0 => B_q0,
        S_address1 => grp_matrix_mult_64_fu_752_S_address1,
        S_ce1 => grp_matrix_mult_64_fu_752_S_ce1,
        S_q1 => B_q1);

    grp_frodo_key_encode_fu_759 : component frodo_key_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_key_encode_fu_759_ap_start,
        ap_done => grp_frodo_key_encode_fu_759_ap_done,
        ap_idle => grp_frodo_key_encode_fu_759_ap_idle,
        ap_ready => grp_frodo_key_encode_fu_759_ap_ready,
        C_address1 => grp_frodo_key_encode_fu_759_C_address1,
        C_ce1 => grp_frodo_key_encode_fu_759_C_ce1,
        C_we1 => grp_frodo_key_encode_fu_759_C_we1,
        C_d1 => grp_frodo_key_encode_fu_759_C_d1,
        V_address0 => grp_frodo_key_encode_fu_759_V_address0,
        V_ce0 => grp_frodo_key_encode_fu_759_V_ce0,
        V_q0 => V_q0,
        mu_address0 => grp_frodo_key_encode_fu_759_mu_address0,
        mu_ce0 => grp_frodo_key_encode_fu_759_mu_ce0,
        mu_q0 => mup_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_frodo_unpack_1_fu_745_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_frodo_unpack_1_fu_745_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_matrix_mult_AS_fu_686_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state27);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_matrix_mult_AS_fu_686_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state35) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_frodo_key_encode_fu_759_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state35))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state35);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((grp_frodo_key_encode_fu_759_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state38) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state38))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state38);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln139_fu_1071_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state43))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state43);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln139_fu_1071_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_key_decode_fu_716_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_key_decode_fu_716_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_frodo_key_decode_fu_716_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_key_decode_fu_716_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_key_decode_fu_716_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_key_encode_fu_759_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_key_encode_fu_759_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_frodo_key_encode_fu_759_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_key_encode_fu_759_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_key_encode_fu_759_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_sample_fu_708_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_sample_fu_708_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_frodo_sample_fu_708_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_sample_fu_708_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_sample_fu_708_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_unpack_1_fu_745_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_unpack_1_fu_745_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_frodo_unpack_1_fu_745_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_unpack_1_fu_745_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_unpack_1_fu_745_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_unpack_219_fu_722_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_unpack_219_fu_722_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_frodo_unpack_219_fu_722_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_unpack_219_fu_722_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_unpack_219_fu_722_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_unpack_2_fu_730_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_unpack_2_fu_730_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    grp_frodo_unpack_2_fu_730_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_unpack_2_fu_730_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_unpack_2_fu_730_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_64_fu_752_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_64_fu_752_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_matrix_mult_64_fu_752_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_64_fu_752_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_64_fu_752_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_AS_fu_686_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_AS_fu_686_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_matrix_mult_AS_fu_686_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_AS_fu_686_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_AS_fu_686_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_bs_fu_737_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_bs_fu_737_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_matrix_mult_bs_fu_737_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_bs_fu_737_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_bs_fu_737_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_10304_fu_696_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_10304_fu_696_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_shake128_10304_fu_696_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_10304_fu_696_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_10304_fu_696_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_8_fu_679_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_8_fu_679_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln162_fu_1131_p2 = ap_const_lv1_1))) then 
                    grp_shake128_8_fu_679_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_8_fu_679_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_8_fu_679_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_S_fu_702_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_S_fu_702_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln83_fu_834_p2 = ap_const_lv1_1))) then 
                    grp_shake128_S_fu_702_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_S_fu_702_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_S_fu_702_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_fu_766_p2 = ap_const_lv1_0))) then 
                i_0_reg_543 <= i_fu_772_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_frodo_unpack_1_fu_745_ap_done = ap_const_logic_1))) then 
                i_0_reg_543 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_1_reg_554 <= i_19_reg_1185;
            elsif (((grp_frodo_key_decode_fu_716_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_1_reg_554 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_2_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln78_fu_783_p2 = ap_const_lv1_1))) then 
                i_2_reg_566 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_2_reg_566 <= i_20_reg_1198;
            end if; 
        end if;
    end process;

    i_3_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_3_reg_578 <= i_21_reg_1211;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_578 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_4_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln107_fu_935_p2 = ap_const_lv1_0))) then 
                i_4_reg_589 <= i_22_fu_941_p2;
            elsif (((grp_matrix_mult_AS_fu_686_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_4_reg_589 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_5_0_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln123_fu_957_p2 = ap_const_lv1_0))) then 
                i_5_0_reg_612 <= add_ln123_fu_981_p2;
            elsif (((grp_frodo_key_encode_fu_759_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i_5_0_reg_612 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_6_reg_635_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_6_reg_635 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln131_fu_1023_p2 = ap_const_lv1_0))) then 
                i_6_reg_635 <= i_23_fu_1029_p2;
            end if; 
        end if;
    end process;

    i_7_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_7_reg_646 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_7_reg_646 <= i_24_reg_1321;
            end if; 
        end if;
    end process;

    i_8_0_reg_657_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln139_fu_1071_p2 = ap_const_lv1_1))) then 
                i_8_0_reg_657 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln157_fu_1099_p2 = ap_const_lv1_0))) then 
                i_8_0_reg_657 <= add_ln157_fu_1121_p2;
            end if; 
        end if;
    end process;

    i_9_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_9_reg_668 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                i_9_reg_668 <= i_25_reg_1379;
            end if; 
        end if;
    end process;

    r0_0_0_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln123_reg_1255 = ap_const_lv1_0))) then 
                r0_0_0_reg_600 <= select_ln126_1_fu_1015_p3;
            elsif (((grp_frodo_key_encode_fu_759_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                r0_0_0_reg_600 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r1_0_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                r1_0_reg_623 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln131_reg_1289 = ap_const_lv1_0))) then 
                r1_0_reg_623 <= select_ln133_fu_1051_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_19_reg_1185 <= i_19_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_20_reg_1198 <= i_20_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_21_reg_1211 <= i_21_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                i_24_reg_1321 <= i_24_fu_1077_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                i_25_reg_1379 <= i_25_fu_1137_p2;
                    zext_ln162_reg_1371(3 downto 0) <= zext_ln162_fu_1127_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln107_reg_1236 <= icmp_ln107_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln123_reg_1255 <= icmp_ln123_fu_957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln131_reg_1289 <= icmp_ln131_fu_1023_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                icmp_ln141_reg_1313 <= icmp_ln141_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln157_reg_1342 <= icmp_ln157_fu_1099_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln60_reg_1163 <= icmp_ln60_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln107_fu_935_p2 = ap_const_lv1_0))) then
                    zext_ln109_reg_1245(12 downto 0) <= zext_ln109_fu_947_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln139_fu_1071_p2 = ap_const_lv1_0))) then
                    zext_ln142_reg_1326(3 downto 0) <= zext_ln142_fu_1083_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln157_fu_1099_p2 = ap_const_lv1_0))) then
                    zext_ln160_1_reg_1356(12 downto 1) <= zext_ln160_1_fu_1116_p1(12 downto 1);
                    zext_ln160_reg_1346(12 downto 0) <= zext_ln160_fu_1105_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_fu_766_p2 = ap_const_lv1_0))) then
                    zext_ln62_reg_1172(6 downto 0) <= zext_ln62_fu_778_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln92_fu_883_p2 = ap_const_lv1_0))) then
                    zext_ln93_1_reg_1221(2 downto 0) <= zext_ln93_1_fu_900_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln62_reg_1172(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln93_1_reg_1221(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln109_reg_1245(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln142_reg_1326(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln160_reg_1346(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln160_1_reg_1356(0) <= '1';
    zext_ln160_1_reg_1356(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln162_reg_1371(12 downto 4) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_frodo_unpack_1_fu_745_ap_done, icmp_ln60_fu_766_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state11, icmp_ln78_fu_783_p2, ap_CS_fsm_state13, icmp_ln83_fu_834_p2, ap_CS_fsm_state18, icmp_ln92_fu_883_p2, icmp_ln107_fu_935_p2, ap_enable_reg_pp1_iter0, icmp_ln123_fu_957_p2, ap_enable_reg_pp2_iter0, icmp_ln131_fu_1023_p2, ap_enable_reg_pp3_iter0, icmp_ln139_fu_1071_p2, ap_CS_fsm_state41, icmp_ln157_fu_1099_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state46, icmp_ln162_fu_1131_p2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_ap_done, ap_block_pp1_stage0_subdone, ap_CS_fsm_state34, grp_frodo_key_encode_fu_759_ap_done, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, grp_shake128_8_fu_679_ap_done, grp_shake128_10304_fu_696_ap_done, grp_shake128_S_fu_702_ap_done, grp_frodo_sample_fu_708_ap_done, grp_frodo_key_decode_fu_716_ap_done, grp_frodo_unpack_219_fu_722_ap_done, grp_frodo_unpack_2_fu_730_ap_done, grp_matrix_mult_bs_fu_737_ap_done, grp_matrix_mult_64_fu_752_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state48, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state2, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state32)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_frodo_unpack_219_fu_722_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_frodo_unpack_1_fu_745_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln60_fu_766_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln60_fu_766_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_matrix_mult_bs_fu_737_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_frodo_key_decode_fu_716_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln78_fu_783_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln83_fu_834_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((grp_shake128_S_fu_702_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln92_fu_883_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_shake128_10304_fu_696_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_frodo_sample_fu_708_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_matrix_mult_AS_fu_686_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln107_fu_935_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln107_fu_935_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_frodo_unpack_2_fu_730_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_matrix_mult_64_fu_752_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_frodo_key_encode_fu_759_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln123_fu_957_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln123_fu_957_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln131_fu_1023_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln131_fu_1023_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln139_fu_1071_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln157_fu_1099_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln157_fu_1099_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln162_fu_1131_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state48 => 
                if (((grp_shake128_8_fu_679_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B_address1_assign_proc : process(grp_frodo_unpack_2_fu_730_C_address1, grp_matrix_mult_64_fu_752_S_address1, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            B_address1 <= grp_matrix_mult_64_fu_752_S_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            B_address1 <= grp_frodo_unpack_2_fu_730_C_address1;
        else 
            B_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(grp_matrix_mult_64_fu_752_S_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            B_ce0 <= grp_matrix_mult_64_fu_752_S_ce0;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(grp_frodo_unpack_2_fu_730_C_ce1, grp_matrix_mult_64_fu_752_S_ce1, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            B_ce1 <= grp_matrix_mult_64_fu_752_S_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            B_ce1 <= grp_frodo_unpack_2_fu_730_C_ce1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_we1_assign_proc : process(grp_frodo_unpack_2_fu_730_C_we1, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            B_we1 <= grp_frodo_unpack_2_fu_730_C_we1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Bbpp_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln109_fu_947_p1, ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_B_address0, grp_frodo_sample_fu_708_E_address0, ap_CS_fsm_state24, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Bbpp_address0 <= zext_ln109_fu_947_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Bbpp_address0 <= grp_frodo_sample_fu_708_E_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Bbpp_address0 <= grp_matrix_mult_AS_fu_686_B_address0;
        else 
            Bbpp_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    Bbpp_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_B_ce0, grp_frodo_sample_fu_708_E_ce0, ap_CS_fsm_state24)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            Bbpp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Bbpp_ce0 <= grp_frodo_sample_fu_708_E_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Bbpp_ce0 <= grp_matrix_mult_AS_fu_686_B_ce0;
        else 
            Bbpp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bbpp_ce1_assign_proc : process(ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_B_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Bbpp_ce1 <= grp_matrix_mult_AS_fu_686_B_ce1;
        else 
            Bbpp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Bbpp_d0_assign_proc : process(ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_B_d0, grp_frodo_sample_fu_708_E_d0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Bbpp_d0 <= grp_frodo_sample_fu_708_E_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Bbpp_d0 <= grp_matrix_mult_AS_fu_686_B_d0;
        else 
            Bbpp_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Bbpp_we0_assign_proc : process(ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_B_we0, grp_frodo_sample_fu_708_E_we0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Bbpp_we0 <= grp_frodo_sample_fu_708_E_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Bbpp_we0 <= grp_matrix_mult_AS_fu_686_B_we0;
        else 
            Bbpp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Bbpp_we1_assign_proc : process(ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_B_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            Bbpp_we1 <= grp_matrix_mult_AS_fu_686_B_we1;
        else 
            Bbpp_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Bp_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_matrix_mult_bs_fu_737_B_address0, ap_block_pp2_stage0, ap_CS_fsm_state8, zext_ln126_fu_963_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Bp_address0 <= zext_ln126_fu_963_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Bp_address0 <= grp_matrix_mult_bs_fu_737_B_address0;
        else 
            Bp_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    Bp_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_frodo_unpack_219_fu_722_C_address1, grp_matrix_mult_bs_fu_737_B_address1, ap_block_pp2_stage0, ap_CS_fsm_state2, ap_CS_fsm_state8, zext_ln126_1_fu_975_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Bp_address1 <= zext_ln126_1_fu_975_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Bp_address1 <= grp_matrix_mult_bs_fu_737_B_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Bp_address1 <= grp_frodo_unpack_219_fu_722_C_address1;
        else 
            Bp_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    Bp_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, grp_matrix_mult_bs_fu_737_B_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Bp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Bp_ce0 <= grp_matrix_mult_bs_fu_737_B_ce0;
        else 
            Bp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bp_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, grp_frodo_unpack_219_fu_722_C_ce1, grp_matrix_mult_bs_fu_737_B_ce1, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Bp_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Bp_ce1 <= grp_matrix_mult_bs_fu_737_B_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Bp_ce1 <= grp_frodo_unpack_219_fu_722_C_ce1;
        else 
            Bp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Bp_we1_assign_proc : process(grp_frodo_unpack_219_fu_722_C_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Bp_we1 <= grp_frodo_unpack_219_fu_722_C_we1;
        else 
            Bp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Bpp_address0 <= zext_ln126_fu_963_p1(13 - 1 downto 0);

    Bpp_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, zext_ln109_reg_1245, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0, ap_block_pp1_stage0, zext_ln126_1_fu_975_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Bpp_address1 <= zext_ln126_1_fu_975_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            Bpp_address1 <= zext_ln109_reg_1245(13 - 1 downto 0);
        else 
            Bpp_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    Bpp_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Bpp_ce0 <= ap_const_logic_1;
        else 
            Bpp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bpp_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            Bpp_ce1 <= ap_const_logic_1;
        else 
            Bpp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Bpp_d1 <= Bbpp_q0(15 - 1 downto 0);

    Bpp_we1_assign_proc : process(icmp_ln107_reg_1236, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln107_reg_1236 = ap_const_lv1_0))) then 
            Bpp_we1 <= ap_const_logic_1;
        else 
            Bpp_we1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln62_fu_778_p1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln133_fu_1035_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            C_address0 <= zext_ln133_fu_1035_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            C_address0 <= zext_ln62_fu_778_p1(6 - 1 downto 0);
        else 
            C_address0 <= "XXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_state4, grp_frodo_unpack_1_fu_745_C_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_ce1 <= grp_frodo_unpack_1_fu_745_C_ce1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_we1_assign_proc : process(ap_CS_fsm_state4, grp_frodo_unpack_1_fu_745_C_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_we1 <= grp_frodo_unpack_1_fu_745_C_we1;
        else 
            C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Cp_address0 <= zext_ln133_fu_1035_p1(6 - 1 downto 0);

    Cp_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            Cp_ce0 <= ap_const_logic_1;
        else 
            Cp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Cp_ce1_assign_proc : process(ap_CS_fsm_state34, grp_frodo_key_encode_fu_759_C_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Cp_ce1 <= grp_frodo_key_encode_fu_759_C_ce1;
        else 
            Cp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Cp_we1_assign_proc : process(ap_CS_fsm_state34, grp_frodo_key_encode_fu_759_C_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Cp_we1 <= grp_frodo_key_encode_fu_759_C_we1;
        else 
            Cp_we1 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_address1_assign_proc : process(grp_shake128_S_fu_702_input_r_address1, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln79_1_fu_829_p1, zext_ln84_fu_859_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            G2in_address1 <= zext_ln84_fu_859_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            G2in_address1 <= zext_ln79_1_fu_829_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2in_address1 <= grp_shake128_S_fu_702_input_r_address1;
        else 
            G2in_address1 <= "XXXX";
        end if; 
    end process;


    G2in_ce0_assign_proc : process(grp_shake128_S_fu_702_input_r_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2in_ce0 <= grp_shake128_S_fu_702_input_r_ce0;
        else 
            G2in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_ce1_assign_proc : process(grp_shake128_S_fu_702_input_r_ce1, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            G2in_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2in_ce1 <= grp_shake128_S_fu_702_input_r_ce1;
        else 
            G2in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_d1_assign_proc : process(sk_q0, ap_CS_fsm_state12, ap_CS_fsm_state14, tmp_4_fu_814_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            G2in_d1 <= sk_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            G2in_d1 <= tmp_4_fu_814_p3;
        else 
            G2in_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    G2in_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            G2in_we1 <= ap_const_logic_1;
        else 
            G2in_we1 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_address0_assign_proc : process(ap_CS_fsm_state18, icmp_ln92_fu_883_p2, ap_CS_fsm_state41, zext_ln93_fu_895_p1, zext_ln142_1_fu_1094_p1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            G2out_address0 <= zext_ln142_1_fu_1094_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln92_fu_883_p2 = ap_const_lv1_1))) then 
            G2out_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln92_fu_883_p2 = ap_const_lv1_0))) then 
            G2out_address0 <= zext_ln93_fu_895_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            G2out_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            G2out_address0 <= "XXXX";
        end if; 
    end process;


    G2out_address1_assign_proc : process(ap_CS_fsm_state18, zext_ln93_1_fu_900_p1, grp_shake128_S_fu_702_output_r_address1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            G2out_address1 <= zext_ln93_1_fu_900_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2out_address1 <= grp_shake128_S_fu_702_output_r_address1;
        else 
            G2out_address1 <= "XXXX";
        end if; 
    end process;


    G2out_ce0_assign_proc : process(ap_CS_fsm_state18, icmp_ln92_fu_883_p2, ap_CS_fsm_state41, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln92_fu_883_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln92_fu_883_p2 = ap_const_lv1_0)))) then 
            G2out_ce0 <= ap_const_logic_1;
        else 
            G2out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_ce1_assign_proc : process(ap_CS_fsm_state18, grp_shake128_S_fu_702_output_r_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            G2out_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2out_ce1 <= grp_shake128_S_fu_702_output_r_ce1;
        else 
            G2out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_we1_assign_proc : process(grp_shake128_S_fu_702_output_r_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2out_we1 <= grp_shake128_S_fu_702_output_r_we1;
        else 
            G2out_we1 <= ap_const_logic_0;
        end if; 
    end process;


    M_address0_assign_proc : process(grp_frodo_key_decode_fu_716_in_r_address0, grp_matrix_mult_bs_fu_737_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            M_address0 <= grp_matrix_mult_bs_fu_737_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            M_address0 <= grp_frodo_key_decode_fu_716_in_r_address0;
        else 
            M_address0 <= "XXXXXX";
        end if; 
    end process;


    M_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln62_reg_1172, ap_enable_reg_pp0_iter1, grp_matrix_mult_bs_fu_737_V_address1, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            M_address1 <= zext_ln62_reg_1172(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            M_address1 <= grp_matrix_mult_bs_fu_737_V_address1;
        else 
            M_address1 <= "XXXXXX";
        end if; 
    end process;


    M_ce0_assign_proc : process(grp_frodo_key_decode_fu_716_in_r_ce0, grp_matrix_mult_bs_fu_737_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            M_ce0 <= grp_matrix_mult_bs_fu_737_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            M_ce0 <= grp_frodo_key_decode_fu_716_in_r_ce0;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_matrix_mult_bs_fu_737_V_ce1, ap_CS_fsm_state8)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            M_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            M_ce1 <= grp_matrix_mult_bs_fu_737_V_ce1;
        else 
            M_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    M_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, C_q0, grp_matrix_mult_bs_fu_737_V_d1, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            M_d1 <= C_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            M_d1 <= grp_matrix_mult_bs_fu_737_V_d1;
        else 
            M_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    M_we1_assign_proc : process(icmp_ln60_reg_1163, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_matrix_mult_bs_fu_737_V_we1, ap_CS_fsm_state8)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_1163 = ap_const_lv1_0))) then 
            M_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            M_we1 <= grp_matrix_mult_bs_fu_737_V_we1;
        else 
            M_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_S_address0, grp_frodo_sample_fu_708_S_address0, grp_matrix_mult_64_fu_752_B_address0, ap_CS_fsm_state24, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            S_address0 <= grp_matrix_mult_64_fu_752_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            S_address0 <= grp_frodo_sample_fu_708_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            S_address0 <= grp_matrix_mult_AS_fu_686_S_address0;
        else 
            S_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_S_ce0, grp_frodo_sample_fu_708_S_ce0, grp_matrix_mult_64_fu_752_B_ce0, ap_CS_fsm_state24, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            S_ce0 <= grp_matrix_mult_64_fu_752_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            S_ce0 <= grp_frodo_sample_fu_708_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            S_ce0 <= grp_matrix_mult_AS_fu_686_S_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(grp_matrix_mult_64_fu_752_B_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            S_ce1 <= grp_matrix_mult_64_fu_752_B_ce1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_we0_assign_proc : process(grp_frodo_sample_fu_708_S_we0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            S_we0 <= grp_frodo_sample_fu_708_S_we0;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_address0_assign_proc : process(ap_CS_fsm_state34, grp_matrix_mult_64_fu_752_V_address0, grp_frodo_key_encode_fu_759_V_address0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            V_address0 <= grp_frodo_key_encode_fu_759_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            V_address0 <= grp_matrix_mult_64_fu_752_V_address0;
        else 
            V_address0 <= "XXXXXX";
        end if; 
    end process;


    V_address1_assign_proc : process(grp_frodo_sample_fu_708_V_address1, grp_matrix_mult_64_fu_752_V_address1, ap_CS_fsm_state24, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            V_address1 <= grp_matrix_mult_64_fu_752_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            V_address1 <= grp_frodo_sample_fu_708_V_address1;
        else 
            V_address1 <= "XXXXXX";
        end if; 
    end process;


    V_ce0_assign_proc : process(ap_CS_fsm_state34, grp_matrix_mult_64_fu_752_V_ce0, grp_frodo_key_encode_fu_759_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            V_ce0 <= grp_frodo_key_encode_fu_759_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            V_ce0 <= grp_matrix_mult_64_fu_752_V_ce0;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_ce1_assign_proc : process(grp_frodo_sample_fu_708_V_ce1, grp_matrix_mult_64_fu_752_V_ce1, ap_CS_fsm_state24, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            V_ce1 <= grp_matrix_mult_64_fu_752_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            V_ce1 <= grp_frodo_sample_fu_708_V_ce1;
        else 
            V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    V_d1_assign_proc : process(grp_frodo_sample_fu_708_V_d1, grp_matrix_mult_64_fu_752_V_d1, ap_CS_fsm_state24, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            V_d1 <= grp_matrix_mult_64_fu_752_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            V_d1 <= grp_frodo_sample_fu_708_V_d1;
        else 
            V_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    V_we1_assign_proc : process(grp_frodo_sample_fu_708_V_we1, grp_matrix_mult_64_fu_752_V_we1, ap_CS_fsm_state24, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            V_we1 <= grp_matrix_mult_64_fu_752_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            V_we1 <= grp_frodo_sample_fu_708_V_we1;
        else 
            V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln123_fu_981_p2 <= std_logic_vector(unsigned(i_5_0_reg_612) + unsigned(ap_const_lv13_2));
    add_ln157_fu_1121_p2 <= std_logic_vector(unsigned(i_8_0_reg_657) + unsigned(ap_const_lv13_2));
    add_ln164_fu_1148_p2 <= std_logic_vector(unsigned(zext_ln162_reg_1371) + unsigned(ap_const_lv13_12FC));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(38);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(35);
    ap_CS_fsm_state41 <= ap_CS_fsm(36);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state45 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(40);
    ap_CS_fsm_state47 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(42);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln60_fu_766_p2)
    begin
        if ((icmp_ln60_fu_766_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state27_assign_proc : process(icmp_ln107_fu_935_p2)
    begin
        if ((icmp_ln107_fu_935_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state35_assign_proc : process(icmp_ln123_fu_957_p2)
    begin
        if ((icmp_ln123_fu_957_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state38_assign_proc : process(icmp_ln131_fu_1023_p2)
    begin
        if ((icmp_ln131_fu_1023_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state43_assign_proc : process(icmp_ln157_fu_1099_p2)
    begin
        if ((icmp_ln157_fu_1099_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_shake128_8_fu_679_ap_done, ap_CS_fsm_state48)
    begin
        if (((grp_shake128_8_fu_679_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_shake128_8_fu_679_ap_done, ap_CS_fsm_state48)
    begin
        if (((grp_shake128_8_fu_679_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ct_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp4_stage0, zext_ln160_fu_1105_p1, ap_enable_reg_pp4_iter0, grp_frodo_unpack_219_fu_722_b_address0, grp_frodo_unpack_1_fu_745_b_address0, ap_CS_fsm_state2, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ct_address0 <= zext_ln160_fu_1105_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ct_address0 <= grp_frodo_unpack_1_fu_745_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ct_address0 <= grp_frodo_unpack_219_fu_722_b_address0;
        else 
            ct_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    ct_address1 <= zext_ln160_1_fu_1116_p1(13 - 1 downto 0);

    ct_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, grp_frodo_unpack_219_fu_722_b_ce0, grp_frodo_unpack_1_fu_745_b_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ct_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ct_ce0 <= grp_frodo_unpack_1_fu_745_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ct_ce0 <= grp_frodo_unpack_219_fu_722_b_ce0;
        else 
            ct_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ct_ce1 <= ap_const_logic_1;
        else 
            ct_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_k_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, zext_ln160_reg_1346, ap_enable_reg_pp4_iter1, grp_shake128_8_fu_679_input_r_address0, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_block_pp4_stage0, zext_ln164_1_fu_1153_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ct_k_address0 <= zext_ln164_1_fu_1153_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ct_k_address0 <= zext_ln160_reg_1346(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ct_k_address0 <= grp_shake128_8_fu_679_input_r_address0;
        else 
            ct_k_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_k_address1_assign_proc : process(ap_CS_fsm_pp4_stage0, zext_ln160_1_reg_1356, ap_enable_reg_pp4_iter1, grp_shake128_8_fu_679_input_r_address1, ap_CS_fsm_state48, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ct_k_address1 <= zext_ln160_1_reg_1356(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ct_k_address1 <= grp_shake128_8_fu_679_input_r_address1;
        else 
            ct_k_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_k_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1, grp_shake128_8_fu_679_input_r_ce0, ap_CS_fsm_state47, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            ct_k_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ct_k_ce0 <= grp_shake128_8_fu_679_input_r_ce0;
        else 
            ct_k_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_k_ce1_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1, grp_shake128_8_fu_679_input_r_ce1, ap_CS_fsm_state48)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ct_k_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ct_k_ce1 <= grp_shake128_8_fu_679_input_r_ce1;
        else 
            ct_k_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_k_d0_assign_proc : process(ct_q0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, kb_q0, ap_CS_fsm_state47, ap_block_pp4_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ct_k_d0 <= kb_q0;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ct_k_d0 <= ct_q0;
        else 
            ct_k_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ct_k_we0_assign_proc : process(icmp_ln157_reg_1342, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln157_reg_1342 = ap_const_lv1_0)))) then 
            ct_k_we0 <= ap_const_logic_1;
        else 
            ct_k_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_k_we1_assign_proc : process(icmp_ln157_reg_1342, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln157_reg_1342 = ap_const_lv1_0))) then 
            ct_k_we1 <= ap_const_logic_1;
        else 
            ct_k_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_108_fu_800_p1 <= mup_q0(8 - 1 downto 0);
    grp_frodo_key_decode_fu_716_ap_start <= grp_frodo_key_decode_fu_716_ap_start_reg;
    grp_frodo_key_encode_fu_759_ap_start <= grp_frodo_key_encode_fu_759_ap_start_reg;
    grp_frodo_sample_fu_708_ap_start <= grp_frodo_sample_fu_708_ap_start_reg;
    grp_frodo_unpack_1_fu_745_ap_start <= grp_frodo_unpack_1_fu_745_ap_start_reg;
    grp_frodo_unpack_219_fu_722_ap_start <= grp_frodo_unpack_219_fu_722_ap_start_reg;
    grp_frodo_unpack_2_fu_730_ap_start <= grp_frodo_unpack_2_fu_730_ap_start_reg;
    grp_matrix_mult_64_fu_752_ap_start <= grp_matrix_mult_64_fu_752_ap_start_reg;
    grp_matrix_mult_AS_fu_686_ap_start <= grp_matrix_mult_AS_fu_686_ap_start_reg;
    grp_matrix_mult_bs_fu_737_ap_start <= grp_matrix_mult_bs_fu_737_ap_start_reg;
    grp_shake128_10304_fu_696_ap_start <= grp_shake128_10304_fu_696_ap_start_reg;
    grp_shake128_8_fu_679_ap_start <= grp_shake128_8_fu_679_ap_start_reg;
    grp_shake128_S_fu_702_ap_start <= grp_shake128_S_fu_702_ap_start_reg;
    i_19_fu_789_p2 <= std_logic_vector(unsigned(i_1_reg_554) + unsigned(ap_const_lv4_1));
    i_20_fu_840_p2 <= std_logic_vector(unsigned(i_2_reg_566) + unsigned(ap_const_lv4_1));
    i_21_fu_889_p2 <= std_logic_vector(unsigned(i_3_reg_578) + unsigned(ap_const_lv3_1));
    i_22_fu_941_p2 <= std_logic_vector(unsigned(i_4_reg_589) + unsigned(ap_const_lv13_1));
    i_23_fu_1029_p2 <= std_logic_vector(unsigned(i_6_reg_635) + unsigned(ap_const_lv7_1));
    i_24_fu_1077_p2 <= std_logic_vector(unsigned(i_7_reg_646) + unsigned(ap_const_lv4_1));
    i_25_fu_1137_p2 <= std_logic_vector(unsigned(i_9_reg_668) + unsigned(ap_const_lv4_1));
    i_fu_772_p2 <= std_logic_vector(unsigned(i_0_reg_543) + unsigned(ap_const_lv7_1));
    icmp_ln107_fu_935_p2 <= "1" when (i_4_reg_589 = ap_const_lv13_1400) else "0";
    icmp_ln123_fu_957_p2 <= "1" when (i_5_0_reg_612 = ap_const_lv13_1400) else "0";
    icmp_ln126_1_fu_1009_p2 <= "1" when (zext_ln126_3_fu_1005_p1 = Bp_q1) else "0";
    icmp_ln126_fu_991_p2 <= "1" when (zext_ln126_2_fu_987_p1 = Bp_q0) else "0";
    icmp_ln131_fu_1023_p2 <= "1" when (i_6_reg_635 = ap_const_lv7_40) else "0";
    icmp_ln133_fu_1045_p2 <= "1" when (C_q0 = zext_ln133_1_fu_1041_p1) else "0";
    icmp_ln139_fu_1071_p2 <= "1" when (i_7_reg_646 = ap_const_lv4_8) else "0";
    icmp_ln141_fu_1065_p2 <= "1" when (or_ln141_fu_1059_p2 = ap_const_lv8_0) else "0";
    icmp_ln157_fu_1099_p2 <= "1" when (i_8_0_reg_657 = ap_const_lv13_12FC) else "0";
    icmp_ln162_fu_1131_p2 <= "1" when (i_9_reg_668 = ap_const_lv4_8) else "0";
    icmp_ln60_fu_766_p2 <= "1" when (i_0_reg_543 = ap_const_lv7_40) else "0";
    icmp_ln78_fu_783_p2 <= "1" when (i_1_reg_554 = ap_const_lv4_8) else "0";
    icmp_ln83_fu_834_p2 <= "1" when (i_2_reg_566 = ap_const_lv4_8) else "0";
    icmp_ln92_fu_883_p2 <= "1" when (i_3_reg_578 = ap_const_lv3_7) else "0";
    kb_addr_gep_fu_470_p3 <= zext_ln142_reg_1326(3 - 1 downto 0);
    kb_address0 <= zext_ln164_fu_1143_p1(3 - 1 downto 0);

    kb_address1_assign_proc : process(icmp_ln141_reg_1313, zext_ln142_reg_1326, ap_CS_fsm_state42, kb_addr_gep_fu_470_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
            if ((icmp_ln141_reg_1313 = ap_const_lv1_1)) then 
                kb_address1 <= kb_addr_gep_fu_470_p3;
            elsif ((icmp_ln141_reg_1313 = ap_const_lv1_0)) then 
                kb_address1 <= zext_ln142_reg_1326(3 - 1 downto 0);
            else 
                kb_address1 <= "XXX";
            end if;
        else 
            kb_address1 <= "XXX";
        end if; 
    end process;


    kb_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            kb_ce0 <= ap_const_logic_1;
        else 
            kb_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kb_ce1_assign_proc : process(icmp_ln141_reg_1313, ap_CS_fsm_state42)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln141_reg_1313 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln141_reg_1313 = ap_const_lv1_0)))) then 
            kb_ce1 <= ap_const_logic_1;
        else 
            kb_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kb_d1_assign_proc : process(sk_q0, icmp_ln141_reg_1313, G2out_q0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
            if ((icmp_ln141_reg_1313 = ap_const_lv1_1)) then 
                kb_d1 <= G2out_q0;
            elsif ((icmp_ln141_reg_1313 = ap_const_lv1_0)) then 
                kb_d1 <= sk_q0;
            else 
                kb_d1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            kb_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    kb_we1_assign_proc : process(icmp_ln141_reg_1313, ap_CS_fsm_state42)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln141_reg_1313 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp_ln141_reg_1313 = ap_const_lv1_0)))) then 
            kb_we1 <= ap_const_logic_1;
        else 
            kb_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_909_p4 <= G2out_q1(15 downto 8);
    lshr_ln_fu_864_p4 <= G2out_q0(15 downto 8);

    mup_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, grp_frodo_key_encode_fu_759_mu_address0, zext_ln79_fu_795_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mup_address0 <= zext_ln79_fu_795_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            mup_address0 <= grp_frodo_key_encode_fu_759_mu_address0;
        else 
            mup_address0 <= "XXX";
        end if; 
    end process;


    mup_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, grp_frodo_key_encode_fu_759_mu_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mup_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            mup_ce0 <= grp_frodo_key_encode_fu_759_mu_ce0;
        else 
            mup_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mup_ce1_assign_proc : process(grp_frodo_key_decode_fu_716_out_r_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mup_ce1 <= grp_frodo_key_decode_fu_716_out_r_ce1;
        else 
            mup_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mup_we1_assign_proc : process(grp_frodo_key_decode_fu_716_out_r_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mup_we1 <= grp_frodo_key_decode_fu_716_out_r_we1;
        else 
            mup_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    or_ln123_fu_969_p2 <= (i_5_0_reg_612 or ap_const_lv13_1);
    or_ln141_fu_1059_p2 <= (r1_0_reg_623 or r0_0_0_reg_600);
    or_ln157_fu_1110_p2 <= (i_8_0_reg_657 or ap_const_lv13_1);
    or_ln1_fu_846_p3 <= (ap_const_lv10_26D & i_2_reg_566);
    or_ln2_fu_919_p3 <= (trunc_ln93_fu_905_p1 & lshr_ln1_fu_909_p4);
    or_ln_fu_874_p3 <= (ap_const_lv8_96 & lshr_ln_fu_864_p4);
    p_1_fu_804_p4 <= mup_q0(15 downto 8);

    r_address0_assign_proc : process(grp_shake128_10304_fu_696_output_r_address0, grp_frodo_sample_fu_708_entrada_address0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            r_address0 <= grp_frodo_sample_fu_708_entrada_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            r_address0 <= grp_shake128_10304_fu_696_output_r_address0;
        else 
            r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(grp_shake128_10304_fu_696_output_r_address1, grp_frodo_sample_fu_708_entrada_address1, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            r_address1 <= grp_frodo_sample_fu_708_entrada_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            r_address1 <= grp_shake128_10304_fu_696_output_r_address1;
        else 
            r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(grp_shake128_10304_fu_696_output_r_ce0, grp_frodo_sample_fu_708_entrada_ce0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            r_ce0 <= grp_frodo_sample_fu_708_entrada_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            r_ce0 <= grp_shake128_10304_fu_696_output_r_ce0;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(grp_shake128_10304_fu_696_output_r_ce1, grp_frodo_sample_fu_708_entrada_ce1, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            r_ce1 <= grp_frodo_sample_fu_708_entrada_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            r_ce1 <= grp_shake128_10304_fu_696_output_r_ce1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_we0_assign_proc : process(grp_shake128_10304_fu_696_output_r_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            r_we0 <= grp_shake128_10304_fu_696_output_r_we0;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(grp_shake128_10304_fu_696_output_r_we1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            r_we1 <= grp_shake128_10304_fu_696_output_r_we1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_address0_assign_proc : process(zext_ln93_1_reg_1221, grp_shake128_10304_fu_696_input_r_address0, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            seed_SE_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seed_SE_address0 <= zext_ln93_1_reg_1221(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seed_SE_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            seed_SE_address0 <= grp_shake128_10304_fu_696_input_r_address0;
        else 
            seed_SE_address0 <= "XXXX";
        end if; 
    end process;


    seed_SE_ce0_assign_proc : process(grp_shake128_10304_fu_696_input_r_ce0, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            seed_SE_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            seed_SE_ce0 <= grp_shake128_10304_fu_696_input_r_ce0;
        else 
            seed_SE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_ce1_assign_proc : process(grp_shake128_10304_fu_696_input_r_ce1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            seed_SE_ce1 <= grp_shake128_10304_fu_696_input_r_ce1;
        else 
            seed_SE_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, or_ln_fu_874_p3, or_ln2_fu_919_p3, shl_ln95_fu_928_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            seed_SE_d0 <= shl_ln95_fu_928_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seed_SE_d0 <= or_ln2_fu_919_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seed_SE_d0 <= or_ln_fu_874_p3;
        else 
            seed_SE_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_SE_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            seed_SE_we0 <= ap_const_logic_1;
        else 
            seed_SE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln126_1_fu_1015_p3 <= 
        select_ln126_fu_997_p3 when (icmp_ln126_1_fu_1009_p2(0) = '1') else 
        ap_const_lv8_1;
    select_ln126_fu_997_p3 <= 
        r0_0_0_reg_600 when (icmp_ln126_fu_991_p2(0) = '1') else 
        ap_const_lv8_1;
    select_ln133_fu_1051_p3 <= 
        r1_0_reg_623 when (icmp_ln133_fu_1045_p2(0) = '1') else 
        ap_const_lv8_1;
    shl_ln95_fu_928_p2 <= std_logic_vector(shift_left(unsigned(G2out_q0),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));

    sk_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state41, zext_ln142_fu_1083_p1, ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_seedA_address0, grp_frodo_unpack_2_fu_730_b_address0, grp_matrix_mult_bs_fu_737_S_address0, ap_CS_fsm_state30, ap_CS_fsm_state8, zext_ln84_1_fu_854_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sk_address0 <= zext_ln142_fu_1083_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_address0 <= zext_ln84_1_fu_854_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_address0 <= grp_matrix_mult_bs_fu_737_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sk_address0 <= grp_frodo_unpack_2_fu_730_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sk_address0 <= grp_matrix_mult_AS_fu_686_seedA_address0;
        else 
            sk_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= grp_matrix_mult_bs_fu_737_S_address1;

    sk_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state41, ap_CS_fsm_state26, grp_matrix_mult_AS_fu_686_seedA_ce0, grp_frodo_unpack_2_fu_730_b_ce0, grp_matrix_mult_bs_fu_737_S_ce0, ap_CS_fsm_state30, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            sk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_ce0 <= grp_matrix_mult_bs_fu_737_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sk_ce0 <= grp_frodo_unpack_2_fu_730_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            sk_ce0 <= grp_matrix_mult_AS_fu_686_seedA_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(grp_matrix_mult_bs_fu_737_S_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sk_ce1 <= grp_matrix_mult_bs_fu_737_S_ce1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ss_address0 <= grp_shake128_8_fu_679_output_r_address0;
    ss_address1 <= grp_shake128_8_fu_679_output_r_address1;
    ss_ce0 <= grp_shake128_8_fu_679_output_r_ce0;
    ss_ce1 <= grp_shake128_8_fu_679_output_r_ce1;
    ss_d0 <= grp_shake128_8_fu_679_output_r_d0;
    ss_d1 <= grp_shake128_8_fu_679_output_r_d1;
    ss_we0 <= grp_shake128_8_fu_679_output_r_we0;
    ss_we1 <= grp_shake128_8_fu_679_output_r_we1;
    tmp_4_fu_814_p3 <= (empty_108_fu_800_p1 & p_1_fu_804_p4);
    trunc_ln93_fu_905_p1 <= G2out_q0(8 - 1 downto 0);
    xor_ln142_fu_1088_p2 <= (i_7_reg_646 xor ap_const_lv4_8);
    xor_ln79_fu_823_p2 <= (i_1_reg_554 xor ap_const_lv4_8);
    zext_ln109_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_589),64));
    zext_ln126_1_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln123_fu_969_p2),64));
    zext_ln126_2_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Bpp_q0),16));
    zext_ln126_3_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Bpp_q1),16));
    zext_ln126_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_0_reg_612),64));
    zext_ln133_1_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Cp_q0),16));
    zext_ln133_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_635),64));
    zext_ln142_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln142_fu_1088_p2),64));
    zext_ln142_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_646),64));
    zext_ln160_1_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln157_fu_1110_p2),64));
    zext_ln160_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_0_reg_657),64));
    zext_ln162_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_668),13));
    zext_ln164_1_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln164_fu_1148_p2),64));
    zext_ln164_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_668),64));
    zext_ln62_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_543),64));
    zext_ln79_1_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln79_fu_823_p2),64));
    zext_ln79_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_554),64));
    zext_ln84_1_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_846_p3),64));
    zext_ln84_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_566),64));
    zext_ln93_1_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_21_fu_889_p2),64));
    zext_ln93_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_578),64));
end behav;
