-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_unpack_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_we1 : OUT STD_LOGIC;
    C_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_unpack_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv15_10 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_F : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal val_0_reg_142 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_0_reg_155 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_182_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_355 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_188_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_360 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln7_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_cast_fu_196_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_cast_reg_365 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln8_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_206_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln11_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l_fu_218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal bIdx_0_load_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_263_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal i_0_reg_120 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln15_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bIdx_0_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_1_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_bIdx_0_load : STD_LOGIC_VECTOR (31 downto 0);
    signal BBit_0_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln15_fu_227_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln15_fu_231_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln15_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln15_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln15_3_fu_259_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln15_2_fu_255_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln16_fu_271_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal BBit_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_2_fu_281_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln16_fu_300_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal bIdx_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_329_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    BBit_0_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_reg_379 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                BBit_0_fu_86(30 downto 0) <= zext_ln16_fu_308_p1(30 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                BBit_0_fu_86(0) <= '1';
                BBit_0_fu_86(1) <= '1';
                BBit_0_fu_86(2) <= '1';
                BBit_0_fu_86(3) <= '1';
                BBit_0_fu_86(4) <= '0';
                BBit_0_fu_86(5) <= '0';
                BBit_0_fu_86(6) <= '0';
                BBit_0_fu_86(7) <= '0';
                BBit_0_fu_86(8) <= '0';
                BBit_0_fu_86(9) <= '0';
                BBit_0_fu_86(10) <= '0';
                BBit_0_fu_86(11) <= '0';
                BBit_0_fu_86(12) <= '0';
                BBit_0_fu_86(13) <= '0';
                BBit_0_fu_86(14) <= '0';
                BBit_0_fu_86(15) <= '0';
                BBit_0_fu_86(16) <= '0';
                BBit_0_fu_86(17) <= '0';
                BBit_0_fu_86(18) <= '0';
                BBit_0_fu_86(19) <= '0';
                BBit_0_fu_86(20) <= '0';
                BBit_0_fu_86(21) <= '0';
                BBit_0_fu_86(22) <= '0';
                BBit_0_fu_86(23) <= '0';
                BBit_0_fu_86(24) <= '0';
                BBit_0_fu_86(25) <= '0';
                BBit_0_fu_86(26) <= '0';
                BBit_0_fu_86(27) <= '0';
                BBit_0_fu_86(28) <= '0';
                BBit_0_fu_86(29) <= '0';
                BBit_0_fu_86(30) <= '0';
            end if; 
        end if;
    end process;

    bIdx_0_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_reg_379 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                bIdx_0_fu_82 <= select_ln16_1_fu_312_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bIdx_0_fu_82 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_120 <= i_reg_355;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_120 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_131 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_131 <= j_reg_374;
            end if; 
        end if;
    end process;

    l_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_fu_212_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                l_0_reg_155 <= l_fu_218_p2;
            elsif (((icmp_ln8_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                l_0_reg_155 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    val_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_reg_379 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                val_0_reg_142 <= val_fu_263_p3;
            elsif (((icmp_ln8_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                val_0_reg_142 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln11_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bIdx_0_load_reg_388 <= ap_sig_allocacmp_bIdx_0_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_355 <= i_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln11_reg_379 <= icmp_ln11_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    j_0_cast_reg_365(3 downto 0) <= j_0_cast_fu_196_p1(3 downto 0);
                j_reg_374 <= j_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_360(12 downto 3) <= shl_ln_fu_188_p3(12 downto 3);
            end if;
        end if;
    end process;
    shl_ln_reg_360(2 downto 0) <= "000";
    j_0_cast_reg_365(12 downto 4) <= "000000000";
    BBit_0_fu_86(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_176_p2, ap_CS_fsm_state3, icmp_ln8_fu_200_p2, icmp_ln11_fu_212_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln8_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln11_fu_212_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln11_fu_212_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    BBit_fu_275_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(BBit_0_fu_86));
    C_address1 <= zext_ln21_fu_333_p1(13 - 1 downto 0);

    C_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_d1 <= val_0_reg_142;

    C_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_we1 <= ap_const_logic_1;
        else 
            C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv15_10) + unsigned(trunc_ln15_fu_227_p1));
    add_ln16_2_fu_281_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(trunc_ln16_fu_271_p1));
    add_ln21_fu_329_p2 <= std_logic_vector(unsigned(shl_ln_reg_360) + unsigned(j_0_cast_reg_365));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln11_fu_212_p2)
    begin
        if ((icmp_ln11_fu_212_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_176_p2)
    begin
        if ((((icmp_ln7_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_176_p2)
    begin
        if (((icmp_ln7_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bIdx_0_load_assign_proc : process(icmp_ln11_reg_379, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, bIdx_0_fu_82, select_ln16_1_fu_312_p3)
    begin
        if (((icmp_ln11_reg_379 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_bIdx_0_load <= select_ln16_1_fu_312_p3;
        else 
            ap_sig_allocacmp_bIdx_0_load <= bIdx_0_fu_82;
        end if; 
    end process;

    bIdx_fu_295_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(bIdx_0_load_reg_388));
    b_address0 <= sext_ln15_fu_237_p1(14 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_182_p2 <= std_logic_vector(unsigned(i_0_reg_120) + unsigned(ap_const_lv10_1));
    icmp_ln11_fu_212_p2 <= "1" when (l_0_reg_155 = ap_const_lv4_F) else "0";
    icmp_ln7_fu_176_p2 <= "1" when (i_0_reg_120 = ap_const_lv10_280) else "0";
    icmp_ln8_fu_200_p2 <= "1" when (j_0_reg_131 = ap_const_lv4_8) else "0";
    j_0_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_131),13));
    j_fu_206_p2 <= std_logic_vector(unsigned(j_0_reg_131) + unsigned(ap_const_lv4_1));
    l_fu_218_p2 <= std_logic_vector(unsigned(l_0_reg_155) + unsigned(ap_const_lv4_1));
    lshr_ln15_fu_249_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_245_p1),to_integer(unsigned('0' & BBit_0_fu_86(31-1 downto 0)))));
    select_ln16_1_fu_312_p3 <= 
        bIdx_fu_295_p2 when (tmp_2_fu_287_p3(0) = '1') else 
        bIdx_0_load_reg_388;
    select_ln16_fu_300_p3 <= 
        ap_const_lv31_F when (tmp_2_fu_287_p3(0) = '1') else 
        add_ln16_2_fu_281_p2;
        sext_ln15_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln15_fu_231_p2),64));

    shl_ln_fu_188_p3 <= (i_0_reg_120 & ap_const_lv3_0);
    tmp_2_fu_287_p3 <= BBit_fu_275_p2(31 downto 31);
    trunc_ln15_2_fu_255_p1 <= lshr_ln15_fu_249_p2(1 - 1 downto 0);
    trunc_ln15_3_fu_259_p1 <= val_0_reg_142(15 - 1 downto 0);
    trunc_ln15_fu_227_p1 <= ap_sig_allocacmp_bIdx_0_load(15 - 1 downto 0);
    trunc_ln16_fu_271_p1 <= BBit_0_fu_86(31 - 1 downto 0);
    val_fu_263_p3 <= (trunc_ln15_3_fu_259_p1 & trunc_ln15_2_fu_255_p1);
    zext_ln15_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_q0),32));
    zext_ln16_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_fu_300_p3),32));
    zext_ln21_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_329_p2),64));
end behav;
