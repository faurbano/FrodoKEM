-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult_bs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    V_ce0 : OUT STD_LOGIC;
    V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    V_ce1 : OUT STD_LOGIC;
    V_we1 : OUT STD_LOGIC;
    V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult_bs is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv14_12D0 : STD_LOGIC_VECTOR (13 downto 0) := "01001011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_0_0_reg_173 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_0_0_reg_184 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_473 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln23_fu_236_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_reg_478 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln12_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln8_fu_242_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln8_reg_484 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_fu_250_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln16_reg_489 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln16_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_1_fu_294_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_1_reg_503 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln20_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal mul_ln23_fu_457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_load_1_reg_543 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal empty_74_fu_408_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_74_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_1_reg_553 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_9_fu_428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln23_9_fu_428_p2 : signal is "no";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal V_addr_reg_563 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal i_0_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln23_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln23_7_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_9_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln23_fu_208_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_212_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln23_1_fu_224_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_3_fu_232_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln23_1_fu_220_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln23_1_fu_266_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln23_2_fu_270_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln23_3_fu_282_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_5_fu_290_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln23_4_fu_278_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_0_0_cast_fu_306_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_2_fu_310_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_3_fu_320_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln23_6_fu_325_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_4_fu_329_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln20_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln20_fu_346_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_5_fu_350_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_6_fu_360_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln23_8_fu_365_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_7_fu_369_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_72_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_390_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_463_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln25_fu_433_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_75_fu_442_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_457_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_463_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component frodo_decaps_mul_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_decaps_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    frodo_decaps_mul_bkb_U5 : component frodo_decaps_mul_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln23_fu_457_p0,
        din1 => B_q0,
        dout => mul_ln23_fu_457_p2);

    frodo_decaps_mac_cud_U6 : component frodo_decaps_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_463_p0,
        din1 => B_load_1_reg_543,
        din2 => mul_ln23_reg_538,
        dout => grp_fu_463_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_151 <= i_reg_473;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_151 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_162 <= j_reg_498;
            elsif (((icmp_ln12_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_162 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                k_0_0_reg_173 <= add_ln20_fu_380_p2;
            elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_0_reg_173 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    sum_0_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_509_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                sum_0_0_reg_184 <= add_ln23_9_fu_428_p2;
            elsif (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_0_0_reg_184 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                B_load_1_reg_543 <= B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                V_addr_reg_563 <= zext_ln25_fu_437_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_254_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln23_1_reg_503(12 downto 7) <= add_ln23_1_fu_294_p2(12 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln23_reg_478(12 downto 7) <= add_ln23_fu_236_p2(12 downto 7);
                    shl_ln8_reg_484(5 downto 3) <= shl_ln8_fu_242_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln20_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_74_reg_548 <= empty_74_fu_408_p1;
                mul_ln23_reg_538 <= mul_ln23_fu_457_p2;
                p_1_1_reg_553 <= S_q1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_473 <= i_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_509 <= icmp_ln20_fu_300_p2;
                icmp_ln20_reg_509_pp0_iter1_reg <= icmp_ln20_reg_509;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_498 <= j_fu_260_p2;
                    zext_ln16_reg_489(3 downto 0) <= zext_ln16_fu_250_p1(3 downto 0);
            end if;
        end if;
    end process;
    add_ln23_reg_478(6 downto 0) <= "0000000";
    shl_ln8_reg_484(2 downto 0) <= "000";
    zext_ln16_reg_489(5 downto 4) <= "00";
    add_ln23_1_reg_503(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_196_p2, ap_CS_fsm_state3, icmp_ln16_fu_254_p2, icmp_ln20_fu_300_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln16_fu_254_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln20_fu_300_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln20_fu_300_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    B_address0 <= zext_ln23_fu_315_p1(13 - 1 downto 0);
    B_address1 <= zext_ln23_2_fu_355_p1(13 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= zext_ln23_7_fu_335_p1(14 - 1 downto 0);
    S_address1 <= zext_ln23_9_fu_375_p1(14 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_address0 <= zext_ln25_fu_437_p1(6 - 1 downto 0);
    V_address1 <= V_addr_reg_563;

    V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            V_ce0 <= ap_const_logic_1;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_ce1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_ce1 <= ap_const_logic_1;
        else 
            V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    V_d1 <= std_logic_vector(unsigned(V_q0) - unsigned(zext_ln26_fu_446_p1));

    V_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_we1 <= ap_const_logic_1;
        else 
            V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln20_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(k_0_0_reg_173));
    add_ln23_1_fu_294_p2 <= std_logic_vector(unsigned(zext_ln23_5_fu_290_p1) + unsigned(zext_ln23_4_fu_278_p1));
    add_ln23_2_fu_310_p2 <= std_logic_vector(unsigned(add_ln23_reg_478) + unsigned(k_0_0_cast_fu_306_p1));
    add_ln23_3_fu_320_p2 <= std_logic_vector(unsigned(add_ln23_1_reg_503) + unsigned(k_0_0_cast_fu_306_p1));
    add_ln23_4_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv14_12D0) + unsigned(zext_ln23_6_fu_325_p1));
    add_ln23_5_fu_350_p2 <= std_logic_vector(unsigned(add_ln23_reg_478) + unsigned(zext_ln20_fu_346_p1));
    add_ln23_6_fu_360_p2 <= std_logic_vector(unsigned(add_ln23_1_reg_503) + unsigned(zext_ln20_fu_346_p1));
    add_ln23_7_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv14_12D0) + unsigned(zext_ln23_8_fu_365_p1));
    add_ln23_9_fu_428_p2 <= std_logic_vector(signed(grp_fu_463_p3) + signed(sum_0_0_reg_184));
    add_ln23_fu_236_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_232_p1) + unsigned(zext_ln23_1_fu_220_p1));
    add_ln25_fu_433_p2 <= std_logic_vector(unsigned(zext_ln16_reg_489) + unsigned(shl_ln8_reg_484));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln20_fu_300_p2)
    begin
        if ((icmp_ln20_fu_300_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln12_fu_196_p2)
    begin
        if ((((icmp_ln12_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_196_p2)
    begin
        if (((icmp_ln12_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_72_fu_386_p1 <= S_q0(8 - 1 downto 0);
    empty_74_fu_408_p1 <= S_q1(8 - 1 downto 0);
    empty_75_fu_442_p1 <= sum_0_0_reg_184(15 - 1 downto 0);
    grp_fu_463_p0 <= (empty_74_reg_548 & p_1_1_reg_553);
    i_fu_202_p2 <= std_logic_vector(unsigned(i_0_reg_151) + unsigned(ap_const_lv4_1));
    icmp_ln12_fu_196_p2 <= "1" when (i_0_reg_151 = ap_const_lv4_8) else "0";
    icmp_ln16_fu_254_p2 <= "1" when (j_0_reg_162 = ap_const_lv4_8) else "0";
    icmp_ln20_fu_300_p2 <= "1" when (k_0_0_reg_173 = ap_const_lv10_280) else "0";
    j_fu_260_p2 <= std_logic_vector(unsigned(j_0_reg_162) + unsigned(ap_const_lv4_1));
    k_0_0_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_173),13));
    mul_ln23_fu_457_p0 <= (empty_72_fu_386_p1 & p_1_fu_390_p4);
    or_ln20_fu_340_p2 <= (k_0_0_reg_173 or ap_const_lv10_1);
    p_1_fu_390_p4 <= S_q0(15 downto 8);
    shl_ln23_1_fu_224_p3 <= (trunc_ln23_fu_208_p1 & ap_const_lv7_0);
    shl_ln23_2_fu_270_p3 <= (trunc_ln23_1_fu_266_p1 & ap_const_lv9_0);
    shl_ln23_3_fu_282_p3 <= (trunc_ln23_1_fu_266_p1 & ap_const_lv7_0);
    shl_ln8_fu_242_p3 <= (trunc_ln23_fu_208_p1 & ap_const_lv3_0);
    shl_ln_fu_212_p3 <= (trunc_ln23_fu_208_p1 & ap_const_lv9_0);
    trunc_ln23_1_fu_266_p1 <= j_0_reg_162(3 - 1 downto 0);
    trunc_ln23_fu_208_p1 <= i_0_reg_151(3 - 1 downto 0);
    zext_ln16_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_162),6));
    zext_ln20_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln20_fu_340_p2),13));
    zext_ln23_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_212_p3),13));
    zext_ln23_2_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_5_fu_350_p2),64));
    zext_ln23_3_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_1_fu_224_p3),13));
    zext_ln23_4_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_2_fu_270_p3),13));
    zext_ln23_5_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_3_fu_282_p3),13));
    zext_ln23_6_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_320_p2),14));
    zext_ln23_7_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_fu_329_p2),64));
    zext_ln23_8_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_6_fu_360_p2),14));
    zext_ln23_9_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_7_fu_369_p2),64));
    zext_ln23_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_310_p2),64));
    zext_ln25_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_433_p2),64));
    zext_ln26_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_442_p1),16));
end behav;
