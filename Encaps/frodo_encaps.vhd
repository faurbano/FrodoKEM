-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_encaps is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ct_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_ce0 : OUT STD_LOGIC;
    ct_we0 : OUT STD_LOGIC;
    ct_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ct_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ss_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss_ce0 : OUT STD_LOGIC;
    ss_we0 : OUT STD_LOGIC;
    ss_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ss_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss_ce1 : OUT STD_LOGIC;
    ss_we1 : OUT STD_LOGIC;
    ss_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    mu_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mu_ce0 : OUT STD_LOGIC;
    mu_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_encaps is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_encaps,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-ffg1156-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.764000,HLS_SYN_LAT=3754458,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=8,HLS_SYN_FF=31267,HLS_SYN_LUT=102065,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv13_12FC : STD_LOGIC_VECTOR (12 downto 0) := "1001011111100";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_shake128_16_fu_340_ap_ready : STD_LOGIC;
    signal grp_shake128_16_fu_340_ap_done : STD_LOGIC;
    signal i_fu_420_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_580 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln46_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_467_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_17_reg_593 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln55_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln56_1_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_1_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_18_fu_519_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_18_reg_621 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln96_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln94_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln98_fu_530_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln98_reg_636 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_19_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_19_reg_644 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln98_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal G2in_ce0 : STD_LOGIC;
    signal G2in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2in_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2in_ce1 : STD_LOGIC;
    signal G2in_we1 : STD_LOGIC;
    signal G2in_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2in_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce0 : STD_LOGIC;
    signal G2out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce1 : STD_LOGIC;
    signal G2out_we1 : STD_LOGIC;
    signal G2out_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_ce0 : STD_LOGIC;
    signal seed_SE_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_SE_ce1 : STD_LOGIC;
    signal seed_SE_we1 : STD_LOGIC;
    signal seed_SE_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal S_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal S_ce1 : STD_LOGIC;
    signal S_we1 : STD_LOGIC;
    signal S_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal B_1_ce0 : STD_LOGIC;
    signal B_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_1_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_1_ce1 : STD_LOGIC;
    signal B_1_we1 : STD_LOGIC;
    signal B_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal C_ce1 : STD_LOGIC;
    signal C_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_ce0 : STD_LOGIC;
    signal r_we0 : STD_LOGIC;
    signal r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_ce1 : STD_LOGIC;
    signal r_we1 : STD_LOGIC;
    signal r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_we0 : STD_LOGIC;
    signal B_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_ce1 : STD_LOGIC;
    signal B_we1 : STD_LOGIC;
    signal B_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal V_ce0 : STD_LOGIC;
    signal V_we0 : STD_LOGIC;
    signal V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ct_k_ce0 : STD_LOGIC;
    signal ct_k_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ct_k_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ct_k_ce1 : STD_LOGIC;
    signal ct_k_we1 : STD_LOGIC;
    signal ct_k_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ct_k_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_8_fu_333_ap_start : STD_LOGIC;
    signal grp_shake128_8_fu_333_ap_done : STD_LOGIC;
    signal grp_shake128_8_fu_333_ap_idle : STD_LOGIC;
    signal grp_shake128_8_fu_333_ap_ready : STD_LOGIC;
    signal grp_shake128_8_fu_333_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake128_8_fu_333_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_8_fu_333_output_r_we0 : STD_LOGIC;
    signal grp_shake128_8_fu_333_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_8_fu_333_output_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake128_8_fu_333_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_8_fu_333_output_r_we1 : STD_LOGIC;
    signal grp_shake128_8_fu_333_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_8_fu_333_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_8_fu_333_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_8_fu_333_input_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_8_fu_333_input_r_ce1 : STD_LOGIC;
    signal grp_shake128_16_fu_340_ap_start : STD_LOGIC;
    signal grp_shake128_16_fu_340_ap_idle : STD_LOGIC;
    signal grp_shake128_16_fu_340_output_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_16_fu_340_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_16_fu_340_output_r_we1 : STD_LOGIC;
    signal grp_shake128_16_fu_340_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_16_fu_340_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_16_fu_340_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_16_fu_340_input_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_16_fu_340_input_r_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_ap_start : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_ap_done : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_348_B_ce0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_B_we0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_B_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_AS_fu_348_B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_348_B_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_B_we1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_B_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_AS_fu_348_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_348_S_ce0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_348_seedA_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_348_seedA_ce0 : STD_LOGIC;
    signal grp_shake128_10304_fu_358_ap_start : STD_LOGIC;
    signal grp_shake128_10304_fu_358_ap_done : STD_LOGIC;
    signal grp_shake128_10304_fu_358_ap_idle : STD_LOGIC;
    signal grp_shake128_10304_fu_358_ap_ready : STD_LOGIC;
    signal grp_shake128_10304_fu_358_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_10304_fu_358_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_10304_fu_358_output_r_we0 : STD_LOGIC;
    signal grp_shake128_10304_fu_358_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10304_fu_358_output_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_10304_fu_358_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_10304_fu_358_output_r_we1 : STD_LOGIC;
    signal grp_shake128_10304_fu_358_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10304_fu_358_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10304_fu_358_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_10304_fu_358_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10304_fu_358_input_r_ce1 : STD_LOGIC;
    signal grp_shake128_S_fu_364_ap_start : STD_LOGIC;
    signal grp_shake128_S_fu_364_ap_done : STD_LOGIC;
    signal grp_shake128_S_fu_364_ap_idle : STD_LOGIC;
    signal grp_shake128_S_fu_364_ap_ready : STD_LOGIC;
    signal grp_shake128_S_fu_364_output_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_S_fu_364_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_S_fu_364_output_r_we1 : STD_LOGIC;
    signal grp_shake128_S_fu_364_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_S_fu_364_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_S_fu_364_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_S_fu_364_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_S_fu_364_input_r_ce1 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_ap_start : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_ap_done : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_mult_64_fu_370_V_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_V_we0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_64_fu_370_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_370_S_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_S_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_370_S_ce1 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_A_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_370_A_ce0 : STD_LOGIC;
    signal grp_matrix_mult_64_fu_370_A_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_64_fu_370_A_ce1 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_ap_start : STD_LOGIC;
    signal grp_frodo_sample_fu_377_ap_done : STD_LOGIC;
    signal grp_frodo_sample_fu_377_ap_idle : STD_LOGIC;
    signal grp_frodo_sample_fu_377_ap_ready : STD_LOGIC;
    signal grp_frodo_sample_fu_377_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_sample_fu_377_V_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_V_we0 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_sample_fu_377_S_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_sample_fu_377_S_ce1 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_S_we1 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_S_d1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_frodo_sample_fu_377_E_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_sample_fu_377_E_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_E_we0 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_E_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_sample_fu_377_entrada_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_377_entrada_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_377_entrada_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_377_entrada_ce1 : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_ap_start : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_ap_done : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_ap_idle : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_ap_ready : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_C_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_fu_385_C_ce1 : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_C_we1 : STD_LOGIC;
    signal grp_frodo_unpack_fu_385_C_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_unpack_fu_385_b_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_fu_385_b_ce0 : STD_LOGIC;
    signal grp_frodo_pack_fu_392_ap_start : STD_LOGIC;
    signal grp_frodo_pack_fu_392_ap_done : STD_LOGIC;
    signal grp_frodo_pack_fu_392_ap_idle : STD_LOGIC;
    signal grp_frodo_pack_fu_392_ap_ready : STD_LOGIC;
    signal grp_frodo_pack_fu_392_b_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_fu_392_b_ce0 : STD_LOGIC;
    signal grp_frodo_pack_fu_392_b_we0 : STD_LOGIC;
    signal grp_frodo_pack_fu_392_b_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_fu_392_B_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_fu_392_B_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_fu_392_B_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_fu_392_B_r_ce1 : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_ap_start : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_ap_done : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_ap_idle : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_ap_ready : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_b_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_64_fu_399_b_ce0 : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_b_we0 : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_b_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_64_fu_399_B_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_pack_64_fu_399_B_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_64_fu_399_B_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_pack_64_fu_399_B_r_ce1 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_ap_start : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_ap_done : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_ap_idle : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_ap_ready : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_key_encode_fu_406_C_ce0 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_C_we0 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_C_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_frodo_key_encode_fu_406_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_frodo_key_encode_fu_406_V_ce0 : STD_LOGIC;
    signal grp_frodo_key_encode_fu_406_mu_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_frodo_key_encode_fu_406_mu_ce0 : STD_LOGIC;
    signal i_0_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_300 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_reg_311 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_4_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_shake128_8_fu_333_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_shake128_16_fu_340_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrix_mult_AS_fu_348_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_shake128_10304_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_shake128_S_fu_364_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_matrix_mult_64_fu_370_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_frodo_sample_fu_377_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_frodo_unpack_fu_385_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_frodo_pack_fu_392_ap_start_reg : STD_LOGIC := '0';
    signal grp_frodo_pack_64_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_frodo_key_encode_fu_406_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln47_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_1_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln100_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_1_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal or_ln_fu_452_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1_fu_497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln59_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln47_fu_431_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln_fu_442_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln56_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_487_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln100_fu_546_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln100_fu_557_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state18_on_subcall_done : BOOLEAN;

    component shake128_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_we0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_we1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        seedA_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        seedA_ce0 : OUT STD_LOGIC;
        seedA_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_10304 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_S IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_sample IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_we1 : OUT STD_LOGIC;
        S_d1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        E_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        E_ce0 : OUT STD_LOGIC;
        E_we0 : OUT STD_LOGIC;
        E_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        entrada_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        entrada_ce0 : OUT STD_LOGIC;
        entrada_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        entrada_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        entrada_ce1 : OUT STD_LOGIC;
        entrada_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_unpack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        C_ce1 : OUT STD_LOGIC;
        C_we1 : OUT STD_LOGIC;
        C_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_pack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_we0 : OUT STD_LOGIC;
        b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_r_ce0 : OUT STD_LOGIC;
        B_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_r_ce1 : OUT STD_LOGIC;
        B_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_pack_64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_we0 : OUT STD_LOGIC;
        b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_r_ce0 : OUT STD_LOGIC;
        B_r_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        B_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        B_r_ce1 : OUT STD_LOGIC;
        B_r_q1 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component frodo_key_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        mu_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        mu_ce0 : OUT STD_LOGIC;
        mu_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_G2in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_seedfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (4 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component frodo_encaps_B_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component frodo_encaps_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_B IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_ct_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    G2in_U : component frodo_encaps_G2in
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_shake128_S_fu_364_input_r_address0,
        ce0 => G2in_ce0,
        q0 => G2in_q0,
        address1 => G2in_address1,
        ce1 => G2in_ce1,
        we1 => G2in_we1,
        d1 => G2in_d1,
        q1 => G2in_q1);

    G2out_U : component frodo_encaps_G2in
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => G2out_address0,
        ce0 => G2out_ce0,
        q0 => G2out_q0,
        address1 => G2out_address1,
        ce1 => G2out_ce1,
        we1 => G2out_we1,
        d1 => grp_shake128_S_fu_364_output_r_d1,
        q1 => G2out_q1);

    seed_SE_U : component frodo_encaps_seedfYi
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_shake128_10304_fu_358_input_r_address0,
        ce0 => seed_SE_ce0,
        q0 => seed_SE_q0,
        address1 => seed_SE_address1,
        ce1 => seed_SE_ce1,
        we1 => seed_SE_we1,
        d1 => seed_SE_d1,
        q1 => seed_SE_q1);

    S_U : component frodo_encaps_S
    generic map (
        DataWidth => 5,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0,
        address1 => S_address1,
        ce1 => S_ce1,
        we1 => S_we1,
        d1 => grp_frodo_sample_fu_377_S_d1,
        q1 => S_q1);

    B_1_U : component frodo_encaps_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_matrix_mult_64_fu_370_A_address0,
        ce0 => B_1_ce0,
        q0 => B_1_q0,
        address1 => B_1_address1,
        ce1 => B_1_ce1,
        we1 => B_1_we1,
        d1 => grp_frodo_unpack_fu_385_C_d1,
        q1 => B_1_q1);

    C_U : component frodo_encaps_C
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => grp_frodo_key_encode_fu_406_C_d0,
        q0 => C_q0,
        address1 => grp_frodo_pack_64_fu_399_B_r_address1,
        ce1 => C_ce1,
        q1 => C_q1);

    r_U : component frodo_encaps_r
    generic map (
        DataWidth => 16,
        AddressRange => 10304,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r_address0,
        ce0 => r_ce0,
        we0 => r_we0,
        d0 => grp_shake128_10304_fu_358_output_r_d0,
        q0 => r_q0,
        address1 => r_address1,
        ce1 => r_ce1,
        we1 => r_we1,
        d1 => grp_shake128_10304_fu_358_output_r_d1,
        q1 => r_q1);

    B_U : component frodo_encaps_B
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        we0 => B_we0,
        d0 => B_d0,
        q0 => B_q0,
        address1 => B_address1,
        ce1 => B_ce1,
        we1 => B_we1,
        d1 => grp_matrix_mult_AS_fu_348_B_d1,
        q1 => B_q1);

    V_U : component frodo_encaps_V
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => V_address0,
        ce0 => V_ce0,
        we0 => V_we0,
        d0 => V_d0,
        q0 => V_q0);

    ct_k_U : component frodo_encaps_ct_k
    generic map (
        DataWidth => 16,
        AddressRange => 4868,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_shake128_8_fu_333_input_r_address0,
        ce0 => ct_k_ce0,
        q0 => ct_k_q0,
        address1 => ct_k_address1,
        ce1 => ct_k_ce1,
        we1 => ct_k_we1,
        d1 => ct_k_d1,
        q1 => ct_k_q1);

    grp_shake128_8_fu_333 : component shake128_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_8_fu_333_ap_start,
        ap_done => grp_shake128_8_fu_333_ap_done,
        ap_idle => grp_shake128_8_fu_333_ap_idle,
        ap_ready => grp_shake128_8_fu_333_ap_ready,
        output_r_address0 => grp_shake128_8_fu_333_output_r_address0,
        output_r_ce0 => grp_shake128_8_fu_333_output_r_ce0,
        output_r_we0 => grp_shake128_8_fu_333_output_r_we0,
        output_r_d0 => grp_shake128_8_fu_333_output_r_d0,
        output_r_address1 => grp_shake128_8_fu_333_output_r_address1,
        output_r_ce1 => grp_shake128_8_fu_333_output_r_ce1,
        output_r_we1 => grp_shake128_8_fu_333_output_r_we1,
        output_r_d1 => grp_shake128_8_fu_333_output_r_d1,
        input_r_address0 => grp_shake128_8_fu_333_input_r_address0,
        input_r_ce0 => grp_shake128_8_fu_333_input_r_ce0,
        input_r_q0 => ct_k_q0,
        input_r_address1 => grp_shake128_8_fu_333_input_r_address1,
        input_r_ce1 => grp_shake128_8_fu_333_input_r_ce1,
        input_r_q1 => ct_k_q1);

    grp_shake128_16_fu_340 : component shake128_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_16_fu_340_ap_start,
        ap_done => grp_shake128_16_fu_340_ap_done,
        ap_idle => grp_shake128_16_fu_340_ap_idle,
        ap_ready => grp_shake128_16_fu_340_ap_ready,
        output_r_address1 => grp_shake128_16_fu_340_output_r_address1,
        output_r_ce1 => grp_shake128_16_fu_340_output_r_ce1,
        output_r_we1 => grp_shake128_16_fu_340_output_r_we1,
        output_r_d1 => grp_shake128_16_fu_340_output_r_d1,
        input_r_address0 => grp_shake128_16_fu_340_input_r_address0,
        input_r_ce0 => grp_shake128_16_fu_340_input_r_ce0,
        input_r_q0 => pk_q0,
        input_r_address1 => grp_shake128_16_fu_340_input_r_address1,
        input_r_ce1 => grp_shake128_16_fu_340_input_r_ce1,
        input_r_q1 => pk_q1);

    grp_matrix_mult_AS_fu_348 : component matrix_mult_AS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_AS_fu_348_ap_start,
        ap_done => grp_matrix_mult_AS_fu_348_ap_done,
        ap_idle => grp_matrix_mult_AS_fu_348_ap_idle,
        ap_ready => grp_matrix_mult_AS_fu_348_ap_ready,
        B_address0 => grp_matrix_mult_AS_fu_348_B_address0,
        B_ce0 => grp_matrix_mult_AS_fu_348_B_ce0,
        B_we0 => grp_matrix_mult_AS_fu_348_B_we0,
        B_d0 => grp_matrix_mult_AS_fu_348_B_d0,
        B_q0 => B_q0,
        B_address1 => grp_matrix_mult_AS_fu_348_B_address1,
        B_ce1 => grp_matrix_mult_AS_fu_348_B_ce1,
        B_we1 => grp_matrix_mult_AS_fu_348_B_we1,
        B_d1 => grp_matrix_mult_AS_fu_348_B_d1,
        B_q1 => B_q1,
        S_address0 => grp_matrix_mult_AS_fu_348_S_address0,
        S_ce0 => grp_matrix_mult_AS_fu_348_S_ce0,
        S_q0 => S_q0,
        seedA_address0 => grp_matrix_mult_AS_fu_348_seedA_address0,
        seedA_ce0 => grp_matrix_mult_AS_fu_348_seedA_ce0,
        seedA_q0 => pk_q0);

    grp_shake128_10304_fu_358 : component shake128_10304
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_10304_fu_358_ap_start,
        ap_done => grp_shake128_10304_fu_358_ap_done,
        ap_idle => grp_shake128_10304_fu_358_ap_idle,
        ap_ready => grp_shake128_10304_fu_358_ap_ready,
        output_r_address0 => grp_shake128_10304_fu_358_output_r_address0,
        output_r_ce0 => grp_shake128_10304_fu_358_output_r_ce0,
        output_r_we0 => grp_shake128_10304_fu_358_output_r_we0,
        output_r_d0 => grp_shake128_10304_fu_358_output_r_d0,
        output_r_address1 => grp_shake128_10304_fu_358_output_r_address1,
        output_r_ce1 => grp_shake128_10304_fu_358_output_r_ce1,
        output_r_we1 => grp_shake128_10304_fu_358_output_r_we1,
        output_r_d1 => grp_shake128_10304_fu_358_output_r_d1,
        input_r_address0 => grp_shake128_10304_fu_358_input_r_address0,
        input_r_ce0 => grp_shake128_10304_fu_358_input_r_ce0,
        input_r_q0 => seed_SE_q0,
        input_r_address1 => grp_shake128_10304_fu_358_input_r_address1,
        input_r_ce1 => grp_shake128_10304_fu_358_input_r_ce1,
        input_r_q1 => seed_SE_q1);

    grp_shake128_S_fu_364 : component shake128_S
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_S_fu_364_ap_start,
        ap_done => grp_shake128_S_fu_364_ap_done,
        ap_idle => grp_shake128_S_fu_364_ap_idle,
        ap_ready => grp_shake128_S_fu_364_ap_ready,
        output_r_address1 => grp_shake128_S_fu_364_output_r_address1,
        output_r_ce1 => grp_shake128_S_fu_364_output_r_ce1,
        output_r_we1 => grp_shake128_S_fu_364_output_r_we1,
        output_r_d1 => grp_shake128_S_fu_364_output_r_d1,
        input_r_address0 => grp_shake128_S_fu_364_input_r_address0,
        input_r_ce0 => grp_shake128_S_fu_364_input_r_ce0,
        input_r_q0 => G2in_q0,
        input_r_address1 => grp_shake128_S_fu_364_input_r_address1,
        input_r_ce1 => grp_shake128_S_fu_364_input_r_ce1,
        input_r_q1 => G2in_q1);

    grp_matrix_mult_64_fu_370 : component matrix_mult_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_64_fu_370_ap_start,
        ap_done => grp_matrix_mult_64_fu_370_ap_done,
        ap_idle => grp_matrix_mult_64_fu_370_ap_idle,
        ap_ready => grp_matrix_mult_64_fu_370_ap_ready,
        V_address0 => grp_matrix_mult_64_fu_370_V_address0,
        V_ce0 => grp_matrix_mult_64_fu_370_V_ce0,
        V_we0 => grp_matrix_mult_64_fu_370_V_we0,
        V_d0 => grp_matrix_mult_64_fu_370_V_d0,
        V_q0 => V_q0,
        S_address0 => grp_matrix_mult_64_fu_370_S_address0,
        S_ce0 => grp_matrix_mult_64_fu_370_S_ce0,
        S_q0 => S_q0,
        S_address1 => grp_matrix_mult_64_fu_370_S_address1,
        S_ce1 => grp_matrix_mult_64_fu_370_S_ce1,
        S_q1 => S_q1,
        A_address0 => grp_matrix_mult_64_fu_370_A_address0,
        A_ce0 => grp_matrix_mult_64_fu_370_A_ce0,
        A_q0 => B_1_q0,
        A_address1 => grp_matrix_mult_64_fu_370_A_address1,
        A_ce1 => grp_matrix_mult_64_fu_370_A_ce1,
        A_q1 => B_1_q1);

    grp_frodo_sample_fu_377 : component frodo_sample
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_sample_fu_377_ap_start,
        ap_done => grp_frodo_sample_fu_377_ap_done,
        ap_idle => grp_frodo_sample_fu_377_ap_idle,
        ap_ready => grp_frodo_sample_fu_377_ap_ready,
        V_address0 => grp_frodo_sample_fu_377_V_address0,
        V_ce0 => grp_frodo_sample_fu_377_V_ce0,
        V_we0 => grp_frodo_sample_fu_377_V_we0,
        V_d0 => grp_frodo_sample_fu_377_V_d0,
        S_address1 => grp_frodo_sample_fu_377_S_address1,
        S_ce1 => grp_frodo_sample_fu_377_S_ce1,
        S_we1 => grp_frodo_sample_fu_377_S_we1,
        S_d1 => grp_frodo_sample_fu_377_S_d1,
        E_address0 => grp_frodo_sample_fu_377_E_address0,
        E_ce0 => grp_frodo_sample_fu_377_E_ce0,
        E_we0 => grp_frodo_sample_fu_377_E_we0,
        E_d0 => grp_frodo_sample_fu_377_E_d0,
        entrada_address0 => grp_frodo_sample_fu_377_entrada_address0,
        entrada_ce0 => grp_frodo_sample_fu_377_entrada_ce0,
        entrada_q0 => r_q0,
        entrada_address1 => grp_frodo_sample_fu_377_entrada_address1,
        entrada_ce1 => grp_frodo_sample_fu_377_entrada_ce1,
        entrada_q1 => r_q1);

    grp_frodo_unpack_fu_385 : component frodo_unpack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_unpack_fu_385_ap_start,
        ap_done => grp_frodo_unpack_fu_385_ap_done,
        ap_idle => grp_frodo_unpack_fu_385_ap_idle,
        ap_ready => grp_frodo_unpack_fu_385_ap_ready,
        C_address1 => grp_frodo_unpack_fu_385_C_address1,
        C_ce1 => grp_frodo_unpack_fu_385_C_ce1,
        C_we1 => grp_frodo_unpack_fu_385_C_we1,
        C_d1 => grp_frodo_unpack_fu_385_C_d1,
        b_address0 => grp_frodo_unpack_fu_385_b_address0,
        b_ce0 => grp_frodo_unpack_fu_385_b_ce0,
        b_q0 => pk_q0);

    grp_frodo_pack_fu_392 : component frodo_pack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_pack_fu_392_ap_start,
        ap_done => grp_frodo_pack_fu_392_ap_done,
        ap_idle => grp_frodo_pack_fu_392_ap_idle,
        ap_ready => grp_frodo_pack_fu_392_ap_ready,
        b_address0 => grp_frodo_pack_fu_392_b_address0,
        b_ce0 => grp_frodo_pack_fu_392_b_ce0,
        b_we0 => grp_frodo_pack_fu_392_b_we0,
        b_d0 => grp_frodo_pack_fu_392_b_d0,
        B_r_address0 => grp_frodo_pack_fu_392_B_r_address0,
        B_r_ce0 => grp_frodo_pack_fu_392_B_r_ce0,
        B_r_q0 => B_q0,
        B_r_address1 => grp_frodo_pack_fu_392_B_r_address1,
        B_r_ce1 => grp_frodo_pack_fu_392_B_r_ce1,
        B_r_q1 => B_q1);

    grp_frodo_pack_64_fu_399 : component frodo_pack_64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_pack_64_fu_399_ap_start,
        ap_done => grp_frodo_pack_64_fu_399_ap_done,
        ap_idle => grp_frodo_pack_64_fu_399_ap_idle,
        ap_ready => grp_frodo_pack_64_fu_399_ap_ready,
        b_address0 => grp_frodo_pack_64_fu_399_b_address0,
        b_ce0 => grp_frodo_pack_64_fu_399_b_ce0,
        b_we0 => grp_frodo_pack_64_fu_399_b_we0,
        b_d0 => grp_frodo_pack_64_fu_399_b_d0,
        B_r_address0 => grp_frodo_pack_64_fu_399_B_r_address0,
        B_r_ce0 => grp_frodo_pack_64_fu_399_B_r_ce0,
        B_r_q0 => C_q0,
        B_r_address1 => grp_frodo_pack_64_fu_399_B_r_address1,
        B_r_ce1 => grp_frodo_pack_64_fu_399_B_r_ce1,
        B_r_q1 => C_q1);

    grp_frodo_key_encode_fu_406 : component frodo_key_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_key_encode_fu_406_ap_start,
        ap_done => grp_frodo_key_encode_fu_406_ap_done,
        ap_idle => grp_frodo_key_encode_fu_406_ap_idle,
        ap_ready => grp_frodo_key_encode_fu_406_ap_ready,
        C_address0 => grp_frodo_key_encode_fu_406_C_address0,
        C_ce0 => grp_frodo_key_encode_fu_406_C_ce0,
        C_we0 => grp_frodo_key_encode_fu_406_C_we0,
        C_d0 => grp_frodo_key_encode_fu_406_C_d0,
        V_address0 => grp_frodo_key_encode_fu_406_V_address0,
        V_ce0 => grp_frodo_key_encode_fu_406_V_ce0,
        V_q0 => V_q0,
        mu_address0 => grp_frodo_key_encode_fu_406_mu_address0,
        mu_ce0 => grp_frodo_key_encode_fu_406_mu_ce0,
        mu_q0 => mu_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_frodo_key_encode_fu_406_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_key_encode_fu_406_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_frodo_key_encode_fu_406_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_key_encode_fu_406_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_key_encode_fu_406_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_pack_64_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_pack_64_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_frodo_pack_64_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_pack_64_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_pack_64_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_pack_fu_392_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_pack_fu_392_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_frodo_pack_fu_392_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_pack_fu_392_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_pack_fu_392_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_sample_fu_377_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_sample_fu_377_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_frodo_sample_fu_377_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_sample_fu_377_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_sample_fu_377_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_unpack_fu_385_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_unpack_fu_385_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_frodo_unpack_fu_385_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_unpack_fu_385_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_unpack_fu_385_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_64_fu_370_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_64_fu_370_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_matrix_mult_64_fu_370_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_64_fu_370_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_64_fu_370_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_AS_fu_348_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_AS_fu_348_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_matrix_mult_AS_fu_348_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_AS_fu_348_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_AS_fu_348_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_10304_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_10304_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_shake128_10304_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_10304_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_10304_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_16_fu_340_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_16_fu_340_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_shake128_16_fu_340_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_16_fu_340_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_16_fu_340_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_8_fu_333_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_8_fu_333_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln98_fu_534_p2 = ap_const_lv1_1))) then 
                    grp_shake128_8_fu_333_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_8_fu_333_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_8_fu_333_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_S_fu_364_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_S_fu_364_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln46_fu_414_p2 = ap_const_lv1_1))) then 
                    grp_shake128_S_fu_364_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_S_fu_364_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_S_fu_364_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_288 <= i_reg_580;
            elsif (((grp_shake128_16_fu_340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_288 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_300 <= i_17_reg_593;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_300 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_frodo_pack_64_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_3_reg_311 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_3_reg_311 <= i_18_reg_621;
            end if; 
        end if;
    end process;

    i_4_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln94_fu_513_p2 = ap_const_lv1_1))) then 
                i_4_reg_322 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_4_reg_322 <= i_19_reg_644;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_17_reg_593 <= i_17_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_18_reg_621 <= i_18_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_19_reg_644 <= i_19_fu_540_p2;
                    zext_ln98_reg_636(3 downto 0) <= zext_ln98_fu_530_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_580 <= i_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln55_fu_461_p2 = ap_const_lv1_0))) then
                    zext_ln56_1_reg_603(2 downto 0) <= zext_ln56_1_fu_478_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln94_fu_513_p2 = ap_const_lv1_0))) then
                    zext_ln96_reg_626(12 downto 0) <= zext_ln96_fu_525_p1(12 downto 0);
            end if;
        end if;
    end process;
    zext_ln56_1_reg_603(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln96_reg_626(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln98_reg_636(12 downto 4) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_shake128_16_fu_340_ap_done, ap_CS_fsm_state3, icmp_ln46_fu_414_p2, ap_CS_fsm_state8, icmp_ln55_fu_461_p2, ap_CS_fsm_state25, icmp_ln94_fu_513_p2, ap_CS_fsm_state27, icmp_ln98_fu_534_p2, grp_shake128_8_fu_333_ap_done, grp_matrix_mult_AS_fu_348_ap_done, grp_shake128_10304_fu_358_ap_done, grp_shake128_S_fu_364_ap_done, grp_matrix_mult_64_fu_370_ap_done, grp_frodo_sample_fu_377_ap_done, grp_frodo_pack_64_fu_399_ap_done, grp_frodo_key_encode_fu_406_ap_done, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state16, ap_CS_fsm_state12, ap_CS_fsm_state5, ap_CS_fsm_state20, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_block_state18_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_shake128_16_fu_340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln46_fu_414_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((grp_shake128_S_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln55_fu_461_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_shake128_10304_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_frodo_sample_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_matrix_mult_AS_fu_348_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_matrix_mult_64_fu_370_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_frodo_key_encode_fu_406_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_frodo_pack_64_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln94_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln98_fu_534_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state29 => 
                if (((grp_shake128_8_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B_1_address1_assign_proc : process(grp_matrix_mult_64_fu_370_A_address1, grp_frodo_unpack_fu_385_C_address1, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_1_address1 <= grp_frodo_unpack_fu_385_C_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            B_1_address1 <= grp_matrix_mult_64_fu_370_A_address1;
        else 
            B_1_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(grp_matrix_mult_64_fu_370_A_ce0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            B_1_ce0 <= grp_matrix_mult_64_fu_370_A_ce0;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_ce1_assign_proc : process(grp_matrix_mult_64_fu_370_A_ce1, grp_frodo_unpack_fu_385_C_ce1, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_1_ce1 <= grp_frodo_unpack_fu_385_C_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            B_1_ce1 <= grp_matrix_mult_64_fu_370_A_ce1;
        else 
            B_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_we1_assign_proc : process(grp_frodo_unpack_fu_385_C_we1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_1_we1 <= grp_frodo_unpack_fu_385_C_we1;
        else 
            B_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(grp_matrix_mult_AS_fu_348_B_address0, grp_frodo_sample_fu_377_E_address0, grp_frodo_pack_fu_392_B_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_address0 <= grp_frodo_pack_fu_392_B_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            B_address0 <= grp_frodo_sample_fu_377_E_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_address0 <= grp_matrix_mult_AS_fu_348_B_address0;
        else 
            B_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(grp_matrix_mult_AS_fu_348_B_address1, grp_frodo_pack_fu_392_B_r_address1, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_address1 <= grp_frodo_pack_fu_392_B_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_address1 <= grp_matrix_mult_AS_fu_348_B_address1;
        else 
            B_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(grp_matrix_mult_AS_fu_348_B_ce0, grp_frodo_sample_fu_377_E_ce0, grp_frodo_pack_fu_392_B_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_ce0 <= grp_frodo_pack_fu_392_B_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            B_ce0 <= grp_frodo_sample_fu_377_E_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_ce0 <= grp_matrix_mult_AS_fu_348_B_ce0;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(grp_matrix_mult_AS_fu_348_B_ce1, grp_frodo_pack_fu_392_B_r_ce1, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            B_ce1 <= grp_frodo_pack_fu_392_B_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_ce1 <= grp_matrix_mult_AS_fu_348_B_ce1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_d0_assign_proc : process(grp_matrix_mult_AS_fu_348_B_d0, grp_frodo_sample_fu_377_E_d0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            B_d0 <= grp_frodo_sample_fu_377_E_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_d0 <= grp_matrix_mult_AS_fu_348_B_d0;
        else 
            B_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_we0_assign_proc : process(grp_matrix_mult_AS_fu_348_B_we0, grp_frodo_sample_fu_377_E_we0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            B_we0 <= grp_frodo_sample_fu_377_E_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_we0 <= grp_matrix_mult_AS_fu_348_B_we0;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_we1_assign_proc : process(grp_matrix_mult_AS_fu_348_B_we1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            B_we1 <= grp_matrix_mult_AS_fu_348_B_we1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(grp_frodo_pack_64_fu_399_B_r_address0, grp_frodo_key_encode_fu_406_C_address0, ap_CS_fsm_state24, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            C_address0 <= grp_frodo_key_encode_fu_406_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            C_address0 <= grp_frodo_pack_64_fu_399_B_r_address0;
        else 
            C_address0 <= "XXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(grp_frodo_pack_64_fu_399_B_r_ce0, grp_frodo_key_encode_fu_406_C_ce0, ap_CS_fsm_state24, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            C_ce0 <= grp_frodo_key_encode_fu_406_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            C_ce0 <= grp_frodo_pack_64_fu_399_B_r_ce0;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(grp_frodo_pack_64_fu_399_B_r_ce1, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            C_ce1 <= grp_frodo_pack_64_fu_399_B_r_ce1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_we0_assign_proc : process(grp_frodo_key_encode_fu_406_C_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            C_we0 <= grp_frodo_key_encode_fu_406_C_we0;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_address1_assign_proc : process(ap_CS_fsm_state2, grp_shake128_16_fu_340_output_r_address1, grp_shake128_S_fu_364_input_r_address1, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln47_1_fu_437_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            G2in_address1 <= zext_ln47_1_fu_437_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G2in_address1 <= grp_shake128_S_fu_364_input_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            G2in_address1 <= grp_shake128_16_fu_340_output_r_address1;
        else 
            G2in_address1 <= "XXXX";
        end if; 
    end process;


    G2in_ce0_assign_proc : process(grp_shake128_S_fu_364_input_r_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G2in_ce0 <= grp_shake128_S_fu_364_input_r_ce0;
        else 
            G2in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_ce1_assign_proc : process(ap_CS_fsm_state2, grp_shake128_16_fu_340_output_r_ce1, grp_shake128_S_fu_364_input_r_ce1, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            G2in_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G2in_ce1 <= grp_shake128_S_fu_364_input_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            G2in_ce1 <= grp_shake128_16_fu_340_output_r_ce1;
        else 
            G2in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_d1_assign_proc : process(mu_q0, ap_CS_fsm_state2, grp_shake128_16_fu_340_output_r_d1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            G2in_d1 <= mu_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            G2in_d1 <= grp_shake128_16_fu_340_output_r_d1;
        else 
            G2in_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    G2in_we1_assign_proc : process(ap_CS_fsm_state2, grp_shake128_16_fu_340_output_r_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            G2in_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            G2in_we1 <= grp_shake128_16_fu_340_output_r_we1;
        else 
            G2in_we1 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_address0_assign_proc : process(ap_CS_fsm_state8, icmp_ln55_fu_461_p2, ap_CS_fsm_state27, zext_ln56_fu_473_p1, zext_ln100_fu_552_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            G2out_address0 <= zext_ln100_fu_552_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln55_fu_461_p2 = ap_const_lv1_1))) then 
            G2out_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln55_fu_461_p2 = ap_const_lv1_0))) then 
            G2out_address0 <= zext_ln56_fu_473_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            G2out_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            G2out_address0 <= "XXXX";
        end if; 
    end process;


    G2out_address1_assign_proc : process(ap_CS_fsm_state8, zext_ln56_1_fu_478_p1, grp_shake128_S_fu_364_output_r_address1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            G2out_address1 <= zext_ln56_1_fu_478_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G2out_address1 <= grp_shake128_S_fu_364_output_r_address1;
        else 
            G2out_address1 <= "XXXX";
        end if; 
    end process;


    G2out_ce0_assign_proc : process(ap_CS_fsm_state8, icmp_ln55_fu_461_p2, ap_CS_fsm_state27, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln55_fu_461_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln55_fu_461_p2 = ap_const_lv1_0)))) then 
            G2out_ce0 <= ap_const_logic_1;
        else 
            G2out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_ce1_assign_proc : process(ap_CS_fsm_state8, grp_shake128_S_fu_364_output_r_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            G2out_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G2out_ce1 <= grp_shake128_S_fu_364_output_r_ce1;
        else 
            G2out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_we1_assign_proc : process(grp_shake128_S_fu_364_output_r_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            G2out_we1 <= grp_shake128_S_fu_364_output_r_we1;
        else 
            G2out_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(grp_matrix_mult_AS_fu_348_S_address0, grp_matrix_mult_64_fu_370_S_address0, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            S_address0 <= grp_matrix_mult_64_fu_370_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            S_address0 <= grp_matrix_mult_AS_fu_348_S_address0;
        else 
            S_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(grp_matrix_mult_64_fu_370_S_address1, grp_frodo_sample_fu_377_S_address1, ap_CS_fsm_state20, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            S_address1 <= grp_frodo_sample_fu_377_S_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            S_address1 <= grp_matrix_mult_64_fu_370_S_address1;
        else 
            S_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(grp_matrix_mult_AS_fu_348_S_ce0, grp_matrix_mult_64_fu_370_S_ce0, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            S_ce0 <= grp_matrix_mult_64_fu_370_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            S_ce0 <= grp_matrix_mult_AS_fu_348_S_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(grp_matrix_mult_64_fu_370_S_ce1, grp_frodo_sample_fu_377_S_ce1, ap_CS_fsm_state20, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            S_ce1 <= grp_frodo_sample_fu_377_S_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            S_ce1 <= grp_matrix_mult_64_fu_370_S_ce1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_we1_assign_proc : process(grp_frodo_sample_fu_377_S_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            S_we1 <= grp_frodo_sample_fu_377_S_we1;
        else 
            S_we1 <= ap_const_logic_0;
        end if; 
    end process;


    V_address0_assign_proc : process(grp_matrix_mult_64_fu_370_V_address0, grp_frodo_sample_fu_377_V_address0, grp_frodo_key_encode_fu_406_V_address0, ap_CS_fsm_state20, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            V_address0 <= grp_frodo_key_encode_fu_406_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            V_address0 <= grp_frodo_sample_fu_377_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            V_address0 <= grp_matrix_mult_64_fu_370_V_address0;
        else 
            V_address0 <= "XXXXXX";
        end if; 
    end process;


    V_ce0_assign_proc : process(grp_matrix_mult_64_fu_370_V_ce0, grp_frodo_sample_fu_377_V_ce0, grp_frodo_key_encode_fu_406_V_ce0, ap_CS_fsm_state20, ap_CS_fsm_state14, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            V_ce0 <= grp_frodo_key_encode_fu_406_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            V_ce0 <= grp_frodo_sample_fu_377_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            V_ce0 <= grp_matrix_mult_64_fu_370_V_ce0;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_d0_assign_proc : process(grp_matrix_mult_64_fu_370_V_d0, grp_frodo_sample_fu_377_V_d0, ap_CS_fsm_state20, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            V_d0 <= grp_frodo_sample_fu_377_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            V_d0 <= grp_matrix_mult_64_fu_370_V_d0;
        else 
            V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    V_we0_assign_proc : process(grp_matrix_mult_64_fu_370_V_we0, grp_frodo_sample_fu_377_V_we0, ap_CS_fsm_state20, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            V_we0 <= grp_frodo_sample_fu_377_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            V_we0 <= grp_matrix_mult_64_fu_370_V_we0;
        else 
            V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_fu_557_p2 <= std_logic_vector(unsigned(zext_ln98_reg_636) + unsigned(ap_const_lv13_12FC));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state18_on_subcall_done_assign_proc : process(grp_frodo_unpack_fu_385_ap_done, grp_frodo_pack_fu_392_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_frodo_pack_fu_392_ap_done = ap_const_logic_0) or (grp_frodo_unpack_fu_385_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_shake128_8_fu_333_ap_done, ap_CS_fsm_state29)
    begin
        if (((grp_shake128_8_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_shake128_8_fu_333_ap_done, ap_CS_fsm_state29)
    begin
        if (((grp_shake128_8_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ct_address0_assign_proc : process(ap_CS_fsm_state25, zext_ln96_fu_525_p1, grp_frodo_pack_fu_392_b_address0, grp_frodo_pack_64_fu_399_b_address0, ap_CS_fsm_state24, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ct_address0 <= zext_ln96_fu_525_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ct_address0 <= grp_frodo_pack_64_fu_399_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ct_address0 <= grp_frodo_pack_fu_392_b_address0;
        else 
            ct_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_ce0_assign_proc : process(ap_CS_fsm_state25, grp_frodo_pack_fu_392_b_ce0, grp_frodo_pack_64_fu_399_b_ce0, ap_CS_fsm_state24, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ct_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ct_ce0 <= grp_frodo_pack_64_fu_399_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ct_ce0 <= grp_frodo_pack_fu_392_b_ce0;
        else 
            ct_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_d0_assign_proc : process(grp_frodo_pack_fu_392_b_d0, grp_frodo_pack_64_fu_399_b_d0, ap_CS_fsm_state24, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ct_d0 <= grp_frodo_pack_64_fu_399_b_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ct_d0 <= grp_frodo_pack_fu_392_b_d0;
        else 
            ct_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ct_k_address1_assign_proc : process(zext_ln96_reg_626, grp_shake128_8_fu_333_input_r_address1, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state29, zext_ln100_1_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ct_k_address1 <= zext_ln100_1_fu_562_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ct_k_address1 <= zext_ln96_reg_626(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ct_k_address1 <= grp_shake128_8_fu_333_input_r_address1;
        else 
            ct_k_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_k_ce0_assign_proc : process(grp_shake128_8_fu_333_input_r_ce0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ct_k_ce0 <= grp_shake128_8_fu_333_input_r_ce0;
        else 
            ct_k_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_k_ce1_assign_proc : process(grp_shake128_8_fu_333_input_r_ce1, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ct_k_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ct_k_ce1 <= grp_shake128_8_fu_333_input_r_ce1;
        else 
            ct_k_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_k_d1_assign_proc : process(ct_q0, G2out_q0, ap_CS_fsm_state26, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ct_k_d1 <= G2out_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ct_k_d1 <= ct_q0;
        else 
            ct_k_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ct_k_we1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ct_k_we1 <= ap_const_logic_1;
        else 
            ct_k_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ct_we0_assign_proc : process(grp_frodo_pack_fu_392_b_we0, grp_frodo_pack_64_fu_399_b_we0, ap_CS_fsm_state24, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ct_we0 <= grp_frodo_pack_64_fu_399_b_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ct_we0 <= grp_frodo_pack_fu_392_b_we0;
        else 
            ct_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_frodo_key_encode_fu_406_ap_start <= grp_frodo_key_encode_fu_406_ap_start_reg;
    grp_frodo_pack_64_fu_399_ap_start <= grp_frodo_pack_64_fu_399_ap_start_reg;
    grp_frodo_pack_fu_392_ap_start <= grp_frodo_pack_fu_392_ap_start_reg;
    grp_frodo_sample_fu_377_ap_start <= grp_frodo_sample_fu_377_ap_start_reg;
    grp_frodo_unpack_fu_385_ap_start <= grp_frodo_unpack_fu_385_ap_start_reg;
    grp_matrix_mult_64_fu_370_ap_start <= grp_matrix_mult_64_fu_370_ap_start_reg;
    grp_matrix_mult_AS_fu_348_ap_start <= grp_matrix_mult_AS_fu_348_ap_start_reg;
    grp_shake128_10304_fu_358_ap_start <= grp_shake128_10304_fu_358_ap_start_reg;
    grp_shake128_16_fu_340_ap_start <= grp_shake128_16_fu_340_ap_start_reg;
    grp_shake128_8_fu_333_ap_start <= grp_shake128_8_fu_333_ap_start_reg;
    grp_shake128_S_fu_364_ap_start <= grp_shake128_S_fu_364_ap_start_reg;
    i_17_fu_467_p2 <= std_logic_vector(unsigned(i_1_reg_300) + unsigned(ap_const_lv3_1));
    i_18_fu_519_p2 <= std_logic_vector(unsigned(i_3_reg_311) + unsigned(ap_const_lv13_1));
    i_19_fu_540_p2 <= std_logic_vector(unsigned(i_4_reg_322) + unsigned(ap_const_lv4_1));
    i_fu_420_p2 <= std_logic_vector(unsigned(i_0_reg_288) + unsigned(ap_const_lv4_1));
    icmp_ln46_fu_414_p2 <= "1" when (i_0_reg_288 = ap_const_lv4_8) else "0";
    icmp_ln55_fu_461_p2 <= "1" when (i_1_reg_300 = ap_const_lv3_7) else "0";
    icmp_ln94_fu_513_p2 <= "1" when (i_3_reg_311 = ap_const_lv13_12FC) else "0";
    icmp_ln98_fu_534_p2 <= "1" when (i_4_reg_322 = ap_const_lv4_8) else "0";
    lshr_ln1_fu_487_p4 <= G2out_q1(15 downto 8);
    lshr_ln_fu_442_p4 <= G2out_q0(15 downto 8);

    mu_address0_assign_proc : process(ap_CS_fsm_state3, grp_frodo_key_encode_fu_406_mu_address0, ap_CS_fsm_state22, zext_ln47_fu_426_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mu_address0 <= zext_ln47_fu_426_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mu_address0 <= grp_frodo_key_encode_fu_406_mu_address0;
        else 
            mu_address0 <= "XXX";
        end if; 
    end process;


    mu_ce0_assign_proc : process(ap_CS_fsm_state3, grp_frodo_key_encode_fu_406_mu_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mu_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mu_ce0 <= grp_frodo_key_encode_fu_406_mu_ce0;
        else 
            mu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1_fu_497_p3 <= (trunc_ln56_fu_483_p1 & lshr_ln1_fu_487_p4);
    or_ln_fu_452_p3 <= (ap_const_lv8_96 & lshr_ln_fu_442_p4);

    pk_address0_assign_proc : process(ap_CS_fsm_state2, grp_shake128_16_fu_340_input_r_address0, grp_matrix_mult_AS_fu_348_seedA_address0, grp_frodo_unpack_fu_385_b_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pk_address0 <= grp_frodo_unpack_fu_385_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pk_address0 <= grp_matrix_mult_AS_fu_348_seedA_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_address0 <= grp_shake128_16_fu_340_input_r_address0;
        else 
            pk_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    pk_address1 <= grp_shake128_16_fu_340_input_r_address1;

    pk_ce0_assign_proc : process(ap_CS_fsm_state2, grp_shake128_16_fu_340_input_r_ce0, grp_matrix_mult_AS_fu_348_seedA_ce0, grp_frodo_unpack_fu_385_b_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pk_ce0 <= grp_frodo_unpack_fu_385_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            pk_ce0 <= grp_matrix_mult_AS_fu_348_seedA_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_ce0 <= grp_shake128_16_fu_340_input_r_ce0;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(ap_CS_fsm_state2, grp_shake128_16_fu_340_input_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_ce1 <= grp_shake128_16_fu_340_input_r_ce1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_address0_assign_proc : process(grp_shake128_10304_fu_358_output_r_address0, grp_frodo_sample_fu_377_entrada_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_address0 <= grp_frodo_sample_fu_377_entrada_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_address0 <= grp_shake128_10304_fu_358_output_r_address0;
        else 
            r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(grp_shake128_10304_fu_358_output_r_address1, grp_frodo_sample_fu_377_entrada_address1, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_address1 <= grp_frodo_sample_fu_377_entrada_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_address1 <= grp_shake128_10304_fu_358_output_r_address1;
        else 
            r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(grp_shake128_10304_fu_358_output_r_ce0, grp_frodo_sample_fu_377_entrada_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_ce0 <= grp_frodo_sample_fu_377_entrada_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_ce0 <= grp_shake128_10304_fu_358_output_r_ce0;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(grp_shake128_10304_fu_358_output_r_ce1, grp_frodo_sample_fu_377_entrada_ce1, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_ce1 <= grp_frodo_sample_fu_377_entrada_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_ce1 <= grp_shake128_10304_fu_358_output_r_ce1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_we0_assign_proc : process(grp_shake128_10304_fu_358_output_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_we0 <= grp_shake128_10304_fu_358_output_r_we0;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(grp_shake128_10304_fu_358_output_r_we1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_we1 <= grp_shake128_10304_fu_358_output_r_we1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_address1_assign_proc : process(zext_ln56_1_reg_603, grp_shake128_10304_fu_358_input_r_address1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            seed_SE_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seed_SE_address1 <= zext_ln56_1_reg_603(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seed_SE_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            seed_SE_address1 <= grp_shake128_10304_fu_358_input_r_address1;
        else 
            seed_SE_address1 <= "XXXX";
        end if; 
    end process;


    seed_SE_ce0_assign_proc : process(grp_shake128_10304_fu_358_input_r_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            seed_SE_ce0 <= grp_shake128_10304_fu_358_input_r_ce0;
        else 
            seed_SE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_ce1_assign_proc : process(grp_shake128_10304_fu_358_input_r_ce1, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seed_SE_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            seed_SE_ce1 <= grp_shake128_10304_fu_358_input_r_ce1;
        else 
            seed_SE_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, or_ln_fu_452_p3, or_ln1_fu_497_p3, shl_ln59_fu_506_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            seed_SE_d1 <= shl_ln59_fu_506_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seed_SE_d1 <= or_ln1_fu_497_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seed_SE_d1 <= or_ln_fu_452_p3;
        else 
            seed_SE_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_SE_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seed_SE_we1 <= ap_const_logic_1;
        else 
            seed_SE_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln59_fu_506_p2 <= std_logic_vector(shift_left(unsigned(G2out_q0),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    ss_address0 <= grp_shake128_8_fu_333_output_r_address0;
    ss_address1 <= grp_shake128_8_fu_333_output_r_address1;
    ss_ce0 <= grp_shake128_8_fu_333_output_r_ce0;
    ss_ce1 <= grp_shake128_8_fu_333_output_r_ce1;
    ss_d0 <= grp_shake128_8_fu_333_output_r_d0;
    ss_d1 <= grp_shake128_8_fu_333_output_r_d1;
    ss_we0 <= grp_shake128_8_fu_333_output_r_we0;
    ss_we1 <= grp_shake128_8_fu_333_output_r_we1;
    trunc_ln56_fu_483_p1 <= G2out_q0(8 - 1 downto 0);
    xor_ln100_fu_546_p2 <= (i_4_reg_322 xor ap_const_lv4_8);
    xor_ln47_fu_431_p2 <= (i_0_reg_288 xor ap_const_lv4_8);
    zext_ln100_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_fu_557_p2),64));
    zext_ln100_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln100_fu_546_p2),64));
    zext_ln47_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln47_fu_431_p2),64));
    zext_ln47_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_288),64));
    zext_ln56_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_17_fu_467_p2),64));
    zext_ln56_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_300),64));
    zext_ln96_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_311),64));
    zext_ln98_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_322),13));
end behav;
