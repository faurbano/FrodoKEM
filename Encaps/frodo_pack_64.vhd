-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_pack_64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_we0 : OUT STD_LOGIC;
    b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_r_ce0 : OUT STD_LOGIC;
    B_r_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    B_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_r_ce1 : OUT STD_LOGIC;
    B_r_q1 : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of frodo_pack_64 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_0_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln6_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_148_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_342 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln12_fu_154_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln12_reg_347 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_170_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln12_reg_352 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln13_fu_182_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln13_reg_357 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln9_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_196_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal index_fu_202_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal index_reg_371 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_0_reg_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln13_2_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln13_6_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_158_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln12_fu_166_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln6_fu_138_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln13_fu_176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln9_fu_186_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln_fu_207_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_fu_219_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln13_fu_237_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_4_fu_243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln13_fu_247_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln13_fu_233_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln13_fu_259_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_fu_253_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_5_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln13_1_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_3_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_8_fu_285_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_9_fu_289_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln13_1_fu_293_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln13_2_fu_299_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln13_fu_269_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_18_fu_305_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln15_fu_318_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln15_fu_321_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln6_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln6_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_104 <= i_reg_342;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_104 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_190_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_127 <= j_fu_196_p2;
            elsif (((icmp_ln6_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_127 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_362 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_0_reg_115 <= k_fu_332_p2;
            elsif (((icmp_ln6_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_115 <= ap_const_lv5_E;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_342 <= i_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_362 <= icmp_ln9_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                index_reg_371 <= index_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_ln12_reg_352 <= sub_ln12_fu_170_p2;
                trunc_ln12_reg_347 <= trunc_ln12_fu_154_p1;
                    zext_ln13_reg_357(5 downto 4) <= zext_ln13_fu_182_p1(5 downto 4);
            end if;
        end if;
    end process;
    zext_ln13_reg_357(3 downto 0) <= "0001";
    zext_ln13_reg_357(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_fu_142_p2, ap_CS_fsm_state2, icmp_ln9_fu_190_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_190_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln9_fu_190_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    B_r_address0 <= zext_ln13_2_fu_214_p1(6 - 1 downto 0);
    B_r_address1 <= zext_ln13_6_fu_224_p1(6 - 1 downto 0);

    B_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_r_ce0 <= ap_const_logic_1;
        else 
            B_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_r_ce1 <= ap_const_logic_1;
        else 
            B_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_1_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(k_0_reg_115));
    add_ln13_fu_219_p2 <= std_logic_vector(unsigned(zext_ln13_reg_357) + unsigned(zext_ln9_fu_186_p1));
    add_ln15_fu_321_p2 <= std_logic_vector(signed(ap_const_lv13_12C0) + signed(sext_ln15_fu_318_p1));
    add_ln_fu_207_p3 <= (trunc_ln12_reg_347 & j_0_reg_127);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln9_fu_190_p2)
    begin
        if ((icmp_ln9_fu_190_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln6_fu_142_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln6_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln6_fu_142_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln6_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= zext_ln15_fu_327_p1(13 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_d0 <= (shl_ln13_fu_269_p2 or p_Result_18_fu_305_p2);

    b_we0_assign_proc : process(icmp_ln9_reg_362, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_362 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_148_p2 <= std_logic_vector(unsigned(i_0_reg_104) + unsigned(ap_const_lv3_1));
    icmp_ln6_fu_142_p2 <= "1" when (i_0_reg_104 = ap_const_lv3_4) else "0";
    icmp_ln9_fu_190_p2 <= "1" when (j_0_reg_127 = ap_const_lv4_F) else "0";
    index_fu_202_p2 <= std_logic_vector(unsigned(sub_ln12_reg_352) + unsigned(zext_ln9_fu_186_p1));
    j_fu_196_p2 <= std_logic_vector(unsigned(j_0_reg_127) + unsigned(ap_const_lv4_1));
    k_fu_332_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(k_0_reg_115));
    lshr_ln13_1_fu_293_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_3_fu_275_p1),to_integer(unsigned('0' & zext_ln13_8_fu_285_p1(16-1 downto 0)))));
    lshr_ln13_2_fu_299_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln13_9_fu_289_p1(16-1 downto 0)))));
    lshr_ln13_fu_247_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln13_4_fu_243_p1(16-1 downto 0)))));
    or_ln13_fu_176_p2 <= (shl_ln_fu_158_p3 or ap_const_lv6_1);
    p_Result_18_fu_305_p2 <= (lshr_ln13_2_fu_299_p2 and lshr_ln13_1_fu_293_p2);
    p_Result_s_fu_253_p2 <= (p_Val2_s_fu_229_p1 and lshr_ln13_fu_247_p2);
    p_Val2_3_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_r_q1),16));
    p_Val2_s_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_r_q0),16));
        sext_ln15_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_reg_371),13));

    shl_ln13_fu_269_p2 <= std_logic_vector(shift_left(unsigned(p_Result_s_fu_253_p2),to_integer(unsigned('0' & zext_ln13_5_fu_265_p1(16-1 downto 0)))));
    shl_ln_fu_158_p3 <= (trunc_ln12_fu_154_p1 & ap_const_lv4_0);
    sub_ln12_fu_170_p2 <= std_logic_vector(unsigned(zext_ln12_fu_166_p1) - unsigned(zext_ln6_fu_138_p1));
    sub_ln13_fu_237_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(k_0_reg_115));
    trunc_ln12_fu_154_p1 <= i_0_reg_104(2 - 1 downto 0);
    trunc_ln13_fu_233_p1 <= k_0_reg_115(4 - 1 downto 0);
    xor_ln13_fu_259_p2 <= (trunc_ln13_fu_233_p1 xor ap_const_lv4_F);
    zext_ln12_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_158_p3),7));
    zext_ln13_2_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_207_p3),64));
    zext_ln13_4_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln13_fu_237_p2),16));
    zext_ln13_5_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln13_fu_259_p2),16));
    zext_ln13_6_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_219_p2),64));
    zext_ln13_8_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_115),16));
    zext_ln13_9_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_fu_279_p2),16));
    zext_ln13_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln13_fu_176_p2),7));
    zext_ln15_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_321_p2),64));
    zext_ln6_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_104),7));
    zext_ln9_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_127),7));
end behav;
