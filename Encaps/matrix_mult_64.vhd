-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult_64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    V_ce0 : OUT STD_LOGIC;
    V_we0 : OUT STD_LOGIC;
    V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult_64 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_0_0_reg_204 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_0_0_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_fu_242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_558 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln26_fu_276_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_reg_563 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln13_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1_fu_282_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_reg_571 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_fu_290_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_reg_576 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln19_1_fu_294_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln19_1_reg_581 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln19_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_304_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_591 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_596_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln26_reg_620 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_fu_482_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_reg_645 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln26_2_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln26_2_reg_650 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_540_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_8_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_12_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_addr_reg_665 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal k_0_reg_181 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_j_0_0_phi_fu_208_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_6_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_fu_248_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_252_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln26_1_fu_264_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_9_fu_272_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_8_fu_260_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_0_cast_fu_316_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_1_fu_320_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_330_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_4_fu_340_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln23_fu_353_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_fu_359_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_5_fu_363_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln26_2_fu_373_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_6_fu_381_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln26_fu_395_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln26_fu_395_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln23_1_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_1_fu_407_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_2_fu_411_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_421_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_9_fu_431_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln23_2_fu_444_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_2_fu_450_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_3_fu_454_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln26_3_fu_464_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_7_fu_472_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln26_2_fu_496_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln26_2_fu_496_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_547_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_11_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln26_11_fu_506_p2 : signal is "no";
    signal add_ln28_fu_516_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_58_fu_525_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln29_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component frodo_encaps_mac_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    frodo_encaps_mac_eOg_U53 : component frodo_encaps_mac_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_232,
        din1 => reg_228,
        din2 => mul_ln26_reg_620,
        dout => grp_fu_540_p3);

    frodo_encaps_mac_eOg_U54 : component frodo_encaps_mac_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_232,
        din1 => reg_228,
        din2 => mul_ln26_2_reg_650,
        dout => grp_fu_547_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln19_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln19_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_192 <= i_reg_591;
            elsif (((icmp_ln13_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_192 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_0_reg_204 <= add_ln23_reg_645;
            elsif (((icmp_ln19_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_0_reg_204 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln19_fu_298_p2 = ap_const_lv1_1))) then 
                k_0_reg_181 <= k_reg_558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_181 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_0_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_596_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sum_0_0_reg_216 <= add_ln26_12_fu_510_p2;
            elsif (((icmp_ln19_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_0_0_reg_216 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                V_addr_reg_665 <= zext_ln28_fu_520_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln23_reg_645 <= add_ln23_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_8_reg_655 <= grp_fu_540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln26_reg_563(12 downto 7) <= add_ln26_fu_276_p2(12 downto 7);
                    shl_ln1_reg_571(5 downto 3) <= shl_ln1_fu_282_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_591 <= i_fu_304_p2;
                    zext_ln19_1_reg_581(3 downto 0) <= zext_ln19_1_fu_294_p1(3 downto 0);
                    zext_ln19_reg_576(3 downto 0) <= zext_ln19_fu_290_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln23_reg_596 <= icmp_ln23_fu_310_p2;
                icmp_ln23_reg_596_pp0_iter1_reg <= icmp_ln23_reg_596;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_558 <= k_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln26_2_reg_650 <= mul_ln26_2_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln26_reg_620 <= mul_ln26_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_228 <= S_q1;
                reg_232 <= A_q1;
            end if;
        end if;
    end process;
    add_ln26_reg_563(6 downto 0) <= "0000000";
    shl_ln1_reg_571(2 downto 0) <= "000";
    zext_ln19_reg_576(5 downto 4) <= "00";
    zext_ln19_1_reg_581(12 downto 4) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, icmp_ln13_fu_236_p2, ap_CS_fsm_state3, icmp_ln19_fu_298_p2, icmp_ln23_fu_310_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_236_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln19_fu_298_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln23_fu_310_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln23_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_1_fu_348_p1, ap_block_pp0_stage1, zext_ln26_6_fu_439_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address0 <= zext_ln26_6_fu_439_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                A_address0 <= zext_ln26_1_fu_348_p1(13 - 1 downto 0);
            else 
                A_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            A_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_5_fu_386_p1, ap_block_pp0_stage1, zext_ln26_7_fu_477_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address1 <= zext_ln26_7_fu_477_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                A_address1 <= zext_ln26_5_fu_386_p1(13 - 1 downto 0);
            else 
                A_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            A_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_fu_325_p1, zext_ln26_2_fu_416_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                S_address0 <= zext_ln26_2_fu_416_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                S_address0 <= zext_ln26_fu_325_p1(13 - 1 downto 0);
            else 
                S_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            S_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    S_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_4_fu_368_p1, ap_block_pp0_stage1, zext_ln26_3_fu_459_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                S_address1 <= zext_ln26_3_fu_459_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                S_address1 <= zext_ln26_4_fu_368_p1(13 - 1 downto 0);
            else 
                S_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            S_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    V_address0_assign_proc : process(V_addr_reg_665, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln28_fu_520_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            V_address0 <= V_addr_reg_665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            V_address0 <= zext_ln28_fu_520_p1(6 - 1 downto 0);
        else 
            V_address0 <= "XXXXXX";
        end if; 
    end process;


    V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            V_ce0 <= ap_const_logic_1;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    V_d0 <= std_logic_vector(unsigned(V_q0) + unsigned(zext_ln29_fu_529_p1));

    V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            V_we0 <= ap_const_logic_1;
        else 
            V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_fu_482_p2 <= std_logic_vector(unsigned(j_0_0_reg_204) + unsigned(ap_const_lv10_4));
    add_ln26_11_fu_506_p2 <= std_logic_vector(signed(grp_fu_547_p3) + signed(add_ln26_8_reg_655));
    add_ln26_12_fu_510_p2 <= std_logic_vector(unsigned(sum_0_0_reg_216) + unsigned(add_ln26_11_fu_506_p2));
    add_ln26_1_fu_320_p2 <= std_logic_vector(unsigned(j_0_0_cast_fu_316_p1) + unsigned(add_ln26_reg_563));
    add_ln26_2_fu_411_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_407_p1) + unsigned(add_ln26_reg_563));
    add_ln26_3_fu_454_p2 <= std_logic_vector(unsigned(zext_ln23_2_fu_450_p1) + unsigned(add_ln26_reg_563));
    add_ln26_4_fu_340_p3 <= (tmp_5_fu_330_p4 & i_0_reg_192);
    add_ln26_5_fu_363_p2 <= std_logic_vector(unsigned(zext_ln23_fu_359_p1) + unsigned(add_ln26_reg_563));
    add_ln26_6_fu_381_p2 <= std_logic_vector(unsigned(shl_ln26_2_fu_373_p3) + unsigned(zext_ln19_1_reg_581));
    add_ln26_7_fu_472_p2 <= std_logic_vector(unsigned(shl_ln26_3_fu_464_p3) + unsigned(zext_ln19_1_reg_581));
    add_ln26_9_fu_431_p3 <= (tmp_6_fu_421_p4 & i_0_reg_192);
    add_ln26_fu_276_p2 <= std_logic_vector(unsigned(zext_ln26_9_fu_272_p1) + unsigned(zext_ln26_8_fu_260_p1));
    add_ln28_fu_516_p2 <= std_logic_vector(unsigned(zext_ln19_reg_576) + unsigned(shl_ln1_reg_571));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln23_fu_310_p2)
    begin
        if ((icmp_ln23_fu_310_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_236_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_236_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_0_phi_fu_208_p4_assign_proc : process(j_0_0_reg_204, icmp_ln23_reg_596, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln23_reg_645, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_596 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_0_phi_fu_208_p4 <= add_ln23_reg_645;
        else 
            ap_phi_mux_j_0_0_phi_fu_208_p4 <= j_0_0_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_236_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_236_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_58_fu_525_p1 <= sum_0_0_reg_216(15 - 1 downto 0);
    i_fu_304_p2 <= std_logic_vector(unsigned(i_0_reg_192) + unsigned(ap_const_lv4_1));
    icmp_ln13_fu_236_p2 <= "1" when (k_0_reg_181 = ap_const_lv4_8) else "0";
    icmp_ln19_fu_298_p2 <= "1" when (i_0_reg_192 = ap_const_lv4_8) else "0";
    icmp_ln23_fu_310_p2 <= "1" when (ap_phi_mux_j_0_0_phi_fu_208_p4 = ap_const_lv10_280) else "0";
    j_0_0_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_0_phi_fu_208_p4),13));
    k_fu_242_p2 <= std_logic_vector(unsigned(k_0_reg_181) + unsigned(ap_const_lv4_1));
    mul_ln26_2_fu_496_p0 <= A_q0;
    mul_ln26_2_fu_496_p1 <= S_q0;
    mul_ln26_2_fu_496_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln26_2_fu_496_p0) * signed(mul_ln26_2_fu_496_p1))), 16));
    mul_ln26_fu_395_p0 <= A_q0;
    mul_ln26_fu_395_p1 <= S_q0;
    mul_ln26_fu_395_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln26_fu_395_p0) * signed(mul_ln26_fu_395_p1))), 16));
    or_ln23_1_fu_401_p2 <= (j_0_0_reg_204 or ap_const_lv10_2);
    or_ln23_2_fu_444_p2 <= (j_0_0_reg_204 or ap_const_lv10_3);
    or_ln23_fu_353_p2 <= (ap_phi_mux_j_0_0_phi_fu_208_p4 or ap_const_lv10_1);
    shl_ln1_fu_282_p3 <= (trunc_ln26_fu_248_p1 & ap_const_lv3_0);
    shl_ln26_1_fu_264_p3 <= (trunc_ln26_fu_248_p1 & ap_const_lv7_0);
    shl_ln26_2_fu_373_p3 <= (or_ln23_fu_353_p2 & ap_const_lv3_0);
    shl_ln26_3_fu_464_p3 <= (or_ln23_2_fu_444_p2 & ap_const_lv3_0);
    shl_ln_fu_252_p3 <= (trunc_ln26_fu_248_p1 & ap_const_lv9_0);
    tmp_5_fu_330_p4 <= ap_phi_mux_j_0_0_phi_fu_208_p4(9 downto 1);
    tmp_6_fu_421_p4 <= or_ln23_1_fu_401_p2(9 downto 1);
    trunc_ln26_fu_248_p1 <= k_0_reg_181(3 - 1 downto 0);
    zext_ln19_1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_192),13));
    zext_ln19_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_192),6));
    zext_ln23_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_1_fu_401_p2),13));
    zext_ln23_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_2_fu_444_p2),13));
    zext_ln23_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_fu_353_p2),13));
    zext_ln26_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_340_p3),64));
    zext_ln26_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_411_p2),64));
    zext_ln26_3_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_454_p2),64));
    zext_ln26_4_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_363_p2),64));
    zext_ln26_5_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_381_p2),64));
    zext_ln26_6_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_431_p3),64));
    zext_ln26_7_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_472_p2),64));
    zext_ln26_8_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_252_p3),13));
    zext_ln26_9_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln26_1_fu_264_p3),13));
    zext_ln26_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_320_p2),64));
    zext_ln28_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_516_p2),64));
    zext_ln29_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_58_fu_525_p1),16));
end behav;
