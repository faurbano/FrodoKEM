-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult_AS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_we1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    seedA_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    seedA_ce0 : OUT STD_LOGIC;
    seedA_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult_AS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_row_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_row_ce0 : STD_LOGIC;
    signal A_row_we0 : STD_LOGIC;
    signal A_row_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_row_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_row_ce1 : STD_LOGIC;
    signal A_row_we1 : STD_LOGIC;
    signal A_row_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_reg_255 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_0_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_0_reg_278 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_301 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln12_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_328_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln16_fu_334_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln16_reg_649 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_13_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_13_reg_657 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_reg_662_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_1_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_1_reg_666 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_427_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln23_reg_676 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_2_fu_435_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_2_reg_683 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_1_fu_475_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln23_1_reg_688 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_addr_reg_704 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_addr_1_reg_714 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln28_fu_539_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_reg_719 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_3_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_addr_2_reg_736 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_addr_3_reg_746 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_addr_3_reg_746_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal A_row_load_3_reg_751 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_load_3_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_2_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_2_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln25_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln25_reg_766 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_9_reg_771 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_shake128_640_fu_289_ap_ready : STD_LOGIC;
    signal grp_shake128_640_fu_289_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal seed_A_origin_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_A_origin_ce0 : STD_LOGIC;
    signal seed_A_origin_we0 : STD_LOGIC;
    signal seed_A_origin_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_origin_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_origin_ce1 : STD_LOGIC;
    signal seed_A_origin_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_640_fu_289_ap_start : STD_LOGIC;
    signal grp_shake128_640_fu_289_ap_idle : STD_LOGIC;
    signal grp_shake128_640_fu_289_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_640_fu_289_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_640_fu_289_output_r_we0 : STD_LOGIC;
    signal grp_shake128_640_fu_289_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_640_fu_289_output_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_640_fu_289_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_640_fu_289_output_r_we1 : STD_LOGIC;
    signal grp_shake128_640_fu_289_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_640_fu_289_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_640_fu_289_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_640_fu_289_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_640_fu_289_input_r_ce1 : STD_LOGIC;
    signal i_0_reg_232 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_244 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_259_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_270_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_k_0_0_phi_fu_282_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_640_fu_289_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln13_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_1_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_2_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_6_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_7_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln16_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_364_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_610_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln13_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln20_fu_360_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_350_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_fu_375_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_379_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln28_1_fu_391_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_9_fu_399_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln28_fu_387_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln28_1_fu_441_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln28_mid1_fu_445_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln28_1_mid1_fu_457_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_11_fu_465_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln28_10_fu_453_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_1_fu_469_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_fu_403_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_fu_483_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_0_0_cast4_fu_493_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_2_fu_502_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln25_fu_513_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln25_fu_519_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_4_fu_528_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln25_1_fu_543_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln25_1_fu_548_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_6_fu_557_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln25_2_fu_567_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln25_2_fu_572_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_8_fu_581_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_610_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_618_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_626_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component shake128_640 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_encaps_mac_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS_A_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS_secud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    A_row_U : component matrix_mult_AS_A_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_row_address0,
        ce0 => A_row_ce0,
        we0 => A_row_we0,
        d0 => grp_shake128_640_fu_289_output_r_d0,
        q0 => A_row_q0,
        address1 => A_row_address1,
        ce1 => A_row_ce1,
        we1 => A_row_we1,
        d1 => grp_shake128_640_fu_289_output_r_d1,
        q1 => A_row_q1);

    seed_A_origin_U : component matrix_mult_AS_secud
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_A_origin_address0,
        ce0 => seed_A_origin_ce0,
        we0 => seed_A_origin_we0,
        d0 => seed_A_origin_d0,
        q0 => seed_A_origin_q0,
        address1 => grp_shake128_640_fu_289_input_r_address1,
        ce1 => seed_A_origin_ce1,
        q1 => seed_A_origin_q1);

    grp_shake128_640_fu_289 : component shake128_640
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_640_fu_289_ap_start,
        ap_done => grp_shake128_640_fu_289_ap_done,
        ap_idle => grp_shake128_640_fu_289_ap_idle,
        ap_ready => grp_shake128_640_fu_289_ap_ready,
        output_r_address0 => grp_shake128_640_fu_289_output_r_address0,
        output_r_ce0 => grp_shake128_640_fu_289_output_r_ce0,
        output_r_we0 => grp_shake128_640_fu_289_output_r_we0,
        output_r_d0 => grp_shake128_640_fu_289_output_r_d0,
        output_r_address1 => grp_shake128_640_fu_289_output_r_address1,
        output_r_ce1 => grp_shake128_640_fu_289_output_r_ce1,
        output_r_we1 => grp_shake128_640_fu_289_output_r_we1,
        output_r_d1 => grp_shake128_640_fu_289_output_r_d1,
        input_r_address0 => grp_shake128_640_fu_289_input_r_address0,
        input_r_ce0 => grp_shake128_640_fu_289_input_r_ce0,
        input_r_q0 => seed_A_origin_q0,
        input_r_address1 => grp_shake128_640_fu_289_input_r_address1,
        input_r_ce1 => grp_shake128_640_fu_289_input_r_ce1,
        input_r_q1 => seed_A_origin_q1);

    frodo_encaps_mac_dEe_U39 : component frodo_encaps_mac_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => S_q0,
        din1 => A_row_q0,
        din2 => B_q0,
        dout => grp_fu_602_p3);

    frodo_encaps_mac_dEe_U40 : component frodo_encaps_mac_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_610_p0,
        din1 => reg_296,
        din2 => reg_301,
        dout => grp_fu_610_p3);

    frodo_encaps_mac_dEe_U41 : component frodo_encaps_mac_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_618_p0,
        din1 => reg_296,
        din2 => reg_301,
        dout => grp_fu_618_p3);

    frodo_encaps_mac_dEe_U42 : component frodo_encaps_mac_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_626_p0,
        din1 => A_row_load_3_reg_751,
        din2 => B_load_3_reg_756,
        dout => grp_fu_626_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_shake128_640_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_shake128_640_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_640_fu_289_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_640_fu_289_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_shake128_640_fu_289_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_640_fu_289_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_640_fu_289_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_232 <= i_fu_328_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_232 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_306_p2 = ap_const_lv1_1))) then 
                i_1_reg_244 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_244 <= i_13_reg_657;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_255 <= add_ln23_1_reg_666;
            elsif (((grp_shake128_640_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvar_flatten_reg_255 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_266 <= select_ln23_2_reg_761;
            elsif (((grp_shake128_640_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_reg_266 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_0_0_reg_278 <= add_ln25_reg_766;
            elsif (((grp_shake128_640_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_0_0_reg_278 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_296 <= A_row_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_296 <= A_row_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_301 <= B_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_301 <= B_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                A_row_load_3_reg_751 <= A_row_q1;
                B_load_3_reg_756 <= B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    B_addr_1_reg_714(12 downto 1) <= zext_ln28_4_fu_534_p1(13 - 1 downto 0)(12 downto 1);
                B_addr_reg_704 <= zext_ln28_2_fu_508_p1(13 - 1 downto 0);
                add_ln23_2_reg_683 <= add_ln23_2_fu_435_p2;
                icmp_ln25_reg_671 <= icmp_ln25_fu_421_p2;
                    select_ln23_1_reg_688(12 downto 7) <= select_ln23_1_fu_475_p3(12 downto 7);
                select_ln23_reg_676 <= select_ln23_fu_427_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                B_addr_2_reg_736 <= zext_ln28_6_fu_562_p1(13 - 1 downto 0);
                    B_addr_3_reg_746(12 downto 2) <= zext_ln28_8_fu_586_p1(13 - 1 downto 0)(12 downto 2);
                sext_ln28_reg_719 <= sext_ln28_fu_539_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    B_addr_3_reg_746_pp0_iter1_reg(12 downto 2) <= B_addr_3_reg_746(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln23_1_reg_666 <= add_ln23_1_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln25_reg_766 <= add_ln25_fu_597_p2;
                select_ln23_2_reg_761 <= select_ln23_2_fu_591_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln28_3_reg_726 <= grp_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln28_9_reg_771 <= grp_fu_626_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_13_reg_657 <= i_13_fu_344_p2;
                    zext_ln16_reg_649(9 downto 0) <= zext_ln16_fu_334_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_662 <= icmp_ln23_fu_409_p2;
                icmp_ln23_reg_662_pp0_iter1_reg <= icmp_ln23_reg_662;
            end if;
        end if;
    end process;
    zext_ln16_reg_649(12 downto 10) <= "000";
    select_ln23_1_reg_688(6 downto 0) <= "0000000";
    B_addr_1_reg_714(0) <= '1';
    B_addr_3_reg_746(1 downto 0) <= "11";
    B_addr_3_reg_746_pp0_iter1_reg(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, icmp_ln12_fu_306_p2, ap_CS_fsm_state4, icmp_ln23_fu_409_p2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6, grp_shake128_640_fu_289_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, icmp_ln16_fu_338_p2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln12_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_shake128_640_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_409_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_409_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    A_row_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state6, grp_shake128_640_fu_289_output_r_address0, ap_block_pp0_stage0, zext_ln28_1_fu_497_p1, zext_ln28_5_fu_552_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_row_address0 <= zext_ln28_5_fu_552_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_row_address0 <= zext_ln28_1_fu_497_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_address0 <= grp_shake128_640_fu_289_output_r_address0;
        else 
            A_row_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_row_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state6, grp_shake128_640_fu_289_output_r_address1, ap_block_pp0_stage0, zext_ln28_3_fu_523_p1, ap_block_pp0_stage1, zext_ln28_7_fu_576_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_row_address1 <= zext_ln28_7_fu_576_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_row_address1 <= zext_ln28_3_fu_523_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_address1 <= grp_shake128_640_fu_289_output_r_address1;
        else 
            A_row_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_row_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, grp_shake128_640_fu_289_output_r_ce0)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_row_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_ce0 <= grp_shake128_640_fu_289_output_r_ce0;
        else 
            A_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_row_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, grp_shake128_640_fu_289_output_r_ce1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_row_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_ce1 <= grp_shake128_640_fu_289_output_r_ce1;
        else 
            A_row_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_row_we0_assign_proc : process(ap_CS_fsm_state6, grp_shake128_640_fu_289_output_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_we0 <= grp_shake128_640_fu_289_output_r_we0;
        else 
            A_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_row_we1_assign_proc : process(ap_CS_fsm_state6, grp_shake128_640_fu_289_output_r_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_we1 <= grp_shake128_640_fu_289_output_r_we1;
        else 
            A_row_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, B_addr_reg_704, B_addr_2_reg_736, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln28_2_fu_508_p1, ap_block_pp0_stage1, zext_ln28_6_fu_562_p1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_address0 <= B_addr_2_reg_736;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_address0 <= B_addr_reg_704;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address0 <= zext_ln28_6_fu_562_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address0 <= zext_ln28_2_fu_508_p1(13 - 1 downto 0);
            else 
                B_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            B_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, B_addr_1_reg_714, B_addr_3_reg_746_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln28_4_fu_534_p1, ap_block_pp0_stage1, zext_ln28_8_fu_586_p1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            B_address1 <= B_addr_3_reg_746_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            B_address1 <= B_addr_1_reg_714;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            B_address1 <= zext_ln28_8_fu_586_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_address1 <= zext_ln28_4_fu_534_p1(13 - 1 downto 0);
        else 
            B_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, add_ln28_3_reg_726, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2, grp_fu_618_p3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                B_d0 <= grp_fu_618_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                B_d0 <= add_ln28_3_reg_726;
            else 
                B_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            B_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_d1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add_ln28_9_reg_771, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, grp_fu_610_p3, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            B_d1 <= add_ln28_9_reg_771;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            B_d1 <= grp_fu_610_p3;
        else 
            B_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln23_reg_662, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln23_reg_662, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln23_reg_662_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_662_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            B_we1 <= ap_const_logic_1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= zext_ln23_fu_488_p1(13 - 1 downto 0);

    S_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_fu_312_p2 <= std_logic_vector(unsigned(i_0_reg_232) + unsigned(ap_const_lv4_F));
    add_ln23_1_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_259_p4));
    add_ln23_2_fu_435_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_j_0_phi_fu_270_p4));
    add_ln23_fu_483_p2 <= std_logic_vector(unsigned(select_ln23_1_fu_475_p3) + unsigned(zext_ln16_reg_649));
    add_ln25_fu_597_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(select_ln23_reg_676));
    add_ln28_1_fu_469_p2 <= std_logic_vector(unsigned(zext_ln28_11_fu_465_p1) + unsigned(zext_ln28_10_fu_453_p1));
    add_ln28_2_fu_502_p2 <= std_logic_vector(unsigned(select_ln23_1_fu_475_p3) + unsigned(k_0_0_cast4_fu_493_p1));
    add_ln28_4_fu_528_p2 <= std_logic_vector(unsigned(select_ln23_1_fu_475_p3) + unsigned(zext_ln25_fu_519_p1));
    add_ln28_6_fu_557_p2 <= std_logic_vector(unsigned(select_ln23_1_reg_688) + unsigned(zext_ln25_1_fu_548_p1));
    add_ln28_8_fu_581_p2 <= std_logic_vector(unsigned(select_ln23_1_reg_688) + unsigned(zext_ln25_2_fu_572_p1));
    add_ln28_fu_403_p2 <= std_logic_vector(unsigned(zext_ln28_9_fu_399_p1) + unsigned(zext_ln28_fu_387_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln23_fu_409_p2)
    begin
        if ((icmp_ln23_fu_409_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln16_fu_338_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_338_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_259_p4_assign_proc : process(indvar_flatten_reg_255, icmp_ln23_reg_662, ap_CS_fsm_pp0_stage0, add_ln23_1_reg_666, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_259_p4 <= add_ln23_1_reg_666;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_259_p4 <= indvar_flatten_reg_255;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_270_p4_assign_proc : process(j_0_reg_266, icmp_ln23_reg_662, ap_CS_fsm_pp0_stage0, select_ln23_2_reg_761, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_270_p4 <= select_ln23_2_reg_761;
        else 
            ap_phi_mux_j_0_phi_fu_270_p4 <= j_0_reg_266;
        end if; 
    end process;


    ap_phi_mux_k_0_0_phi_fu_282_p4_assign_proc : process(k_0_0_reg_278, icmp_ln23_reg_662, ap_CS_fsm_pp0_stage0, add_ln25_reg_766, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_662 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_k_0_0_phi_fu_282_p4 <= add_ln25_reg_766;
        else 
            ap_phi_mux_k_0_0_phi_fu_282_p4 <= k_0_0_reg_278;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln16_fu_338_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_338_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_610_p0 <= sext_ln28_reg_719(5 - 1 downto 0);
    grp_fu_618_p0 <= sext_ln28_reg_719(5 - 1 downto 0);
    grp_fu_626_p0 <= sext_ln28_reg_719(5 - 1 downto 0);
    grp_shake128_640_fu_289_ap_start <= grp_shake128_640_fu_289_ap_start_reg;
    i_13_fu_344_p2 <= std_logic_vector(unsigned(i_1_reg_244) + unsigned(ap_const_lv10_1));
    i_fu_328_p2 <= std_logic_vector(unsigned(i_0_reg_232) + unsigned(ap_const_lv4_1));
    icmp_ln12_fu_306_p2 <= "1" when (i_0_reg_232 = ap_const_lv4_9) else "0";
    icmp_ln16_fu_338_p2 <= "1" when (i_1_reg_244 = ap_const_lv10_280) else "0";
    icmp_ln23_fu_409_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_259_p4 = ap_const_lv11_500) else "0";
    icmp_ln25_fu_421_p2 <= "1" when (ap_phi_mux_k_0_0_phi_fu_282_p4 = ap_const_lv10_280) else "0";
    k_0_0_cast4_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_427_p3),13));
    or_ln25_1_fu_543_p2 <= (select_ln23_reg_676 or ap_const_lv10_2);
    or_ln25_2_fu_567_p2 <= (select_ln23_reg_676 or ap_const_lv10_3);
    or_ln25_fu_513_p2 <= (select_ln23_fu_427_p3 or ap_const_lv10_1);
    or_ln_fu_364_p4 <= ((trunc_ln20_fu_360_p1 & ap_const_lv6_0) & trunc_ln_fu_350_p4);
    seedA_address0 <= zext_ln13_fu_318_p1(13 - 1 downto 0);

    seedA_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedA_ce0 <= ap_const_logic_1;
        else 
            seedA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_origin_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_shake128_640_fu_289_input_r_address0, zext_ln13_1_fu_323_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_A_origin_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_A_origin_address0 <= zext_ln13_1_fu_323_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_A_origin_address0 <= grp_shake128_640_fu_289_input_r_address0;
        else 
            seed_A_origin_address0 <= "XXXX";
        end if; 
    end process;


    seed_A_origin_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_shake128_640_fu_289_input_r_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            seed_A_origin_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_A_origin_ce0 <= grp_shake128_640_fu_289_input_r_ce0;
        else 
            seed_A_origin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_origin_ce1_assign_proc : process(ap_CS_fsm_state6, grp_shake128_640_fu_289_input_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_A_origin_ce1 <= grp_shake128_640_fu_289_input_r_ce1;
        else 
            seed_A_origin_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_origin_d0_assign_proc : process(seedA_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, or_ln_fu_364_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_A_origin_d0 <= or_ln_fu_364_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_A_origin_d0 <= seedA_q0;
        else 
            seed_A_origin_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_origin_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln16_fu_338_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln16_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            seed_A_origin_we0 <= ap_const_logic_1;
        else 
            seed_A_origin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln23_1_fu_475_p3 <= 
        add_ln28_1_fu_469_p2 when (icmp_ln25_fu_421_p2(0) = '1') else 
        add_ln28_fu_403_p2;
    select_ln23_2_fu_591_p3 <= 
        add_ln23_2_reg_683 when (icmp_ln25_reg_671(0) = '1') else 
        j_0_reg_266;
    select_ln23_fu_427_p3 <= 
        ap_const_lv10_0 when (icmp_ln25_fu_421_p2(0) = '1') else 
        ap_phi_mux_k_0_0_phi_fu_282_p4;
        sext_ln28_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(S_q0),16));

    shl_ln28_1_fu_391_p3 <= (trunc_ln28_fu_375_p1 & ap_const_lv7_0);
    shl_ln28_1_mid1_fu_457_p3 <= (trunc_ln28_1_fu_441_p1 & ap_const_lv7_0);
    shl_ln28_mid1_fu_445_p3 <= (trunc_ln28_1_fu_441_p1 & ap_const_lv9_0);
    shl_ln_fu_379_p3 <= (trunc_ln28_fu_375_p1 & ap_const_lv9_0);
    trunc_ln20_fu_360_p1 <= i_1_reg_244(8 - 1 downto 0);
    trunc_ln28_1_fu_441_p1 <= add_ln23_2_fu_435_p2(3 - 1 downto 0);
    trunc_ln28_fu_375_p1 <= ap_phi_mux_j_0_phi_fu_270_p4(3 - 1 downto 0);
    trunc_ln_fu_350_p4 <= i_1_reg_244(9 downto 8);
    zext_ln13_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_232),64));
    zext_ln13_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_312_p2),64));
    zext_ln16_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_244),13));
    zext_ln23_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_483_p2),64));
    zext_ln25_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_1_fu_543_p2),13));
    zext_ln25_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_2_fu_567_p2),13));
    zext_ln25_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_fu_513_p2),13));
    zext_ln28_10_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_mid1_fu_445_p3),13));
    zext_ln28_11_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_1_mid1_fu_457_p3),13));
    zext_ln28_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_427_p3),64));
    zext_ln28_2_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_502_p2),64));
    zext_ln28_3_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_fu_513_p2),64));
    zext_ln28_4_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_4_fu_528_p2),64));
    zext_ln28_5_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_1_fu_543_p2),64));
    zext_ln28_6_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_6_fu_557_p2),64));
    zext_ln28_7_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_2_fu_567_p2),64));
    zext_ln28_8_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_8_fu_581_p2),64));
    zext_ln28_9_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_1_fu_391_p3),13));
    zext_ln28_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_379_p3),13));
end behav;
