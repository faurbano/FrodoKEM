-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake128_640 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of shake128_640 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_714_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_714_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_859 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_894 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_901 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_915 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_929 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_936 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_950 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_964 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_971 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_978 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_992 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_1005_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_1487 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln395_fu_1011_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln395_reg_1492 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln393_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_1015_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_1499 : STD_LOGIC_VECTOR (2 downto 0);
    signal input_load_11_reg_1520 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_load_12_reg_1526 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_1_5_fu_1144_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_1_6_fu_1151_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_7_fu_1182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_21_reg_1560 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_22_reg_1565 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_23_reg_1570 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_24_reg_1575 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_fu_1214_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_1583 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln5_fu_1225_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln5_reg_1588 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln410_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_1594 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_reg_1599 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln417_fu_1300_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal nblocks_fu_1306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_fu_1358_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1617 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal shl_ln4_fu_1369_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln4_reg_1622 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln423_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_44_reg_1628 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_714_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_17 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_18 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_19 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_20 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_21 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_22 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_23 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_return_24 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_0_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_0_reg_255 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_267 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_24_0_reg_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_23_0_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_22_0_reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_21_0_reg_314 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_20_0_reg_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_19_0_reg_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_18_0_reg_350 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_17_0_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_16_0_reg_374 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_15_0_reg_386 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_14_0_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_13_0_reg_410 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_12_0_reg_422 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_11_0_reg_434 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_10_0_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_9_0_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_8_0_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_7_0_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_6_0_reg_494 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_5_0_reg_506 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_0_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_0_reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_0_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_2_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_2_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal nblocks_0_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0_rec_reg_586 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_i19_0_phi_fu_602_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i19_0_reg_598 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_p_Val2_1_phi_fu_612_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_2_phi_fu_660_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_656 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_p_Val2_s_phi_fu_670_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_714_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln408_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln395_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln396_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln397_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln398_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln412_1_fu_1243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln413_1_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_1_fu_1327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln415_1_fu_1347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln425_1_fu_1387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln426_1_fu_1419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln427_1_fu_1459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln428_1_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln412_fu_1220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln425_fu_1364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln396_fu_1028_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln397_fu_1039_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln398_fu_1049_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_42_fu_1097_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_14_1_fu_1101_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_41_fu_1083_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_13_1_fu_1087_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_40_fu_1071_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_12_1_fu_1074_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1059_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_11_1_fu_1062_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln399_fu_1131_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_fu_1111_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_10_fu_1138_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_43_fu_1158_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_1_fu_1162_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_1172_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln412_fu_1233_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln412_fu_1237_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln413_fu_1259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln413_fu_1265_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln413_fu_1269_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln414_fu_1312_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_fu_1317_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln414_fu_1321_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln415_fu_1332_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln415_fu_1337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln415_fu_1341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln425_fu_1377_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln425_fu_1381_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln426_fu_1403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln426_fu_1409_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln426_fu_1413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln427_fu_1444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln427_fu_1449_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln427_fu_1453_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln428_fu_1464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln428_fu_1469_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln428_fu_1473_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_1615 : BOOLEAN;
    signal ap_condition_1637 : BOOLEAN;

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_5_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_6_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_7_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_8_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_9_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_10_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_11_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_12_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_13_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_14_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_15_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_16_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_17_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_18_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_19_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_20_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_21_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_22_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_23_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_24_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePer_fu_714 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_714_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_714_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_714_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_714_ap_ready,
        state_0_read => s_0_2_reg_563,
        state_1_read => s_1_2_reg_552,
        state_2_read => s_2_0_reg_542,
        state_3_read => s_3_0_reg_530,
        state_4_read => s_4_0_reg_518,
        state_5_read => s_5_0_reg_506,
        state_6_read => s_6_0_reg_494,
        state_7_read => s_7_0_reg_482,
        state_8_read => s_8_0_reg_470,
        state_9_read => s_9_0_reg_458,
        state_10_read => s_10_0_reg_446,
        state_11_read => s_11_0_reg_434,
        state_12_read => s_12_0_reg_422,
        state_13_read => s_13_0_reg_410,
        state_14_read => s_14_0_reg_398,
        state_15_read => s_15_0_reg_386,
        state_16_read => s_16_0_reg_374,
        state_17_read => s_17_0_reg_362,
        state_18_read => s_18_0_reg_350,
        state_19_read => s_19_0_reg_338,
        state_20_read => s_20_0_reg_326,
        state_21_read => s_21_0_reg_314,
        state_22_read => s_22_0_reg_302,
        state_23_read => s_23_0_reg_290,
        state_24_read => s_24_0_reg_278,
        ap_return_0 => grp_KeccakF1600_StatePer_fu_714_ap_return_0,
        ap_return_1 => grp_KeccakF1600_StatePer_fu_714_ap_return_1,
        ap_return_2 => grp_KeccakF1600_StatePer_fu_714_ap_return_2,
        ap_return_3 => grp_KeccakF1600_StatePer_fu_714_ap_return_3,
        ap_return_4 => grp_KeccakF1600_StatePer_fu_714_ap_return_4,
        ap_return_5 => grp_KeccakF1600_StatePer_fu_714_ap_return_5,
        ap_return_6 => grp_KeccakF1600_StatePer_fu_714_ap_return_6,
        ap_return_7 => grp_KeccakF1600_StatePer_fu_714_ap_return_7,
        ap_return_8 => grp_KeccakF1600_StatePer_fu_714_ap_return_8,
        ap_return_9 => grp_KeccakF1600_StatePer_fu_714_ap_return_9,
        ap_return_10 => grp_KeccakF1600_StatePer_fu_714_ap_return_10,
        ap_return_11 => grp_KeccakF1600_StatePer_fu_714_ap_return_11,
        ap_return_12 => grp_KeccakF1600_StatePer_fu_714_ap_return_12,
        ap_return_13 => grp_KeccakF1600_StatePer_fu_714_ap_return_13,
        ap_return_14 => grp_KeccakF1600_StatePer_fu_714_ap_return_14,
        ap_return_15 => grp_KeccakF1600_StatePer_fu_714_ap_return_15,
        ap_return_16 => grp_KeccakF1600_StatePer_fu_714_ap_return_16,
        ap_return_17 => grp_KeccakF1600_StatePer_fu_714_ap_return_17,
        ap_return_18 => grp_KeccakF1600_StatePer_fu_714_ap_return_18,
        ap_return_19 => grp_KeccakF1600_StatePer_fu_714_ap_return_19,
        ap_return_20 => grp_KeccakF1600_StatePer_fu_714_ap_return_20,
        ap_return_21 => grp_KeccakF1600_StatePer_fu_714_ap_return_21,
        ap_return_22 => grp_KeccakF1600_StatePer_fu_714_ap_return_22,
        ap_return_23 => grp_KeccakF1600_StatePer_fu_714_ap_return_23,
        ap_return_24 => grp_KeccakF1600_StatePer_fu_714_ap_return_24);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_714_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_714_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln408_fu_1186_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln408_fu_1186_p2 = ap_const_lv1_0)))) then 
                    grp_KeccakF1600_StatePer_fu_714_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_714_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_714_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i19_0_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i19_0_reg_598 <= i_8_reg_1583;
            elsif (((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i19_0_reg_598 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_1_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_267 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_reg_267 <= i_reg_1487;
            end if; 
        end if;
    end process;

    i_2_reg_656_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_656 <= i_7_reg_1617;
            elsif (((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_2_reg_656 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    nblocks_0_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                nblocks_0_reg_574 <= nblocks_fu_1306_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                nblocks_0_reg_574 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    p_0_rec_reg_586_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                p_0_rec_reg_586 <= add_ln417_fu_1300_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0_rec_reg_586 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    s_0_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_0_0_reg_255 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                s_0_0_reg_255 <= s_1_6_fu_1151_p3;
            end if; 
        end if;
    end process;

    s_0_2_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_0_2_reg_563 <= reg_852;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_0_2_reg_563 <= s_0_0_reg_255;
            end if; 
        end if;
    end process;

    s_10_0_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_10_0_reg_446 <= reg_922;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_10_0_reg_446 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_11_0_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_11_0_reg_434 <= reg_929;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_11_0_reg_434 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_12_0_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_12_0_reg_422 <= reg_936;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_12_0_reg_422 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_13_0_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_13_0_reg_410 <= reg_943;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_13_0_reg_410 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_14_0_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_14_0_reg_398 <= reg_950;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_14_0_reg_398 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_15_0_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_15_0_reg_386 <= reg_957;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_15_0_reg_386 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_16_0_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_16_0_reg_374 <= reg_964;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_16_0_reg_374 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_17_0_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_17_0_reg_362 <= reg_971;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_17_0_reg_362 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_18_0_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_18_0_reg_350 <= reg_978;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_18_0_reg_350 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_19_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_19_0_reg_338 <= reg_985;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_19_0_reg_338 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_1_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_1_0_reg_243 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                s_1_0_reg_243 <= s_1_5_fu_1144_p3;
            end if; 
        end if;
    end process;

    s_1_2_reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_1_2_reg_552 <= reg_859;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_1_2_reg_552 <= s_1_0_reg_243;
            end if; 
        end if;
    end process;

    s_20_0_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_20_0_reg_326 <= reg_992;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_20_0_reg_326 <= ap_const_lv64_8000000000000000;
            end if; 
        end if;
    end process;

    s_21_0_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_21_0_reg_314 <= s_21_reg_1560;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_21_0_reg_314 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_22_0_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_22_0_reg_302 <= s_22_reg_1565;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_22_0_reg_302 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_23_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_23_0_reg_290 <= s_23_reg_1570;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_23_0_reg_290 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_24_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_24_0_reg_278 <= s_24_reg_1575;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_24_0_reg_278 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_2_0_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_2_0_reg_542 <= reg_866;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_2_0_reg_542 <= p_Result_7_fu_1182_p1;
            end if; 
        end if;
    end process;

    s_3_0_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_3_0_reg_530 <= reg_873;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_3_0_reg_530 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_4_0_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_4_0_reg_518 <= reg_880;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_4_0_reg_518 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_5_0_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_5_0_reg_506 <= reg_887;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_5_0_reg_506 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_6_0_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_6_0_reg_494 <= reg_894;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_6_0_reg_494 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_7_0_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_7_0_reg_482 <= reg_901;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_7_0_reg_482 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_8_0_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_8_0_reg_470 <= reg_908;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_8_0_reg_470 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_9_0_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then 
                s_9_0_reg_458 <= reg_915;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_9_0_reg_458 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_7_reg_1617 <= i_7_fu_1358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_8_reg_1583 <= i_8_fu_1214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1487 <= i_fu_1005_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_load_11_reg_1520 <= input_r_q0;
                input_load_12_reg_1526 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_0))) then
                p_Result_4_reg_1594 <= ap_phi_mux_p_Val2_1_phi_fu_612_p42(47 downto 32);
                p_Result_5_reg_1599 <= ap_phi_mux_p_Val2_1_phi_fu_612_p42(63 downto 48);
                    shl_ln5_reg_1588(6 downto 2) <= shl_ln5_fu_1225_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_0))) then
                p_Result_7_44_reg_1628 <= ap_phi_mux_p_Val2_s_phi_fu_670_p42(47 downto 32);
                p_Result_8_reg_1633 <= ap_phi_mux_p_Val2_s_phi_fu_670_p42(63 downto 48);
                    shl_ln4_reg_1622(6 downto 2) <= shl_ln4_fu_1369_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_852 <= grp_KeccakF1600_StatePer_fu_714_ap_return_0;
                reg_859 <= grp_KeccakF1600_StatePer_fu_714_ap_return_1;
                reg_866 <= grp_KeccakF1600_StatePer_fu_714_ap_return_2;
                reg_873 <= grp_KeccakF1600_StatePer_fu_714_ap_return_3;
                reg_880 <= grp_KeccakF1600_StatePer_fu_714_ap_return_4;
                reg_887 <= grp_KeccakF1600_StatePer_fu_714_ap_return_5;
                reg_894 <= grp_KeccakF1600_StatePer_fu_714_ap_return_6;
                reg_901 <= grp_KeccakF1600_StatePer_fu_714_ap_return_7;
                reg_908 <= grp_KeccakF1600_StatePer_fu_714_ap_return_8;
                reg_915 <= grp_KeccakF1600_StatePer_fu_714_ap_return_9;
                reg_922 <= grp_KeccakF1600_StatePer_fu_714_ap_return_10;
                reg_929 <= grp_KeccakF1600_StatePer_fu_714_ap_return_11;
                reg_936 <= grp_KeccakF1600_StatePer_fu_714_ap_return_12;
                reg_943 <= grp_KeccakF1600_StatePer_fu_714_ap_return_13;
                reg_950 <= grp_KeccakF1600_StatePer_fu_714_ap_return_14;
                reg_957 <= grp_KeccakF1600_StatePer_fu_714_ap_return_15;
                reg_964 <= grp_KeccakF1600_StatePer_fu_714_ap_return_16;
                reg_971 <= grp_KeccakF1600_StatePer_fu_714_ap_return_17;
                reg_978 <= grp_KeccakF1600_StatePer_fu_714_ap_return_18;
                reg_985 <= grp_KeccakF1600_StatePer_fu_714_ap_return_19;
                reg_992 <= grp_KeccakF1600_StatePer_fu_714_ap_return_20;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                s_21_reg_1560 <= grp_KeccakF1600_StatePer_fu_714_ap_return_21;
                s_22_reg_1565 <= grp_KeccakF1600_StatePer_fu_714_ap_return_22;
                s_23_reg_1570 <= grp_KeccakF1600_StatePer_fu_714_ap_return_23;
                s_24_reg_1575 <= grp_KeccakF1600_StatePer_fu_714_ap_return_24;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_999_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1499(2) <= shl_ln_fu_1015_p3(2);
                trunc_ln395_reg_1492 <= trunc_ln395_fu_1011_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1499(1 downto 0) <= "00";
    shl_ln5_reg_1588(1 downto 0) <= "00";
    shl_ln4_reg_1622(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_714_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln393_fu_999_p2, ap_CS_fsm_state8, icmp_ln410_fu_1208_p2, ap_CS_fsm_state11, icmp_ln423_fu_1352_p2, ap_CS_fsm_state6, icmp_ln408_fu_1186_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_999_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln408_fu_1186_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((grp_KeccakF1600_StatePer_fu_714_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln412_fu_1237_p2 <= std_logic_vector(unsigned(p_0_rec_reg_586) + unsigned(zext_ln412_fu_1233_p1));
    add_ln413_fu_1269_p2 <= std_logic_vector(unsigned(p_0_rec_reg_586) + unsigned(zext_ln413_fu_1265_p1));
    add_ln414_fu_1321_p2 <= std_logic_vector(unsigned(p_0_rec_reg_586) + unsigned(zext_ln414_fu_1317_p1));
    add_ln415_fu_1341_p2 <= std_logic_vector(unsigned(p_0_rec_reg_586) + unsigned(zext_ln415_fu_1337_p1));
    add_ln417_fu_1300_p2 <= std_logic_vector(unsigned(p_0_rec_reg_586) + unsigned(ap_const_lv10_54));
    add_ln425_fu_1381_p2 <= std_logic_vector(signed(ap_const_lv10_24C) + signed(zext_ln425_fu_1377_p1));
    add_ln426_fu_1413_p2 <= std_logic_vector(signed(ap_const_lv10_24C) + signed(zext_ln426_fu_1409_p1));
    add_ln427_fu_1453_p2 <= std_logic_vector(signed(ap_const_lv10_24C) + signed(zext_ln427_fu_1449_p1));
    add_ln428_fu_1473_p2 <= std_logic_vector(signed(ap_const_lv10_24C) + signed(zext_ln428_fu_1469_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_1615_assign_proc : process(ap_phi_mux_i19_0_phi_fu_602_p4)
    begin
                ap_condition_1615 <= (not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_13)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_12)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_11)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_1)));
    end process;


    ap_condition_1637_assign_proc : process(ap_phi_mux_i_2_phi_fu_660_p4)
    begin
                ap_condition_1637 <= (not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_13)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_12)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_11)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln423_fu_1352_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i19_0_phi_fu_602_p4 <= i19_0_reg_598;
    ap_phi_mux_i_2_phi_fu_660_p4 <= i_2_reg_656;

    ap_phi_mux_p_Val2_1_phi_fu_612_p42_assign_proc : process(reg_852, reg_859, reg_866, reg_873, reg_880, reg_887, reg_894, reg_901, reg_908, reg_915, reg_922, reg_929, reg_936, reg_943, reg_950, reg_957, reg_964, reg_971, reg_978, reg_985, reg_992, ap_CS_fsm_state8, icmp_ln410_fu_1208_p2, ap_phi_mux_i19_0_phi_fu_602_p4, ap_condition_1615)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_0))) then
            if ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_852;
            elsif ((ap_const_boolean_1 = ap_condition_1615)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_992;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_985;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_978;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_971;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_964;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_957;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_950;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_943;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_936;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_929;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_922;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_915;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_908;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_901;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_894;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_887;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_880;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_873;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_866;
            elsif ((ap_phi_mux_i19_0_phi_fu_602_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= reg_859;
            else 
                ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_1_phi_fu_612_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_670_p42_assign_proc : process(reg_852, reg_859, reg_866, reg_873, reg_880, reg_887, reg_894, reg_901, reg_908, reg_915, reg_922, reg_929, reg_936, reg_943, reg_950, reg_957, reg_964, reg_971, reg_978, reg_985, reg_992, ap_CS_fsm_state11, icmp_ln423_fu_1352_p2, ap_phi_mux_i_2_phi_fu_660_p4, ap_condition_1637)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_0))) then
            if ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_852;
            elsif ((ap_const_boolean_1 = ap_condition_1637)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_992;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_985;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_978;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_971;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_964;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_957;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_950;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_943;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_936;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_929;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_922;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_915;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_908;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_901;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_894;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_887;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_880;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_873;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_866;
            elsif ((ap_phi_mux_i_2_phi_fu_660_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= reg_859;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_670_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln423_fu_1352_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_40_fu_1071_p1 <= input_load_12_reg_1526(8 - 1 downto 0);
    empty_41_fu_1083_p1 <= input_r_q1(8 - 1 downto 0);
    empty_42_fu_1097_p1 <= input_r_q0(8 - 1 downto 0);
    empty_43_fu_1158_p1 <= input_r_q0(8 - 1 downto 0);
    empty_fu_1059_p1 <= input_load_11_reg_1520(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_714_ap_start <= grp_KeccakF1600_StatePer_fu_714_ap_start_reg;
    i_7_fu_1358_p2 <= std_logic_vector(unsigned(i_2_reg_656) + unsigned(ap_const_lv5_1));
    i_8_fu_1214_p2 <= std_logic_vector(unsigned(i19_0_reg_598) + unsigned(ap_const_lv5_1));
    i_fu_1005_p2 <= std_logic_vector(unsigned(i_1_reg_267) + unsigned(ap_const_lv2_1));
    icmp_ln393_fu_999_p2 <= "1" when (i_1_reg_267 = ap_const_lv2_2) else "0";
    icmp_ln408_fu_1186_p2 <= "1" when (nblocks_0_reg_574 = ap_const_lv3_0) else "0";
    icmp_ln410_fu_1208_p2 <= "1" when (i19_0_reg_598 = ap_const_lv5_15) else "0";
    icmp_ln423_fu_1352_p2 <= "1" when (i_2_reg_656 = ap_const_lv5_15) else "0";
    input_load_11_1_fu_1062_p4 <= input_load_11_reg_1520(15 downto 8);
    input_load_12_1_fu_1074_p4 <= input_load_12_reg_1526(15 downto 8);
    input_load_13_1_fu_1087_p4 <= input_r_q1(15 downto 8);
    input_load_14_1_fu_1101_p4 <= input_r_q0(15 downto 8);
    input_load_1_fu_1162_p4 <= input_r_q0(15 downto 8);

    input_r_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln393_fu_999_p2, ap_CS_fsm_state3, zext_ln395_fu_1023_p1, zext_ln398_fu_1054_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= zext_ln398_fu_1054_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_999_p2 = ap_const_lv1_1))) then 
            input_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_999_p2 = ap_const_lv1_0))) then 
            input_r_address0 <= zext_ln395_fu_1023_p1(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln396_fu_1034_p1, zext_ln397_fu_1044_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address1 <= zext_ln397_fu_1044_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address1 <= zext_ln396_fu_1034_p1(4 - 1 downto 0);
        else 
            input_r_address1 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln393_fu_999_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_999_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln393_fu_999_p2 = ap_const_lv1_0)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    nblocks_fu_1306_p2 <= std_logic_vector(unsigned(nblocks_0_reg_574) + unsigned(ap_const_lv3_7));
    or_ln396_fu_1028_p2 <= (shl_ln_fu_1015_p3 or ap_const_lv3_1);
    or_ln397_fu_1039_p2 <= (shl_ln_reg_1499 or ap_const_lv3_2);
    or_ln398_fu_1049_p2 <= (shl_ln_reg_1499 or ap_const_lv3_3);
    or_ln413_fu_1259_p2 <= (shl_ln5_fu_1225_p3 or ap_const_lv7_1);
    or_ln414_fu_1312_p2 <= (shl_ln5_reg_1588 or ap_const_lv7_2);
    or_ln415_fu_1332_p2 <= (shl_ln5_reg_1588 or ap_const_lv7_3);
    or_ln426_fu_1403_p2 <= (shl_ln4_fu_1369_p3 or ap_const_lv7_1);
    or_ln427_fu_1444_p2 <= (shl_ln4_reg_1622 or ap_const_lv7_2);
    or_ln428_fu_1464_p2 <= (shl_ln4_reg_1622 or ap_const_lv7_3);

    output_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln412_1_fu_1243_p1, zext_ln414_1_fu_1327_p1, zext_ln425_1_fu_1387_p1, zext_ln427_1_fu_1459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address0 <= zext_ln427_1_fu_1459_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= zext_ln425_1_fu_1387_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= zext_ln414_1_fu_1327_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= zext_ln412_1_fu_1243_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln413_1_fu_1275_p1, zext_ln415_1_fu_1347_p1, zext_ln426_1_fu_1419_p1, zext_ln428_1_fu_1479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address1 <= zext_ln428_1_fu_1479_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address1 <= zext_ln426_1_fu_1419_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address1 <= zext_ln415_1_fu_1347_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address1 <= zext_ln413_1_fu_1275_p1(10 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state8, p_Result_4_reg_1594, ap_CS_fsm_state11, p_Result_7_44_reg_1628, ap_CS_fsm_state9, ap_CS_fsm_state12, trunc_ln412_fu_1220_p1, trunc_ln425_fu_1364_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d0 <= p_Result_7_44_reg_1628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d0 <= trunc_ln425_fu_1364_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d0 <= p_Result_4_reg_1594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d0 <= trunc_ln412_fu_1220_p1;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(ap_CS_fsm_state8, p_Result_5_reg_1599, ap_CS_fsm_state11, p_Result_8_reg_1633, ap_CS_fsm_state9, ap_phi_mux_p_Val2_1_phi_fu_612_p42, ap_CS_fsm_state12, ap_phi_mux_p_Val2_s_phi_fu_670_p42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d1 <= p_Result_8_reg_1633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d1 <= ap_phi_mux_p_Val2_s_phi_fu_670_p42(31 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d1 <= p_Result_5_reg_1599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d1 <= ap_phi_mux_p_Val2_1_phi_fu_612_p42(31 downto 16);
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln410_fu_1208_p2, ap_CS_fsm_state11, icmp_ln423_fu_1352_p2, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state8, icmp_ln410_fu_1208_p2, ap_CS_fsm_state11, icmp_ln423_fu_1352_p2, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln423_fu_1352_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln410_fu_1208_p2 = ap_const_lv1_0)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_6_fu_1111_p9 <= (((((((empty_42_fu_1097_p1 & input_load_14_1_fu_1101_p4) & empty_41_fu_1083_p1) & input_load_13_1_fu_1087_p4) & empty_40_fu_1071_p1) & input_load_12_1_fu_1074_p4) & empty_fu_1059_p1) & input_load_11_1_fu_1062_p4);
    p_Result_7_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1172_p4),64));
    s_0_10_fu_1138_p2 <= (select_ln399_fu_1131_p3 xor p_Result_6_fu_1111_p9);
    s_1_5_fu_1144_p3 <= 
        s_0_10_fu_1138_p2 when (trunc_ln395_reg_1492(0) = '1') else 
        s_1_0_reg_243;
    s_1_6_fu_1151_p3 <= 
        s_0_0_reg_255 when (trunc_ln395_reg_1492(0) = '1') else 
        s_0_10_fu_1138_p2;
    select_ln399_fu_1131_p3 <= 
        s_1_0_reg_243 when (trunc_ln395_reg_1492(0) = '1') else 
        s_0_0_reg_255;
    shl_ln4_fu_1369_p3 <= (i_2_reg_656 & ap_const_lv2_0);
    shl_ln5_fu_1225_p3 <= (i19_0_reg_598 & ap_const_lv2_0);
    shl_ln_fu_1015_p3 <= (trunc_ln395_fu_1011_p1 & ap_const_lv2_0);
    tmp_fu_1172_p4 <= ((ap_const_lv8_1F & empty_43_fu_1158_p1) & input_load_1_fu_1162_p4);
    trunc_ln395_fu_1011_p1 <= i_1_reg_267(1 - 1 downto 0);
    trunc_ln412_fu_1220_p1 <= ap_phi_mux_p_Val2_1_phi_fu_612_p42(16 - 1 downto 0);
    trunc_ln425_fu_1364_p1 <= ap_phi_mux_p_Val2_s_phi_fu_670_p42(16 - 1 downto 0);
    zext_ln395_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1015_p3),64));
    zext_ln396_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln396_fu_1028_p2),64));
    zext_ln397_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln397_fu_1039_p2),64));
    zext_ln398_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln398_fu_1049_p2),64));
    zext_ln412_1_fu_1243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln412_fu_1237_p2),64));
    zext_ln412_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_1225_p3),10));
    zext_ln413_1_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln413_fu_1269_p2),64));
    zext_ln413_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln413_fu_1259_p2),10));
    zext_ln414_1_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_fu_1321_p2),64));
    zext_ln414_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln414_fu_1312_p2),10));
    zext_ln415_1_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln415_fu_1341_p2),64));
    zext_ln415_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln415_fu_1332_p2),10));
    zext_ln425_1_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln425_fu_1381_p2),64));
    zext_ln425_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_1369_p3),10));
    zext_ln426_1_fu_1419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln426_fu_1413_p2),64));
    zext_ln426_fu_1409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln426_fu_1403_p2),10));
    zext_ln427_1_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln427_fu_1453_p2),64));
    zext_ln427_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln427_fu_1444_p2),10));
    zext_ln428_1_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln428_fu_1473_p2),64));
    zext_ln428_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln428_fu_1464_p2),10));
end behav;
