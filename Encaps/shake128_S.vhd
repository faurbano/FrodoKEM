-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake128_S is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of shake128_S is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3_fu_499_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_836 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_509_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_841 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln355_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_533_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_473_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_1_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_10_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_10_reg_867 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_483_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_1_1_reg_872 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_569_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_0_2_fu_585_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_0_reg_900 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_419_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_419_ap_done : STD_LOGIC;
    signal s_1_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_reg_910 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_reg_915 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_reg_920 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_5_reg_925 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_6_reg_930 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_7_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_8_reg_940 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_9_reg_945 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_10_reg_950 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_11_reg_955 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_12_reg_960 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_13_reg_965 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_14_reg_970 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_15_reg_975 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_16_reg_980 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_17_reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_18_reg_990 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_19_reg_995 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_20_reg_1000 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_680_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1008 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln1_fu_709_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_reg_1013 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln368_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_0_trunc_reg_1020 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_1_trunc_reg_1025 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_0_trunc_reg_1030 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_1_trunc_reg_1035 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_0_trunc_reg_1040 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_1_trunc_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_419_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_17 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_18 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_19 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_20 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_21 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_22 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_23 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_return_24 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_0_reg_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal s_2_0_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_0_reg_236 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_0_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln360_reg_272 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_0_be_reg_289 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_0_be_reg_307 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_0_be_reg_325 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_0_be_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_2_phi_fu_365_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_361 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_p_Val2_s_phi_fu_375_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_419_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln356_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln357_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln358_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln359_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln369_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln370_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln371_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln372_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_700_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_782_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_799_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln356_fu_505_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln357_fu_522_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln358_fu_541_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln359_fu_551_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_12_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_11_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_13_fu_686_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_1_trunc_fu_690_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln370_fu_789_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln371_fu_806_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln372_fu_823_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_1215 : BOOLEAN;
    signal ap_condition_261 : BOOLEAN;

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_5_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_6_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_7_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_8_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_9_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_10_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_11_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_12_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_13_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_14_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_15_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_16_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_17_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_18_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_19_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_20_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_21_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_22_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_23_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_24_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePer_fu_419 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_419_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_419_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_419_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_419_ap_ready,
        state_0_read => s_0_0_reg_248,
        state_1_read => s_1_0_reg_236,
        state_2_read => s_2_0_reg_224,
        state_3_read => s_3_0_reg_212,
        state_4_read => ap_const_lv64_1F,
        state_5_read => ap_const_lv64_0,
        state_6_read => ap_const_lv64_0,
        state_7_read => ap_const_lv64_0,
        state_8_read => ap_const_lv64_0,
        state_9_read => ap_const_lv64_0,
        state_10_read => ap_const_lv64_0,
        state_11_read => ap_const_lv64_0,
        state_12_read => ap_const_lv64_0,
        state_13_read => ap_const_lv64_0,
        state_14_read => ap_const_lv64_0,
        state_15_read => ap_const_lv64_0,
        state_16_read => ap_const_lv64_0,
        state_17_read => ap_const_lv64_0,
        state_18_read => ap_const_lv64_0,
        state_19_read => ap_const_lv64_0,
        state_20_read => ap_const_lv64_8000000000000000,
        state_21_read => ap_const_lv64_0,
        state_22_read => ap_const_lv64_0,
        state_23_read => ap_const_lv64_0,
        state_24_read => ap_const_lv64_0,
        ap_return_0 => grp_KeccakF1600_StatePer_fu_419_ap_return_0,
        ap_return_1 => grp_KeccakF1600_StatePer_fu_419_ap_return_1,
        ap_return_2 => grp_KeccakF1600_StatePer_fu_419_ap_return_2,
        ap_return_3 => grp_KeccakF1600_StatePer_fu_419_ap_return_3,
        ap_return_4 => grp_KeccakF1600_StatePer_fu_419_ap_return_4,
        ap_return_5 => grp_KeccakF1600_StatePer_fu_419_ap_return_5,
        ap_return_6 => grp_KeccakF1600_StatePer_fu_419_ap_return_6,
        ap_return_7 => grp_KeccakF1600_StatePer_fu_419_ap_return_7,
        ap_return_8 => grp_KeccakF1600_StatePer_fu_419_ap_return_8,
        ap_return_9 => grp_KeccakF1600_StatePer_fu_419_ap_return_9,
        ap_return_10 => grp_KeccakF1600_StatePer_fu_419_ap_return_10,
        ap_return_11 => grp_KeccakF1600_StatePer_fu_419_ap_return_11,
        ap_return_12 => grp_KeccakF1600_StatePer_fu_419_ap_return_12,
        ap_return_13 => grp_KeccakF1600_StatePer_fu_419_ap_return_13,
        ap_return_14 => grp_KeccakF1600_StatePer_fu_419_ap_return_14,
        ap_return_15 => grp_KeccakF1600_StatePer_fu_419_ap_return_15,
        ap_return_16 => grp_KeccakF1600_StatePer_fu_419_ap_return_16,
        ap_return_17 => grp_KeccakF1600_StatePer_fu_419_ap_return_17,
        ap_return_18 => grp_KeccakF1600_StatePer_fu_419_ap_return_18,
        ap_return_19 => grp_KeccakF1600_StatePer_fu_419_ap_return_19,
        ap_return_20 => grp_KeccakF1600_StatePer_fu_419_ap_return_20,
        ap_return_21 => grp_KeccakF1600_StatePer_fu_419_ap_return_21,
        ap_return_22 => grp_KeccakF1600_StatePer_fu_419_ap_return_22,
        ap_return_23 => grp_KeccakF1600_StatePer_fu_419_ap_return_23,
        ap_return_24 => grp_KeccakF1600_StatePer_fu_419_ap_return_24);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_419_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_419_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln355_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_KeccakF1600_StatePer_fu_419_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_419_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_419_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_260 <= i_3_reg_836;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_260 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_2_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_361 <= i_reg_1008;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_419_ap_done = ap_const_logic_1))) then 
                i_2_reg_361 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_ln360_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((i_1_reg_260 = ap_const_lv3_0)) then 
                    phi_ln360_reg_272 <= s_0_0_reg_248;
                elsif ((ap_const_boolean_1 = ap_condition_261)) then 
                    phi_ln360_reg_272 <= s_3_0_reg_212;
                elsif ((i_1_reg_260 = ap_const_lv3_2)) then 
                    phi_ln360_reg_272 <= s_2_0_reg_224;
                elsif ((i_1_reg_260 = ap_const_lv3_1)) then 
                    phi_ln360_reg_272 <= s_1_0_reg_236;
                end if;
            end if; 
        end if;
    end process;

    s_0_0_be_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_1_reg_260 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                s_0_0_be_reg_343 <= s_0_2_fu_585_p2;
            elsif (((not((i_1_reg_260 = ap_const_lv3_0)) and not((i_1_reg_260 = ap_const_lv3_2)) and not((i_1_reg_260 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                s_0_0_be_reg_343 <= s_0_0_reg_248;
            end if; 
        end if;
    end process;

    s_0_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                s_0_0_reg_248 <= s_0_0_be_reg_343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_0_0_reg_248 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_1_0_be_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_1_reg_260 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                s_1_0_be_reg_325 <= s_0_2_fu_585_p2;
            elsif (((not((i_1_reg_260 = ap_const_lv3_0)) and not((i_1_reg_260 = ap_const_lv3_2)) and not((i_1_reg_260 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                s_1_0_be_reg_325 <= s_1_0_reg_236;
            end if; 
        end if;
    end process;

    s_1_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                s_1_0_reg_236 <= s_1_0_be_reg_325;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_1_0_reg_236 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_2_0_be_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_1_reg_260 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                s_2_0_be_reg_307 <= s_0_2_fu_585_p2;
            elsif (((not((i_1_reg_260 = ap_const_lv3_0)) and not((i_1_reg_260 = ap_const_lv3_2)) and not((i_1_reg_260 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                s_2_0_be_reg_307 <= s_2_0_reg_224;
            end if; 
        end if;
    end process;

    s_2_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                s_2_0_reg_224 <= s_2_0_be_reg_307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_2_0_reg_224 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_3_0_be_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((i_1_reg_260 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((i_1_reg_260 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                s_3_0_be_reg_289 <= s_3_0_reg_212;
            elsif ((not((i_1_reg_260 = ap_const_lv3_0)) and not((i_1_reg_260 = ap_const_lv3_2)) and not((i_1_reg_260 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                s_3_0_be_reg_289 <= s_0_2_fu_585_p2;
            end if; 
        end if;
    end process;

    s_3_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                s_3_0_reg_212 <= s_3_0_be_reg_289;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_3_0_reg_212 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_10_reg_867 <= empty_10_fu_537_p1;
                empty_reg_857 <= empty_fu_533_p1;
                input_load_1_1_reg_872 <= input_r_q1(15 downto 8);
                input_load_1_reg_862 <= input_r_q0(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_836 <= i_3_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_1008 <= i_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln368_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                p_Result_7_0_trunc_reg_1020 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(23 downto 16);
                p_Result_7_1_trunc_reg_1025 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(31 downto 24);
                p_Result_8_0_trunc_reg_1040 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(55 downto 48);
                p_Result_8_1_trunc_reg_1045 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(63 downto 56);
                p_Result_9_0_trunc_reg_1030 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(39 downto 32);
                p_Result_9_1_trunc_reg_1035 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(47 downto 40);
                    shl_ln1_reg_1013(6 downto 2) <= shl_ln1_fu_709_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Result_s_reg_887 <= p_Result_s_fu_569_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_419_ap_done = ap_const_logic_1))) then
                s_0_reg_900 <= grp_KeccakF1600_StatePer_fu_419_ap_return_0;
                s_10_reg_950 <= grp_KeccakF1600_StatePer_fu_419_ap_return_10;
                s_11_reg_955 <= grp_KeccakF1600_StatePer_fu_419_ap_return_11;
                s_12_reg_960 <= grp_KeccakF1600_StatePer_fu_419_ap_return_12;
                s_13_reg_965 <= grp_KeccakF1600_StatePer_fu_419_ap_return_13;
                s_14_reg_970 <= grp_KeccakF1600_StatePer_fu_419_ap_return_14;
                s_15_reg_975 <= grp_KeccakF1600_StatePer_fu_419_ap_return_15;
                s_16_reg_980 <= grp_KeccakF1600_StatePer_fu_419_ap_return_16;
                s_17_reg_985 <= grp_KeccakF1600_StatePer_fu_419_ap_return_17;
                s_18_reg_990 <= grp_KeccakF1600_StatePer_fu_419_ap_return_18;
                s_19_reg_995 <= grp_KeccakF1600_StatePer_fu_419_ap_return_19;
                s_1_reg_905 <= grp_KeccakF1600_StatePer_fu_419_ap_return_1;
                s_20_reg_1000 <= grp_KeccakF1600_StatePer_fu_419_ap_return_20;
                s_2_reg_910 <= grp_KeccakF1600_StatePer_fu_419_ap_return_2;
                s_3_reg_915 <= grp_KeccakF1600_StatePer_fu_419_ap_return_3;
                s_4_reg_920 <= grp_KeccakF1600_StatePer_fu_419_ap_return_4;
                s_5_reg_925 <= grp_KeccakF1600_StatePer_fu_419_ap_return_5;
                s_6_reg_930 <= grp_KeccakF1600_StatePer_fu_419_ap_return_6;
                s_7_reg_935 <= grp_KeccakF1600_StatePer_fu_419_ap_return_7;
                s_8_reg_940 <= grp_KeccakF1600_StatePer_fu_419_ap_return_8;
                s_9_reg_945 <= grp_KeccakF1600_StatePer_fu_419_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln355_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_841(3 downto 2) <= shl_ln_fu_509_p3(3 downto 2);
            end if;
        end if;
    end process;
    shl_ln_reg_841(1 downto 0) <= "00";
    shl_ln1_reg_1013(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln355_fu_493_p2, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_419_ap_done, ap_CS_fsm_state8, icmp_ln368_fu_674_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln355_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_KeccakF1600_StatePer_fu_419_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln368_fu_674_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_1215_assign_proc : process(ap_phi_mux_i_2_phi_fu_365_p4)
    begin
                ap_condition_1215 <= (not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_13)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_12)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_11)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_1)));
    end process;


    ap_condition_261_assign_proc : process(i_1_reg_260)
    begin
                ap_condition_261 <= (not((i_1_reg_260 = ap_const_lv3_0)) and not((i_1_reg_260 = ap_const_lv3_2)) and not((i_1_reg_260 = ap_const_lv3_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln368_fu_674_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln368_fu_674_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_2_phi_fu_365_p4 <= i_2_reg_361;

    ap_phi_mux_p_Val2_s_phi_fu_375_p42_assign_proc : process(s_0_reg_900, s_1_reg_905, s_2_reg_910, s_3_reg_915, s_4_reg_920, s_5_reg_925, s_6_reg_930, s_7_reg_935, s_8_reg_940, s_9_reg_945, s_10_reg_950, s_11_reg_955, s_12_reg_960, s_13_reg_965, s_14_reg_970, s_15_reg_975, s_16_reg_980, s_17_reg_985, s_18_reg_990, s_19_reg_995, s_20_reg_1000, ap_CS_fsm_state8, icmp_ln368_fu_674_p2, ap_phi_mux_i_2_phi_fu_365_p4, ap_condition_1215)
    begin
        if (((icmp_ln368_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
            if ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_0_reg_900;
            elsif ((ap_const_boolean_1 = ap_condition_1215)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_20_reg_1000;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_19_reg_995;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_18_reg_990;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_17_reg_985;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_16_reg_980;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_15_reg_975;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_14_reg_970;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_13_reg_965;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_12_reg_960;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_11_reg_955;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_10_reg_950;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_9_reg_945;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_8_reg_940;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_7_reg_935;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_6_reg_930;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_5_reg_925;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_4_reg_920;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_3_reg_915;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_2_reg_910;
            elsif ((ap_phi_mux_i_2_phi_fu_365_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= s_1_reg_905;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_375_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln368_fu_674_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln368_fu_674_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_537_p1 <= input_r_q1(8 - 1 downto 0);
    empty_11_fu_561_p1 <= input_r_q0(8 - 1 downto 0);
    empty_12_fu_565_p1 <= input_r_q1(8 - 1 downto 0);
    empty_13_fu_686_p1 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(8 - 1 downto 0);
    empty_fu_533_p1 <= input_r_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_419_ap_start <= grp_KeccakF1600_StatePer_fu_419_ap_start_reg;
    grp_fu_473_p4 <= input_r_q0(15 downto 8);
    grp_fu_483_p4 <= input_r_q1(15 downto 8);
    i_3_fu_499_p2 <= std_logic_vector(unsigned(i_1_reg_260) + unsigned(ap_const_lv3_1));
    i_fu_680_p2 <= std_logic_vector(unsigned(i_2_reg_361) + unsigned(ap_const_lv5_1));
    icmp_ln355_fu_493_p2 <= "1" when (i_1_reg_260 = ap_const_lv3_4) else "0";
    icmp_ln368_fu_674_p2 <= "1" when (i_2_reg_361 = ap_const_lv5_15) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln356_fu_517_p1, zext_ln358_fu_546_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= zext_ln358_fu_546_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= zext_ln356_fu_517_p1(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln357_fu_528_p1, zext_ln359_fu_556_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address1 <= zext_ln359_fu_556_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address1 <= zext_ln357_fu_528_p1(4 - 1 downto 0);
        else 
            input_r_address1 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln357_fu_522_p2 <= (shl_ln_fu_509_p3 or ap_const_lv4_1);
    or_ln358_fu_541_p2 <= (shl_ln_reg_841 or ap_const_lv4_2);
    or_ln359_fu_551_p2 <= (shl_ln_reg_841 or ap_const_lv4_3);
    or_ln370_fu_789_p2 <= (shl_ln1_reg_1013 or ap_const_lv7_1);
    or_ln371_fu_806_p2 <= (shl_ln1_reg_1013 or ap_const_lv7_2);
    or_ln372_fu_823_p2 <= (shl_ln1_reg_1013 or ap_const_lv7_3);

    output_r_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, zext_ln369_fu_717_p1, zext_ln370_fu_794_p1, ap_CS_fsm_state9, zext_ln371_fu_811_p1, ap_CS_fsm_state10, zext_ln372_fu_828_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address1 <= zext_ln372_fu_828_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address1 <= zext_ln371_fu_811_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address1 <= zext_ln370_fu_794_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address1 <= zext_ln369_fu_717_p1(4 - 1 downto 0);
        else 
            output_r_address1 <= "XXXX";
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10, trunc_ln_fu_700_p3, trunc_ln1_fu_782_p3, trunc_ln2_fu_799_p3, trunc_ln3_fu_816_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d1 <= trunc_ln3_fu_816_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d1 <= trunc_ln2_fu_799_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d1 <= trunc_ln1_fu_782_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d1 <= trunc_ln_fu_700_p3;
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state8, icmp_ln368_fu_674_p2, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln368_fu_674_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_6_1_trunc_fu_690_p4 <= ap_phi_mux_p_Val2_s_phi_fu_375_p42(15 downto 8);
    p_Result_s_fu_569_p9 <= (((((((empty_12_fu_565_p1 & grp_fu_483_p4) & empty_11_fu_561_p1) & grp_fu_473_p4) & empty_10_reg_867) & input_load_1_1_reg_872) & empty_reg_857) & input_load_1_reg_862);
    s_0_2_fu_585_p2 <= (phi_ln360_reg_272 xor p_Result_s_reg_887);
    shl_ln1_fu_709_p3 <= (i_2_reg_361 & ap_const_lv2_0);
    shl_ln_fu_509_p3 <= (trunc_ln356_fu_505_p1 & ap_const_lv2_0);
    trunc_ln1_fu_782_p3 <= (p_Result_7_0_trunc_reg_1020 & p_Result_7_1_trunc_reg_1025);
    trunc_ln2_fu_799_p3 <= (p_Result_9_0_trunc_reg_1030 & p_Result_9_1_trunc_reg_1035);
    trunc_ln356_fu_505_p1 <= i_1_reg_260(2 - 1 downto 0);
    trunc_ln3_fu_816_p3 <= (p_Result_8_0_trunc_reg_1040 & p_Result_8_1_trunc_reg_1045);
    trunc_ln_fu_700_p3 <= (empty_13_fu_686_p1 & p_Result_6_1_trunc_fu_690_p4);
    zext_ln356_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_509_p3),64));
    zext_ln357_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln357_fu_522_p2),64));
    zext_ln358_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln358_fu_541_p2),64));
    zext_ln359_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln359_fu_551_p2),64));
    zext_ln369_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_709_p3),64));
    zext_ln370_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln370_fu_789_p2),64));
    zext_ln371_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln371_fu_806_p2),64));
    zext_ln372_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln372_fu_823_p2),64));
end behav;
