-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_keygen_640 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    pk_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    randomness_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    randomness_ce0 : OUT STD_LOGIC;
    randomness_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    randomness_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    randomness_ce1 : OUT STD_LOGIC;
    randomness_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_keygen_640 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_keygen_640,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-ffv1156-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.565000,HLS_SYN_LAT=2022808,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=2,HLS_SYN_FF=20714,HLS_SYN_LUT=78637,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_12C8 : STD_LOGIC_VECTOR (12 downto 0) := "1001011001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_382_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_518 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln31_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_542 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln38_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_547 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_471_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_15_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln46_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_565 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln44_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_488_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_16_reg_578 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln63_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal seedA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal seedA_ce0 : STD_LOGIC;
    signal seedA_we0 : STD_LOGIC;
    signal seedA_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seedA_ce1 : STD_LOGIC;
    signal seedA_we1 : STD_LOGIC;
    signal seedSE_ce0 : STD_LOGIC;
    signal seedSE_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seedSE_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal seedSE_ce1 : STD_LOGIC;
    signal seedSE_we1 : STD_LOGIC;
    signal seedSE_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seedSE_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_we0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal S_ce1 : STD_LOGIC;
    signal S_q1 : STD_LOGIC_VECTOR (4 downto 0);
    signal S_tmp_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal S_tmp_ce0 : STD_LOGIC;
    signal S_tmp_we0 : STD_LOGIC;
    signal S_tmp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_tmp_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal S_tmp_ce1 : STD_LOGIC;
    signal S_tmp_we1 : STD_LOGIC;
    signal S_tmp_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal B_ce1 : STD_LOGIC;
    signal B_we1 : STD_LOGIC;
    signal B_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_16_fu_307_ap_start : STD_LOGIC;
    signal grp_shake128_16_fu_307_ap_done : STD_LOGIC;
    signal grp_shake128_16_fu_307_ap_idle : STD_LOGIC;
    signal grp_shake128_16_fu_307_ap_ready : STD_LOGIC;
    signal grp_shake128_16_fu_307_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_16_fu_307_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_16_fu_307_output_r_we0 : STD_LOGIC;
    signal grp_shake128_16_fu_307_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_16_fu_307_output_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_16_fu_307_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_16_fu_307_output_r_we1 : STD_LOGIC;
    signal grp_shake128_16_fu_307_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_16_fu_307_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_16_fu_307_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_16_fu_307_input_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake128_16_fu_307_input_r_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_ap_start : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_ap_done : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_B_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_315_B_ce0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_315_B_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_B_we1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_B_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix_mult_AS_fu_315_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_315_S_ce0 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_S_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrix_mult_AS_fu_315_S_ce1 : STD_LOGIC;
    signal grp_matrix_mult_AS_fu_315_seedA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matrix_mult_AS_fu_315_seedA_ce0 : STD_LOGIC;
    signal grp_shake128_10240_fu_324_ap_start : STD_LOGIC;
    signal grp_shake128_10240_fu_324_ap_done : STD_LOGIC;
    signal grp_shake128_10240_fu_324_ap_idle : STD_LOGIC;
    signal grp_shake128_10240_fu_324_ap_ready : STD_LOGIC;
    signal grp_shake128_10240_fu_324_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_10240_fu_324_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_10240_fu_324_output_r_we0 : STD_LOGIC;
    signal grp_shake128_10240_fu_324_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10240_fu_324_output_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake128_10240_fu_324_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_10240_fu_324_output_r_we1 : STD_LOGIC;
    signal grp_shake128_10240_fu_324_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10240_fu_324_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10240_fu_324_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_10240_fu_324_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10240_fu_324_input_r_ce1 : STD_LOGIC;
    signal grp_shake128_S_fu_330_ap_start : STD_LOGIC;
    signal grp_shake128_S_fu_330_ap_done : STD_LOGIC;
    signal grp_shake128_S_fu_330_ap_idle : STD_LOGIC;
    signal grp_shake128_S_fu_330_ap_ready : STD_LOGIC;
    signal grp_shake128_S_fu_330_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake128_S_fu_330_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_S_fu_330_output_r_we0 : STD_LOGIC;
    signal grp_shake128_S_fu_330_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_S_fu_330_output_r_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_shake128_S_fu_330_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_S_fu_330_output_r_we1 : STD_LOGIC;
    signal grp_shake128_S_fu_330_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_S_fu_330_input_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake128_S_fu_330_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_S_fu_330_input_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake128_S_fu_330_input_r_ce1 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_ap_start : STD_LOGIC;
    signal grp_frodo_sample_fu_337_ap_done : STD_LOGIC;
    signal grp_frodo_sample_fu_337_ap_idle : STD_LOGIC;
    signal grp_frodo_sample_fu_337_ap_ready : STD_LOGIC;
    signal grp_frodo_sample_fu_337_sk_S_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_337_sk_S_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_sk_S_we0 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_sk_S_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_sample_fu_337_S_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_sample_fu_337_S_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_S_we0 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_S_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_frodo_sample_fu_337_E_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_sample_fu_337_E_ce1 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_E_we1 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_E_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_sample_fu_337_entrada_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_337_entrada_ce0 : STD_LOGIC;
    signal grp_frodo_sample_fu_337_entrada_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_sample_fu_337_entrada_ce1 : STD_LOGIC;
    signal grp_frodo_pack_fu_346_ap_start : STD_LOGIC;
    signal grp_frodo_pack_fu_346_ap_done : STD_LOGIC;
    signal grp_frodo_pack_fu_346_ap_idle : STD_LOGIC;
    signal grp_frodo_pack_fu_346_ap_ready : STD_LOGIC;
    signal grp_frodo_pack_fu_346_b_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_fu_346_b_ce0 : STD_LOGIC;
    signal grp_frodo_pack_fu_346_b_we0 : STD_LOGIC;
    signal grp_frodo_pack_fu_346_b_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_fu_346_B_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_fu_346_B_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_fu_346_B_r_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_fu_346_B_r_ce1 : STD_LOGIC;
    signal i_0_reg_262 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_273 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_reg_284 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_3_reg_295 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_shake128_16_fu_307_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_matrix_mult_AS_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_shake128_10240_fu_324_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_shake128_S_fu_330_ap_start_reg : STD_LOGIC := '0';
    signal grp_frodo_sample_fu_337_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_frodo_pack_fu_346_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln32_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_2_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_1_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_1_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1_fu_432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln34_fu_441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_353_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_363_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln32_1_fu_388_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln32_2_fu_401_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln32_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln64_fu_499_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component shake128_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_we1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
        seedA_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        seedA_ce0 : OUT STD_LOGIC;
        seedA_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_10240 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component shake128_S IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_sample IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sk_S_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        sk_S_ce0 : OUT STD_LOGIC;
        sk_S_we0 : OUT STD_LOGIC;
        sk_S_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        E_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        E_ce1 : OUT STD_LOGIC;
        E_we1 : OUT STD_LOGIC;
        E_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        entrada_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        entrada_ce0 : OUT STD_LOGIC;
        entrada_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        entrada_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        entrada_ce1 : OUT STD_LOGIC;
        entrada_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_pack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_we0 : OUT STD_LOGIC;
        b_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_r_ce0 : OUT STD_LOGIC;
        B_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_r_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_r_ce1 : OUT STD_LOGIC;
        B_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_640_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_640_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_640_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component frodo_keygen_640_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_640_B IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    seedA_U : component frodo_keygen_640_eOg
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seedA_address0,
        ce0 => seedA_ce0,
        we0 => seedA_we0,
        d0 => grp_shake128_S_fu_330_output_r_d0,
        q0 => seedA_q0,
        address1 => grp_shake128_S_fu_330_output_r_address1,
        ce1 => seedA_ce1,
        we1 => seedA_we1,
        d1 => grp_shake128_S_fu_330_output_r_d1);

    seedSE_U : component frodo_keygen_640_fYi
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_shake128_10240_fu_324_input_r_address0,
        ce0 => seedSE_ce0,
        q0 => seedSE_q0,
        address1 => seedSE_address1,
        ce1 => seedSE_ce1,
        we1 => seedSE_we1,
        d1 => seedSE_d1,
        q1 => seedSE_q1);

    S_U : component frodo_keygen_640_S
    generic map (
        DataWidth => 5,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        we0 => S_we0,
        d0 => grp_frodo_sample_fu_337_S_d0,
        q0 => S_q0,
        address1 => grp_matrix_mult_AS_fu_315_S_address1,
        ce1 => S_ce1,
        q1 => S_q1);

    S_tmp_U : component frodo_keygen_640_g8j
    generic map (
        DataWidth => 16,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_tmp_address0,
        ce0 => S_tmp_ce0,
        we0 => S_tmp_we0,
        d0 => grp_shake128_10240_fu_324_output_r_d0,
        q0 => S_tmp_q0,
        address1 => S_tmp_address1,
        ce1 => S_tmp_ce1,
        we1 => S_tmp_we1,
        d1 => grp_shake128_10240_fu_324_output_r_d1,
        q1 => S_tmp_q1);

    B_U : component frodo_keygen_640_B
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        q0 => B_q0,
        address1 => B_address1,
        ce1 => B_ce1,
        we1 => B_we1,
        d1 => B_d1,
        q1 => B_q1);

    grp_shake128_16_fu_307 : component shake128_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_16_fu_307_ap_start,
        ap_done => grp_shake128_16_fu_307_ap_done,
        ap_idle => grp_shake128_16_fu_307_ap_idle,
        ap_ready => grp_shake128_16_fu_307_ap_ready,
        output_r_address0 => grp_shake128_16_fu_307_output_r_address0,
        output_r_ce0 => grp_shake128_16_fu_307_output_r_ce0,
        output_r_we0 => grp_shake128_16_fu_307_output_r_we0,
        output_r_d0 => grp_shake128_16_fu_307_output_r_d0,
        output_r_address1 => grp_shake128_16_fu_307_output_r_address1,
        output_r_ce1 => grp_shake128_16_fu_307_output_r_ce1,
        output_r_we1 => grp_shake128_16_fu_307_output_r_we1,
        output_r_d1 => grp_shake128_16_fu_307_output_r_d1,
        input_r_address0 => grp_shake128_16_fu_307_input_r_address0,
        input_r_ce0 => grp_shake128_16_fu_307_input_r_ce0,
        input_r_q0 => pk_q0,
        input_r_address1 => grp_shake128_16_fu_307_input_r_address1,
        input_r_ce1 => grp_shake128_16_fu_307_input_r_ce1,
        input_r_q1 => pk_q1);

    grp_matrix_mult_AS_fu_315 : component matrix_mult_AS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_AS_fu_315_ap_start,
        ap_done => grp_matrix_mult_AS_fu_315_ap_done,
        ap_idle => grp_matrix_mult_AS_fu_315_ap_idle,
        ap_ready => grp_matrix_mult_AS_fu_315_ap_ready,
        B_address0 => grp_matrix_mult_AS_fu_315_B_address0,
        B_ce0 => grp_matrix_mult_AS_fu_315_B_ce0,
        B_q0 => B_q0,
        B_address1 => grp_matrix_mult_AS_fu_315_B_address1,
        B_ce1 => grp_matrix_mult_AS_fu_315_B_ce1,
        B_we1 => grp_matrix_mult_AS_fu_315_B_we1,
        B_d1 => grp_matrix_mult_AS_fu_315_B_d1,
        S_address0 => grp_matrix_mult_AS_fu_315_S_address0,
        S_ce0 => grp_matrix_mult_AS_fu_315_S_ce0,
        S_q0 => S_q0,
        S_address1 => grp_matrix_mult_AS_fu_315_S_address1,
        S_ce1 => grp_matrix_mult_AS_fu_315_S_ce1,
        S_q1 => S_q1,
        seedA_address0 => grp_matrix_mult_AS_fu_315_seedA_address0,
        seedA_ce0 => grp_matrix_mult_AS_fu_315_seedA_ce0,
        seedA_q0 => seedA_q0);

    grp_shake128_10240_fu_324 : component shake128_10240
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_10240_fu_324_ap_start,
        ap_done => grp_shake128_10240_fu_324_ap_done,
        ap_idle => grp_shake128_10240_fu_324_ap_idle,
        ap_ready => grp_shake128_10240_fu_324_ap_ready,
        output_r_address0 => grp_shake128_10240_fu_324_output_r_address0,
        output_r_ce0 => grp_shake128_10240_fu_324_output_r_ce0,
        output_r_we0 => grp_shake128_10240_fu_324_output_r_we0,
        output_r_d0 => grp_shake128_10240_fu_324_output_r_d0,
        output_r_address1 => grp_shake128_10240_fu_324_output_r_address1,
        output_r_ce1 => grp_shake128_10240_fu_324_output_r_ce1,
        output_r_we1 => grp_shake128_10240_fu_324_output_r_we1,
        output_r_d1 => grp_shake128_10240_fu_324_output_r_d1,
        input_r_address0 => grp_shake128_10240_fu_324_input_r_address0,
        input_r_ce0 => grp_shake128_10240_fu_324_input_r_ce0,
        input_r_q0 => seedSE_q0,
        input_r_address1 => grp_shake128_10240_fu_324_input_r_address1,
        input_r_ce1 => grp_shake128_10240_fu_324_input_r_ce1,
        input_r_q1 => seedSE_q1);

    grp_shake128_S_fu_330 : component shake128_S
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_S_fu_330_ap_start,
        ap_done => grp_shake128_S_fu_330_ap_done,
        ap_idle => grp_shake128_S_fu_330_ap_idle,
        ap_ready => grp_shake128_S_fu_330_ap_ready,
        output_r_address0 => grp_shake128_S_fu_330_output_r_address0,
        output_r_ce0 => grp_shake128_S_fu_330_output_r_ce0,
        output_r_we0 => grp_shake128_S_fu_330_output_r_we0,
        output_r_d0 => grp_shake128_S_fu_330_output_r_d0,
        output_r_address1 => grp_shake128_S_fu_330_output_r_address1,
        output_r_ce1 => grp_shake128_S_fu_330_output_r_ce1,
        output_r_we1 => grp_shake128_S_fu_330_output_r_we1,
        output_r_d1 => grp_shake128_S_fu_330_output_r_d1,
        input_r_address0 => grp_shake128_S_fu_330_input_r_address0,
        input_r_ce0 => grp_shake128_S_fu_330_input_r_ce0,
        input_r_q0 => randomness_q0,
        input_r_address1 => grp_shake128_S_fu_330_input_r_address1,
        input_r_ce1 => grp_shake128_S_fu_330_input_r_ce1,
        input_r_q1 => randomness_q1);

    grp_frodo_sample_fu_337 : component frodo_sample
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_sample_fu_337_ap_start,
        ap_done => grp_frodo_sample_fu_337_ap_done,
        ap_idle => grp_frodo_sample_fu_337_ap_idle,
        ap_ready => grp_frodo_sample_fu_337_ap_ready,
        sk_S_address0 => grp_frodo_sample_fu_337_sk_S_address0,
        sk_S_ce0 => grp_frodo_sample_fu_337_sk_S_ce0,
        sk_S_we0 => grp_frodo_sample_fu_337_sk_S_we0,
        sk_S_d0 => grp_frodo_sample_fu_337_sk_S_d0,
        S_address0 => grp_frodo_sample_fu_337_S_address0,
        S_ce0 => grp_frodo_sample_fu_337_S_ce0,
        S_we0 => grp_frodo_sample_fu_337_S_we0,
        S_d0 => grp_frodo_sample_fu_337_S_d0,
        E_address1 => grp_frodo_sample_fu_337_E_address1,
        E_ce1 => grp_frodo_sample_fu_337_E_ce1,
        E_we1 => grp_frodo_sample_fu_337_E_we1,
        E_d1 => grp_frodo_sample_fu_337_E_d1,
        entrada_address0 => grp_frodo_sample_fu_337_entrada_address0,
        entrada_ce0 => grp_frodo_sample_fu_337_entrada_ce0,
        entrada_q0 => S_tmp_q0,
        entrada_address1 => grp_frodo_sample_fu_337_entrada_address1,
        entrada_ce1 => grp_frodo_sample_fu_337_entrada_ce1,
        entrada_q1 => S_tmp_q1);

    grp_frodo_pack_fu_346 : component frodo_pack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_pack_fu_346_ap_start,
        ap_done => grp_frodo_pack_fu_346_ap_done,
        ap_idle => grp_frodo_pack_fu_346_ap_idle,
        ap_ready => grp_frodo_pack_fu_346_ap_ready,
        b_address0 => grp_frodo_pack_fu_346_b_address0,
        b_ce0 => grp_frodo_pack_fu_346_b_ce0,
        b_we0 => grp_frodo_pack_fu_346_b_we0,
        b_d0 => grp_frodo_pack_fu_346_b_d0,
        B_r_address0 => grp_frodo_pack_fu_346_B_r_address0,
        B_r_ce0 => grp_frodo_pack_fu_346_B_r_ce0,
        B_r_q0 => B_q0,
        B_r_address1 => grp_frodo_pack_fu_346_B_r_address1,
        B_r_ce1 => grp_frodo_pack_fu_346_B_r_ce1,
        B_r_q1 => B_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_frodo_pack_fu_346_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_pack_fu_346_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_frodo_pack_fu_346_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_pack_fu_346_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_pack_fu_346_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_sample_fu_337_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_sample_fu_337_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_frodo_sample_fu_337_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_sample_fu_337_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_sample_fu_337_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_AS_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_AS_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_matrix_mult_AS_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_AS_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_AS_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_10240_fu_324_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_10240_fu_324_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln44_fu_465_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_shake128_10240_fu_324_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_10240_fu_324_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_10240_fu_324_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_16_fu_307_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_16_fu_307_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_shake128_16_fu_307_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_16_fu_307_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_16_fu_307_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_S_fu_330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_S_fu_330_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln36_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_shake128_S_fu_330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_S_fu_330_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_S_fu_330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_262 <= i_reg_518;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_262 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_273 <= i_14_reg_542;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_273 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_2_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_284 <= i_15_reg_560;
            elsif (((grp_shake128_S_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_2_reg_284 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_3_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_3_reg_295 <= i_16_reg_578;
            elsif (((grp_shake128_16_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_3_reg_295 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_14_reg_542 <= i_14_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_15_reg_560 <= i_15_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_16_reg_578 <= i_16_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_518 <= i_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln38_reg_547(3 downto 0) <= zext_ln38_fu_460_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    zext_ln46_reg_565(3 downto 0) <= zext_ln46_fu_477_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln38_reg_547(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_565(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_376_p2, ap_CS_fsm_state6, icmp_ln36_fu_448_p2, ap_CS_fsm_state9, icmp_ln44_fu_465_p2, ap_CS_fsm_state20, icmp_ln63_fu_482_p2, grp_shake128_16_fu_307_ap_done, grp_matrix_mult_AS_fu_315_ap_done, grp_shake128_10240_fu_324_ap_done, grp_shake128_S_fu_330_ap_done, grp_frodo_sample_fu_337_ap_done, grp_frodo_pack_fu_346_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln31_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln36_fu_448_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((grp_shake128_S_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln44_fu_465_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((grp_shake128_10240_fu_324_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_frodo_sample_fu_337_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_matrix_mult_AS_fu_315_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_frodo_pack_fu_346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_shake128_16_fu_307_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln63_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B_address0_assign_proc : process(grp_matrix_mult_AS_fu_315_B_address0, grp_frodo_pack_fu_346_B_r_address0, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            B_address0 <= grp_frodo_pack_fu_346_B_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_address0 <= grp_matrix_mult_AS_fu_315_B_address0;
        else 
            B_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(grp_matrix_mult_AS_fu_315_B_address1, grp_frodo_sample_fu_337_E_address1, grp_frodo_pack_fu_346_B_r_address1, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            B_address1 <= grp_frodo_pack_fu_346_B_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_address1 <= grp_frodo_sample_fu_337_E_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_address1 <= grp_matrix_mult_AS_fu_315_B_address1;
        else 
            B_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(grp_matrix_mult_AS_fu_315_B_ce0, grp_frodo_pack_fu_346_B_r_ce0, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            B_ce0 <= grp_frodo_pack_fu_346_B_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_ce0 <= grp_matrix_mult_AS_fu_315_B_ce0;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(grp_matrix_mult_AS_fu_315_B_ce1, grp_frodo_sample_fu_337_E_ce1, grp_frodo_pack_fu_346_B_r_ce1, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            B_ce1 <= grp_frodo_pack_fu_346_B_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_ce1 <= grp_frodo_sample_fu_337_E_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_ce1 <= grp_matrix_mult_AS_fu_315_B_ce1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_d1_assign_proc : process(grp_matrix_mult_AS_fu_315_B_d1, grp_frodo_sample_fu_337_E_d1, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_d1 <= grp_frodo_sample_fu_337_E_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_d1 <= grp_matrix_mult_AS_fu_315_B_d1;
        else 
            B_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_we1_assign_proc : process(grp_matrix_mult_AS_fu_315_B_we1, grp_frodo_sample_fu_337_E_we1, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_we1 <= grp_frodo_sample_fu_337_E_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_we1 <= grp_matrix_mult_AS_fu_315_B_we1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_address0_assign_proc : process(grp_matrix_mult_AS_fu_315_S_address0, grp_frodo_sample_fu_337_S_address0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_address0 <= grp_frodo_sample_fu_337_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            S_address0 <= grp_matrix_mult_AS_fu_315_S_address0;
        else 
            S_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(grp_matrix_mult_AS_fu_315_S_ce0, grp_frodo_sample_fu_337_S_ce0, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_ce0 <= grp_frodo_sample_fu_337_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            S_ce0 <= grp_matrix_mult_AS_fu_315_S_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(grp_matrix_mult_AS_fu_315_S_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            S_ce1 <= grp_matrix_mult_AS_fu_315_S_ce1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_tmp_address0_assign_proc : process(grp_shake128_10240_fu_324_output_r_address0, grp_frodo_sample_fu_337_entrada_address0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_tmp_address0 <= grp_frodo_sample_fu_337_entrada_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_tmp_address0 <= grp_shake128_10240_fu_324_output_r_address0;
        else 
            S_tmp_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    S_tmp_address1_assign_proc : process(grp_shake128_10240_fu_324_output_r_address1, grp_frodo_sample_fu_337_entrada_address1, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_tmp_address1 <= grp_frodo_sample_fu_337_entrada_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_tmp_address1 <= grp_shake128_10240_fu_324_output_r_address1;
        else 
            S_tmp_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    S_tmp_ce0_assign_proc : process(grp_shake128_10240_fu_324_output_r_ce0, grp_frodo_sample_fu_337_entrada_ce0, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_tmp_ce0 <= grp_frodo_sample_fu_337_entrada_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_tmp_ce0 <= grp_shake128_10240_fu_324_output_r_ce0;
        else 
            S_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_tmp_ce1_assign_proc : process(grp_shake128_10240_fu_324_output_r_ce1, grp_frodo_sample_fu_337_entrada_ce1, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_tmp_ce1 <= grp_frodo_sample_fu_337_entrada_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_tmp_ce1 <= grp_shake128_10240_fu_324_output_r_ce1;
        else 
            S_tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_tmp_we0_assign_proc : process(grp_shake128_10240_fu_324_output_r_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_tmp_we0 <= grp_shake128_10240_fu_324_output_r_we0;
        else 
            S_tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_tmp_we1_assign_proc : process(grp_shake128_10240_fu_324_output_r_we1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_tmp_we1 <= grp_shake128_10240_fu_324_output_r_we1;
        else 
            S_tmp_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_we0_assign_proc : process(grp_frodo_sample_fu_337_S_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_we0 <= grp_frodo_sample_fu_337_S_we0;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln64_fu_499_p2 <= std_logic_vector(unsigned(i_3_reg_295) + unsigned(ap_const_lv13_8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state20, icmp_ln63_fu_482_p2)
    begin
        if (((icmp_ln63_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, icmp_ln63_fu_482_p2)
    begin
        if (((icmp_ln63_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_frodo_pack_fu_346_ap_start <= grp_frodo_pack_fu_346_ap_start_reg;
    grp_frodo_sample_fu_337_ap_start <= grp_frodo_sample_fu_337_ap_start_reg;
    grp_matrix_mult_AS_fu_315_ap_start <= grp_matrix_mult_AS_fu_315_ap_start_reg;
    grp_shake128_10240_fu_324_ap_start <= grp_shake128_10240_fu_324_ap_start_reg;
    grp_shake128_16_fu_307_ap_start <= grp_shake128_16_fu_307_ap_start_reg;
    grp_shake128_S_fu_330_ap_start <= grp_shake128_S_fu_330_ap_start_reg;
    i_14_fu_454_p2 <= std_logic_vector(unsigned(i_1_reg_273) + unsigned(ap_const_lv4_1));
    i_15_fu_471_p2 <= std_logic_vector(unsigned(i_2_reg_284) + unsigned(ap_const_lv4_1));
    i_16_fu_488_p2 <= std_logic_vector(unsigned(i_3_reg_295) + unsigned(ap_const_lv13_1));
    i_fu_382_p2 <= std_logic_vector(unsigned(i_0_reg_262) + unsigned(ap_const_lv3_1));
    icmp_ln31_fu_376_p2 <= "1" when (i_0_reg_262 = ap_const_lv3_7) else "0";
    icmp_ln36_fu_448_p2 <= "1" when (i_1_reg_273 = ap_const_lv4_8) else "0";
    icmp_ln44_fu_465_p2 <= "1" when (i_2_reg_284 = ap_const_lv4_8) else "0";
    icmp_ln63_fu_482_p2 <= "1" when (i_3_reg_295 = ap_const_lv13_12C8) else "0";
    lshr_ln_fu_422_p4 <= randomness_q1(15 downto 8);
    or_ln1_fu_432_p3 <= (trunc_ln32_fu_414_p1 & lshr_ln_fu_422_p4);
    or_ln32_1_fu_388_p3 <= (ap_const_lv1_1 & i_0_reg_262);
    or_ln32_2_fu_401_p3 <= (ap_const_lv1_1 & i_fu_382_p2);
    or_ln_fu_363_p3 <= (ap_const_lv7_5F & tmp_fu_353_p4);

    pk_address0_assign_proc : process(zext_ln46_reg_565, ap_CS_fsm_state20, grp_shake128_16_fu_307_input_r_address0, grp_frodo_pack_fu_346_b_address0, ap_CS_fsm_state10, ap_CS_fsm_state19, ap_CS_fsm_state17, zext_ln64_fu_494_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            pk_address0 <= zext_ln64_fu_494_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_address0 <= zext_ln46_reg_565(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_address0 <= grp_frodo_pack_fu_346_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_address0 <= grp_shake128_16_fu_307_input_r_address0;
        else 
            pk_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    pk_address1 <= grp_shake128_16_fu_307_input_r_address1;

    pk_ce0_assign_proc : process(ap_CS_fsm_state20, grp_shake128_16_fu_307_input_r_ce0, grp_frodo_pack_fu_346_b_ce0, ap_CS_fsm_state10, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_ce0 <= grp_frodo_pack_fu_346_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_ce0 <= grp_shake128_16_fu_307_input_r_ce0;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(grp_shake128_16_fu_307_input_r_ce1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pk_ce1 <= grp_shake128_16_fu_307_input_r_ce1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_d0_assign_proc : process(seedA_q0, grp_frodo_pack_fu_346_b_d0, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_d0 <= seedA_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_d0 <= grp_frodo_pack_fu_346_b_d0;
        else 
            pk_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pk_we0_assign_proc : process(grp_frodo_pack_fu_346_b_we0, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pk_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            pk_we0 <= grp_frodo_pack_fu_346_b_we0;
        else 
            pk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    randomness_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_376_p2, grp_shake128_S_fu_330_input_r_address0, ap_CS_fsm_state8, zext_ln32_fu_396_p1)
    begin
        if (((icmp_ln31_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            randomness_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif (((icmp_ln31_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            randomness_address0 <= zext_ln32_fu_396_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            randomness_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            randomness_address0 <= grp_shake128_S_fu_330_input_r_address0;
        else 
            randomness_address0 <= "XXXXX";
        end if; 
    end process;


    randomness_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln38_fu_460_p1, icmp_ln36_fu_448_p2, grp_shake128_S_fu_330_input_r_address1, ap_CS_fsm_state8, zext_ln32_2_fu_409_p1)
    begin
        if (((icmp_ln36_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            randomness_address1 <= zext_ln38_fu_460_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            randomness_address1 <= zext_ln32_2_fu_409_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            randomness_address1 <= grp_shake128_S_fu_330_input_r_address1;
        else 
            randomness_address1 <= "XXXXX";
        end if; 
    end process;


    randomness_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_376_p2, grp_shake128_S_fu_330_input_r_ce0, ap_CS_fsm_state8)
    begin
        if ((((icmp_ln31_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln31_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            randomness_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            randomness_ce0 <= grp_shake128_S_fu_330_input_r_ce0;
        else 
            randomness_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    randomness_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln36_fu_448_p2, grp_shake128_S_fu_330_input_r_ce1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln36_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            randomness_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            randomness_ce1 <= grp_shake128_S_fu_330_input_r_ce1;
        else 
            randomness_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seedA_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln46_fu_477_p1, grp_matrix_mult_AS_fu_315_seedA_address0, grp_shake128_S_fu_330_output_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seedA_address0 <= zext_ln46_fu_477_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seedA_address0 <= grp_shake128_S_fu_330_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seedA_address0 <= grp_matrix_mult_AS_fu_315_seedA_address0;
        else 
            seedA_address0 <= "XXX";
        end if; 
    end process;


    seedA_ce0_assign_proc : process(ap_CS_fsm_state9, grp_matrix_mult_AS_fu_315_seedA_ce0, grp_shake128_S_fu_330_output_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seedA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seedA_ce0 <= grp_shake128_S_fu_330_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            seedA_ce0 <= grp_matrix_mult_AS_fu_315_seedA_ce0;
        else 
            seedA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seedA_ce1_assign_proc : process(grp_shake128_S_fu_330_output_r_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seedA_ce1 <= grp_shake128_S_fu_330_output_r_ce1;
        else 
            seedA_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seedA_we0_assign_proc : process(grp_shake128_S_fu_330_output_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seedA_we0 <= grp_shake128_S_fu_330_output_r_we0;
        else 
            seedA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seedA_we1_assign_proc : process(grp_shake128_S_fu_330_output_r_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seedA_we1 <= grp_shake128_S_fu_330_output_r_we1;
        else 
            seedA_we1 <= ap_const_logic_0;
        end if; 
    end process;


    seedSE_address1_assign_proc : process(grp_shake128_10240_fu_324_input_r_address1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11, zext_ln32_1_fu_418_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seedSE_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seedSE_address1 <= zext_ln32_1_fu_418_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedSE_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            seedSE_address1 <= grp_shake128_10240_fu_324_input_r_address1;
        else 
            seedSE_address1 <= "XXXX";
        end if; 
    end process;


    seedSE_ce0_assign_proc : process(grp_shake128_10240_fu_324_input_r_ce0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            seedSE_ce0 <= grp_shake128_10240_fu_324_input_r_ce0;
        else 
            seedSE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seedSE_ce1_assign_proc : process(grp_shake128_10240_fu_324_input_r_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            seedSE_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            seedSE_ce1 <= grp_shake128_10240_fu_324_input_r_ce1;
        else 
            seedSE_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seedSE_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln29_fu_371_p1, or_ln1_fu_432_p3, shl_ln34_fu_441_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seedSE_d1 <= shl_ln34_fu_441_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seedSE_d1 <= or_ln1_fu_432_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedSE_d1 <= zext_ln29_fu_371_p1;
        else 
            seedSE_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seedSE_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            seedSE_we1 <= ap_const_logic_1;
        else 
            seedSE_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln34_fu_441_p2 <= std_logic_vector(shift_left(unsigned(randomness_q0),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));

    sk_address0_assign_proc : process(zext_ln38_reg_547, grp_shake128_16_fu_307_output_r_address0, grp_frodo_sample_fu_337_sk_S_address0, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13, zext_ln64_1_fu_505_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sk_address0 <= zext_ln64_1_fu_505_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_address0 <= zext_ln38_reg_547(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_address0 <= grp_frodo_sample_fu_337_sk_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_address0 <= grp_shake128_16_fu_307_output_r_address0;
        else 
            sk_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= grp_shake128_16_fu_307_output_r_address1;

    sk_ce0_assign_proc : process(grp_shake128_16_fu_307_output_r_ce0, grp_frodo_sample_fu_337_sk_S_ce0, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_ce0 <= grp_frodo_sample_fu_337_sk_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_ce0 <= grp_shake128_16_fu_307_output_r_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(grp_shake128_16_fu_307_output_r_ce1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_ce1 <= grp_shake128_16_fu_307_output_r_ce1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(pk_q0, randomness_q1, grp_shake128_16_fu_307_output_r_d0, grp_frodo_sample_fu_337_sk_S_d0, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            sk_d0 <= pk_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_d0 <= randomness_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_d0 <= grp_frodo_sample_fu_337_sk_S_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_d0 <= grp_shake128_16_fu_307_output_r_d0;
        else 
            sk_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    sk_d1 <= grp_shake128_16_fu_307_output_r_d1;

    sk_we0_assign_proc : process(grp_shake128_16_fu_307_output_r_we0, grp_frodo_sample_fu_337_sk_S_we0, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sk_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_we0 <= grp_frodo_sample_fu_337_sk_S_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_we0 <= grp_shake128_16_fu_307_output_r_we0;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(grp_shake128_16_fu_307_output_r_we1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sk_we1 <= grp_shake128_16_fu_307_output_r_we1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_353_p4 <= randomness_q0(15 downto 8);
    trunc_ln32_fu_414_p1 <= randomness_q0(8 - 1 downto 0);
    zext_ln29_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_363_p3),16));
    zext_ln32_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_518),64));
    zext_ln32_2_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln32_2_fu_401_p3),64));
    zext_ln32_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln32_1_fu_388_p3),64));
    zext_ln38_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_273),64));
    zext_ln46_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_284),64));
    zext_ln64_1_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_fu_499_p2),64));
    zext_ln64_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_295),64));
end behav;
