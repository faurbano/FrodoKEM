-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_sample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sk_S_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_S_ce0 : OUT STD_LOGIC;
    sk_S_we0 : OUT STD_LOGIC;
    sk_S_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_we0 : OUT STD_LOGIC;
    S_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    E_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    E_ce1 : OUT STD_LOGIC;
    E_we1 : OUT STD_LOGIC;
    E_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    entrada_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    entrada_ce0 : OUT STD_LOGIC;
    entrada_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    entrada_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    entrada_ce1 : OUT STD_LOGIC;
    entrada_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_sample is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_1400 : STD_LOGIC_VECTOR (12 downto 0) := "1010000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv14_1400 : STD_LOGIC_VECTOR (13 downto 0) := "01010000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_12D0 : STD_LOGIC_VECTOR (13 downto 0) := "01001011010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln56_fu_148_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln56_reg_224 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_158_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_232 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln57_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln56_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal entrada_load_reg_253 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal entrada_load_1_reg_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_fu_135_ap_start : STD_LOGIC;
    signal grp_sample_fu_135_ap_done : STD_LOGIC;
    signal grp_sample_fu_135_ap_idle : STD_LOGIC;
    signal grp_sample_fu_135_ap_ready : STD_LOGIC;
    signal grp_sample_fu_135_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sample_fu_142_ap_start : STD_LOGIC;
    signal grp_sample_fu_142_ap_done : STD_LOGIC;
    signal grp_sample_fu_142_ap_idle : STD_LOGIC;
    signal grp_sample_fu_142_ap_ready : STD_LOGIC;
    signal grp_sample_fu_142_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_124 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal grp_sample_fu_135_ap_start_reg : STD_LOGIC := '0';
    signal grp_sample_fu_142_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln59_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_fu_169_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_188_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_196_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln58_fu_209_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component sample IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    grp_sample_fu_135 : component sample
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_fu_135_ap_start,
        ap_done => grp_sample_fu_135_ap_done,
        ap_idle => grp_sample_fu_135_ap_idle,
        ap_ready => grp_sample_fu_135_ap_ready,
        s => entrada_load_reg_253,
        ap_return => grp_sample_fu_135_ap_return);

    grp_sample_fu_142 : component sample
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_fu_142_ap_start,
        ap_done => grp_sample_fu_142_ap_done,
        ap_idle => grp_sample_fu_142_ap_idle,
        ap_ready => grp_sample_fu_142_ap_ready,
        s => entrada_load_1_reg_258,
        ap_return => grp_sample_fu_142_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sample_fu_135_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_fu_135_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sample_fu_135_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sample_fu_135_ap_ready = ap_const_logic_1)) then 
                    grp_sample_fu_135_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sample_fu_142_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_fu_142_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sample_fu_142_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sample_fu_142_ap_ready = ap_const_logic_1)) then 
                    grp_sample_fu_142_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                i_0_reg_124 <= i_reg_232;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_124 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                entrada_load_1_reg_258 <= entrada_q1;
                entrada_load_reg_253 <= entrada_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_232 <= i_fu_158_p2;
                    zext_ln56_reg_224(12 downto 0) <= zext_ln56_fu_148_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln57_reg_237(12 downto 0) <= zext_ln57_fu_164_p1(12 downto 0);
            end if;
        end if;
    end process;
    zext_ln56_reg_224(13) <= '0';
    zext_ln57_reg_237(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln56_fu_152_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln56_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    E_address1 <= zext_ln57_reg_237(13 - 1 downto 0);

    E_ce1_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            E_ce1 <= ap_const_logic_1;
        else 
            E_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        E_d1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_sample_fu_142_ap_return),16));


    E_we1_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            E_we1 <= ap_const_logic_1;
        else 
            E_we1 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= zext_ln57_reg_237(13 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_d0 <= grp_sample_fu_135_ap_return;

    S_we0_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            S_we0 <= ap_const_logic_1;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln58_fu_209_p2 <= std_logic_vector(unsigned(ap_const_lv14_12D0) + unsigned(zext_ln56_reg_224));
    add_ln59_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv14_1400) + unsigned(zext_ln56_fu_148_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_on_subcall_done_assign_proc : process(grp_sample_fu_135_ap_done, grp_sample_fu_142_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_sample_fu_142_ap_done = ap_const_logic_0) or (grp_sample_fu_135_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln56_fu_152_p2)
    begin
        if ((((icmp_ln56_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln56_fu_152_p2)
    begin
        if (((icmp_ln56_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    entrada_address0 <= zext_ln57_fu_164_p1(14 - 1 downto 0);
    entrada_address1 <= zext_ln59_fu_175_p1(14 - 1 downto 0);

    entrada_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            entrada_ce0 <= ap_const_logic_1;
        else 
            entrada_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    entrada_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            entrada_ce1 <= ap_const_logic_1;
        else 
            entrada_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_sample_fu_135_ap_start <= grp_sample_fu_135_ap_start_reg;
    grp_sample_fu_142_ap_start <= grp_sample_fu_142_ap_start_reg;
    i_fu_158_p2 <= std_logic_vector(unsigned(i_0_reg_124) + unsigned(ap_const_lv13_1));
    icmp_ln56_fu_152_p2 <= "1" when (i_0_reg_124 = ap_const_lv13_1400) else "0";
    p_1_fu_188_p3 <= 
        ap_const_lv8_FF when (tmp_2_fu_180_p3(0) = '1') else 
        ap_const_lv8_0;
    sk_S_address0 <= zext_ln58_fu_214_p1(14 - 1 downto 0);

    sk_S_ce0_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            sk_S_ce0 <= ap_const_logic_1;
        else 
            sk_S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sk_S_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_196_p3),16));


    sk_S_we0_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            sk_S_we0 <= ap_const_logic_1;
        else 
            sk_S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_180_p3 <= grp_sample_fu_135_ap_return(4 downto 4);
    tmp_5_fu_196_p3 <= (grp_sample_fu_135_ap_return & p_1_fu_188_p3);
    zext_ln56_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_124),14));
    zext_ln57_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_124),64));
    zext_ln58_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_209_p2),64));
    zext_ln59_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_fu_169_p2),64));
end behav;
