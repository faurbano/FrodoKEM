-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult_AS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_we1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    S_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    S_ce1 : OUT STD_LOGIC;
    S_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    seedA_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    seedA_ce0 : OUT STD_LOGIC;
    seedA_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult_AS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_row_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_row_ce0 : STD_LOGIC;
    signal A_row_we0 : STD_LOGIC;
    signal A_row_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_row_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_row_ce1 : STD_LOGIC;
    signal A_row_we1 : STD_LOGIC;
    signal A_row_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_0_reg_233 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_0_0_reg_244 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln14_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_11_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_11_reg_504 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln_fu_328_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_reg_509 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_shake128_640_fu_256_ap_ready : STD_LOGIC;
    signal grp_shake128_640_fu_256_ap_done : STD_LOGIC;
    signal icmp_ln22_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_fu_342_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_518 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln22_fu_348_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln22_reg_523 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln27_fu_380_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln27_reg_528 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln24_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_534_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_436_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal A_row_load_reg_563 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal S_load_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln27_1_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln27_1_reg_573 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln27_4_fu_455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln27_4_fu_455_p2 : signal is "no";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal B_addr_reg_583 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal seed_A_origin_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_A_origin_ce0 : STD_LOGIC;
    signal seed_A_origin_we0 : STD_LOGIC;
    signal seed_A_origin_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_origin_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_origin_ce1 : STD_LOGIC;
    signal seed_A_origin_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_640_fu_256_ap_start : STD_LOGIC;
    signal grp_shake128_640_fu_256_ap_idle : STD_LOGIC;
    signal grp_shake128_640_fu_256_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_640_fu_256_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_640_fu_256_output_r_we0 : STD_LOGIC;
    signal grp_shake128_640_fu_256_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_640_fu_256_output_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_640_fu_256_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_640_fu_256_output_r_we1 : STD_LOGIC;
    signal grp_shake128_640_fu_256_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_640_fu_256_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_640_fu_256_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_640_fu_256_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_640_fu_256_input_r_ce1 : STD_LOGIC;
    signal i_0_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_210 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_0_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_shake128_640_fu_256_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln15_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_1_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln27_1_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_3_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_317_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln15_fu_269_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln20_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_303_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln27_fu_352_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln8_fu_356_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln27_1_fu_368_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln27_5_fu_376_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln27_4_fu_364_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_0_cast2_fu_392_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln27_2_fu_401_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln24_fu_411_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_fu_417_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln27_1_fu_426_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln27_1_fu_446_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln27_1_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_476_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln29_fu_460_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component shake128_640 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_640_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS_A_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_AS_secud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    A_row_U : component matrix_mult_AS_A_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_row_address0,
        ce0 => A_row_ce0,
        we0 => A_row_we0,
        d0 => grp_shake128_640_fu_256_output_r_d0,
        q0 => A_row_q0,
        address1 => A_row_address1,
        ce1 => A_row_ce1,
        we1 => A_row_we1,
        d1 => grp_shake128_640_fu_256_output_r_d1,
        q1 => A_row_q1);

    seed_A_origin_U : component matrix_mult_AS_secud
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_A_origin_address0,
        ce0 => seed_A_origin_ce0,
        we0 => seed_A_origin_we0,
        d0 => seed_A_origin_d0,
        q0 => seed_A_origin_q0,
        address1 => grp_shake128_640_fu_256_input_r_address1,
        ce1 => seed_A_origin_ce1,
        q1 => seed_A_origin_q1);

    grp_shake128_640_fu_256 : component shake128_640
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_640_fu_256_ap_start,
        ap_done => grp_shake128_640_fu_256_ap_done,
        ap_idle => grp_shake128_640_fu_256_ap_idle,
        ap_ready => grp_shake128_640_fu_256_ap_ready,
        output_r_address0 => grp_shake128_640_fu_256_output_r_address0,
        output_r_ce0 => grp_shake128_640_fu_256_output_r_ce0,
        output_r_we0 => grp_shake128_640_fu_256_output_r_we0,
        output_r_d0 => grp_shake128_640_fu_256_output_r_d0,
        output_r_address1 => grp_shake128_640_fu_256_output_r_address1,
        output_r_ce1 => grp_shake128_640_fu_256_output_r_ce1,
        output_r_we1 => grp_shake128_640_fu_256_output_r_we1,
        output_r_d1 => grp_shake128_640_fu_256_output_r_d1,
        input_r_address0 => grp_shake128_640_fu_256_input_r_address0,
        input_r_ce0 => grp_shake128_640_fu_256_input_r_ce0,
        input_r_q0 => seed_A_origin_q0,
        input_r_address1 => grp_shake128_640_fu_256_input_r_address1,
        input_r_ce1 => grp_shake128_640_fu_256_input_r_ce1,
        input_r_q1 => seed_A_origin_q1);

    frodo_keygen_640_dEe_U37 : component frodo_keygen_640_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => S_load_reg_568,
        din1 => A_row_load_reg_563,
        din2 => mul_ln27_1_reg_573,
        dout => grp_fu_476_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln22_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln22_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake128_640_fu_256_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_640_fu_256_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_shake128_640_fu_256_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_640_fu_256_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_640_fu_256_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_198 <= i_fu_285_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_198 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_210 <= ap_const_lv10_0;
            elsif (((icmp_ln22_fu_336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_1_reg_210 <= i_11_reg_504;
            end if; 
        end if;
    end process;

    j_0_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_0_0_reg_233 <= ap_const_lv10_0;
            elsif (((icmp_ln24_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_0_reg_233 <= add_ln24_fu_436_p2;
            end if; 
        end if;
    end process;

    k_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_0_reg_222 <= k_reg_518;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_shake128_640_fu_256_ap_done = ap_const_logic_1))) then 
                k_0_reg_222 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_0_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_0_0_reg_244 <= ap_const_lv16_0;
            elsif (((icmp_ln24_reg_534_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_0_0_reg_244 <= add_ln27_4_fu_455_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_534 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_row_load_reg_563 <= A_row_q0;
                S_load_reg_568 <= S_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                B_addr_reg_583 <= zext_ln29_fu_464_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    add_ln27_reg_528(12 downto 7) <= add_ln27_fu_380_p2(12 downto 7);
                    zext_ln22_reg_523(3 downto 0) <= zext_ln22_fu_348_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_11_reg_504 <= i_11_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_reg_534 <= icmp_ln24_fu_386_p2;
                icmp_ln24_reg_534_pp0_iter1_reg <= icmp_ln24_reg_534;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_reg_518 <= k_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_534 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln27_1_reg_573 <= mul_ln27_1_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_shake128_640_fu_256_ap_done = ap_const_logic_1))) then
                    shl_ln_reg_509(12 downto 3) <= shl_ln_fu_328_p3(12 downto 3);
            end if;
        end if;
    end process;
    shl_ln_reg_509(2 downto 0) <= "000";
    zext_ln22_reg_523(12 downto 4) <= "000000000";
    add_ln27_reg_528(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln14_fu_263_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_shake128_640_fu_256_ap_done, icmp_ln22_fu_336_p2, ap_CS_fsm_state7, icmp_ln24_fu_386_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln18_fu_291_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln14_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln18_fu_291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_shake128_640_fu_256_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln22_fu_336_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln24_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln24_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    A_row_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_shake128_640_fu_256_output_r_address0, zext_ln27_fu_396_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_row_address0 <= zext_ln27_fu_396_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_address0 <= grp_shake128_640_fu_256_output_r_address0;
        else 
            A_row_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_row_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_shake128_640_fu_256_output_r_address1, ap_block_pp0_stage0, zext_ln27_2_fu_421_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_row_address1 <= zext_ln27_2_fu_421_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_address1 <= grp_shake128_640_fu_256_output_r_address1;
        else 
            A_row_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_row_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_shake128_640_fu_256_output_r_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_row_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_ce0 <= grp_shake128_640_fu_256_output_r_ce0;
        else 
            A_row_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_row_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_shake128_640_fu_256_output_r_ce1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_row_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_ce1 <= grp_shake128_640_fu_256_output_r_ce1;
        else 
            A_row_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_row_we0_assign_proc : process(ap_CS_fsm_state6, grp_shake128_640_fu_256_output_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_we0 <= grp_shake128_640_fu_256_output_r_we0;
        else 
            A_row_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_row_we1_assign_proc : process(ap_CS_fsm_state6, grp_shake128_640_fu_256_output_r_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_row_we1 <= grp_shake128_640_fu_256_output_r_we1;
        else 
            A_row_we1 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln29_fu_464_p1(13 - 1 downto 0);
    B_address1 <= B_addr_reg_583;

    B_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    B_d1 <= std_logic_vector(unsigned(B_q0) + unsigned(sum_0_0_reg_244));

    B_we1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            B_we1 <= ap_const_logic_1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= zext_ln27_1_fu_406_p1(13 - 1 downto 0);
    S_address1 <= zext_ln27_3_fu_431_p1(13 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_269_p2 <= std_logic_vector(unsigned(i_0_reg_198) + unsigned(ap_const_lv4_F));
    add_ln24_fu_436_p2 <= std_logic_vector(unsigned(j_0_0_reg_233) + unsigned(ap_const_lv10_2));
    add_ln27_1_fu_426_p2 <= std_logic_vector(unsigned(zext_ln24_fu_417_p1) + unsigned(add_ln27_reg_528));
    add_ln27_2_fu_401_p2 <= std_logic_vector(unsigned(j_0_0_cast2_fu_392_p1) + unsigned(add_ln27_reg_528));
    add_ln27_4_fu_455_p2 <= std_logic_vector(unsigned(sum_0_0_reg_244) + unsigned(grp_fu_476_p3));
    add_ln27_fu_380_p2 <= std_logic_vector(unsigned(zext_ln27_5_fu_376_p1) + unsigned(zext_ln27_4_fu_364_p1));
    add_ln29_fu_460_p2 <= std_logic_vector(unsigned(zext_ln22_reg_523) + unsigned(shl_ln_reg_509));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln24_fu_386_p2)
    begin
        if ((icmp_ln24_fu_386_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln18_fu_291_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln18_fu_291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln18_fu_291_p2)
    begin
        if (((icmp_ln18_fu_291_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_shake128_640_fu_256_ap_start <= grp_shake128_640_fu_256_ap_start_reg;
    i_11_fu_297_p2 <= std_logic_vector(unsigned(i_1_reg_210) + unsigned(ap_const_lv10_1));
    i_fu_285_p2 <= std_logic_vector(unsigned(i_0_reg_198) + unsigned(ap_const_lv4_1));
    icmp_ln14_fu_263_p2 <= "1" when (i_0_reg_198 = ap_const_lv4_9) else "0";
    icmp_ln18_fu_291_p2 <= "1" when (i_1_reg_210 = ap_const_lv10_280) else "0";
    icmp_ln22_fu_336_p2 <= "1" when (k_0_reg_222 = ap_const_lv4_8) else "0";
    icmp_ln24_fu_386_p2 <= "1" when (j_0_0_reg_233 = ap_const_lv10_280) else "0";
    j_0_0_cast2_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_233),13));
    k_fu_342_p2 <= std_logic_vector(unsigned(k_0_reg_222) + unsigned(ap_const_lv4_1));
    mul_ln27_1_fu_446_p0 <= S_q1;
    mul_ln27_1_fu_446_p1 <= A_row_q1;
    mul_ln27_1_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln27_1_fu_446_p0) * signed(mul_ln27_1_fu_446_p1))), 16));
    or_ln24_fu_411_p2 <= (j_0_0_reg_233 or ap_const_lv10_1);
    or_ln_fu_317_p4 <= ((trunc_ln20_fu_313_p1 & ap_const_lv6_0) & trunc_ln_fu_303_p4);
    seedA_address0 <= zext_ln15_fu_275_p1(3 - 1 downto 0);

    seedA_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedA_ce0 <= ap_const_logic_1;
        else 
            seedA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_origin_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_shake128_640_fu_256_input_r_address0, zext_ln15_1_fu_280_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_A_origin_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_A_origin_address0 <= zext_ln15_1_fu_280_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_A_origin_address0 <= grp_shake128_640_fu_256_input_r_address0;
        else 
            seed_A_origin_address0 <= "XXXX";
        end if; 
    end process;


    seed_A_origin_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_shake128_640_fu_256_input_r_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seed_A_origin_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_A_origin_ce0 <= grp_shake128_640_fu_256_input_r_ce0;
        else 
            seed_A_origin_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_origin_ce1_assign_proc : process(ap_CS_fsm_state6, grp_shake128_640_fu_256_input_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_A_origin_ce1 <= grp_shake128_640_fu_256_input_r_ce1;
        else 
            seed_A_origin_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_origin_d0_assign_proc : process(seedA_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, or_ln_fu_317_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_A_origin_d0 <= or_ln_fu_317_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            seed_A_origin_d0 <= seedA_q0;
        else 
            seed_A_origin_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_origin_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln18_fu_291_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln18_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            seed_A_origin_we0 <= ap_const_logic_1;
        else 
            seed_A_origin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln27_1_fu_368_p3 <= (trunc_ln27_fu_352_p1 & ap_const_lv7_0);
    shl_ln8_fu_356_p3 <= (trunc_ln27_fu_352_p1 & ap_const_lv9_0);
    shl_ln_fu_328_p3 <= (i_1_reg_210 & ap_const_lv3_0);
    trunc_ln20_fu_313_p1 <= i_1_reg_210(8 - 1 downto 0);
    trunc_ln27_fu_352_p1 <= k_0_reg_222(3 - 1 downto 0);
    trunc_ln_fu_303_p4 <= i_1_reg_210(9 downto 8);
    zext_ln15_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_198),64));
    zext_ln15_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_269_p2),64));
    zext_ln22_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_222),13));
    zext_ln24_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln24_fu_411_p2),13));
    zext_ln27_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_fu_401_p2),64));
    zext_ln27_2_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln24_fu_411_p2),64));
    zext_ln27_3_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_426_p2),64));
    zext_ln27_4_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_356_p3),13));
    zext_ln27_5_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_1_fu_368_p3),13));
    zext_ln27_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_233),64));
    zext_ln29_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_460_p2),64));
end behav;
