-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake128_10240 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of shake128_10240 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1F00 : STD_LOGIC_VECTOR (15 downto 0) := "0001111100000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv14_54 : STD_LOGIC_VECTOR (13 downto 0) := "00000001010100";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv14_27B4 : STD_LOGIC_VECTOR (13 downto 0) := "10011110110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_862 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_724_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_724_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_869 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_876 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_883 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_890 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_897 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_904 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_911 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_918 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_925 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_932 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_946 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_953 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_960 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_967 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_974 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_995 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1002 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_1015_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_1501 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln455_fu_1021_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln455_reg_1506 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_1025_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_reg_1513 : STD_LOGIC_VECTOR (2 downto 0);
    signal input_load_15_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_load_16_reg_1540 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_1_11_fu_1154_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_1_12_fu_1161_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_15_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal s_21_reg_1574 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_22_reg_1579 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_23_reg_1584 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_24_reg_1589 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_10_fu_1228_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_reg_1597 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln7_fu_1239_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln7_reg_1602 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln470_fu_1222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_1608 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_reg_1613 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln477_fu_1314_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal nblocks_fu_1320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_9_fu_1372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_reg_1631 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal shl_ln6_fu_1383_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln6_reg_1636 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln483_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_reg_1642 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_reg_1647 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_724_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_17 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_18 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_19 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_20 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_21 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_22 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_23 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_return_24 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_0_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_0_reg_265 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_277 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_24_0_reg_288 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_23_0_reg_300 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_22_0_reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_21_0_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_20_0_reg_336 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_19_0_reg_348 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_18_0_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_17_0_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_16_0_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_15_0_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_14_0_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_13_0_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_12_0_reg_432 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_11_0_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_10_0_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_9_0_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_8_0_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_7_0_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_6_0_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_5_0_reg_516 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_0_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_0_reg_540 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_0_reg_552 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_2_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_2_reg_573 : STD_LOGIC_VECTOR (63 downto 0);
    signal nblocks_0_reg_584 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0_rec_reg_596 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_i16_0_phi_fu_612_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i16_0_reg_608 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_phi_mux_p_Val2_3_phi_fu_622_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_2_phi_fu_670_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_666 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_p_Val2_s_phi_fu_680_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_724_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln468_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln455_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln456_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln457_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln458_fu_1064_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln472_1_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln473_1_fu_1289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln474_1_fu_1341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln475_1_fu_1361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln485_1_fu_1401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln486_1_fu_1433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln487_1_fu_1473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln488_1_fu_1493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln472_fu_1234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln485_fu_1378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln456_fu_1038_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln457_fu_1049_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln458_fu_1059_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_31_fu_1107_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_18_1_fu_1111_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_30_fu_1093_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_17_1_fu_1097_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_29_fu_1081_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_16_1_fu_1084_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1069_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_15_1_fu_1072_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln459_fu_1141_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_14_fu_1121_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_0_12_fu_1148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_32_fu_1168_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_1_fu_1172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_1182_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln461_fu_1190_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln472_fu_1247_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln472_fu_1251_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln473_fu_1273_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln473_fu_1279_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln473_fu_1283_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln474_fu_1326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln474_fu_1331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln474_fu_1335_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln475_fu_1346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln475_fu_1351_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln475_fu_1355_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln485_fu_1391_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln485_fu_1395_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln486_fu_1417_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln486_fu_1423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln486_fu_1427_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln487_fu_1458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln487_fu_1463_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln487_fu_1467_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln488_fu_1478_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln488_fu_1483_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln488_fu_1487_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_1618 : BOOLEAN;
    signal ap_condition_1640 : BOOLEAN;

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_5_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_6_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_7_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_8_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_9_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_10_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_11_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_12_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_13_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_14_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_15_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_16_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_17_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_18_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_19_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_20_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_21_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_22_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_23_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_24_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePer_fu_724 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_724_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_724_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_724_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_724_ap_ready,
        state_0_read => s_0_2_reg_573,
        state_1_read => s_1_2_reg_562,
        state_2_read => s_2_0_reg_552,
        state_3_read => s_3_0_reg_540,
        state_4_read => s_4_0_reg_528,
        state_5_read => s_5_0_reg_516,
        state_6_read => s_6_0_reg_504,
        state_7_read => s_7_0_reg_492,
        state_8_read => s_8_0_reg_480,
        state_9_read => s_9_0_reg_468,
        state_10_read => s_10_0_reg_456,
        state_11_read => s_11_0_reg_444,
        state_12_read => s_12_0_reg_432,
        state_13_read => s_13_0_reg_420,
        state_14_read => s_14_0_reg_408,
        state_15_read => s_15_0_reg_396,
        state_16_read => s_16_0_reg_384,
        state_17_read => s_17_0_reg_372,
        state_18_read => s_18_0_reg_360,
        state_19_read => s_19_0_reg_348,
        state_20_read => s_20_0_reg_336,
        state_21_read => s_21_0_reg_324,
        state_22_read => s_22_0_reg_312,
        state_23_read => s_23_0_reg_300,
        state_24_read => s_24_0_reg_288,
        ap_return_0 => grp_KeccakF1600_StatePer_fu_724_ap_return_0,
        ap_return_1 => grp_KeccakF1600_StatePer_fu_724_ap_return_1,
        ap_return_2 => grp_KeccakF1600_StatePer_fu_724_ap_return_2,
        ap_return_3 => grp_KeccakF1600_StatePer_fu_724_ap_return_3,
        ap_return_4 => grp_KeccakF1600_StatePer_fu_724_ap_return_4,
        ap_return_5 => grp_KeccakF1600_StatePer_fu_724_ap_return_5,
        ap_return_6 => grp_KeccakF1600_StatePer_fu_724_ap_return_6,
        ap_return_7 => grp_KeccakF1600_StatePer_fu_724_ap_return_7,
        ap_return_8 => grp_KeccakF1600_StatePer_fu_724_ap_return_8,
        ap_return_9 => grp_KeccakF1600_StatePer_fu_724_ap_return_9,
        ap_return_10 => grp_KeccakF1600_StatePer_fu_724_ap_return_10,
        ap_return_11 => grp_KeccakF1600_StatePer_fu_724_ap_return_11,
        ap_return_12 => grp_KeccakF1600_StatePer_fu_724_ap_return_12,
        ap_return_13 => grp_KeccakF1600_StatePer_fu_724_ap_return_13,
        ap_return_14 => grp_KeccakF1600_StatePer_fu_724_ap_return_14,
        ap_return_15 => grp_KeccakF1600_StatePer_fu_724_ap_return_15,
        ap_return_16 => grp_KeccakF1600_StatePer_fu_724_ap_return_16,
        ap_return_17 => grp_KeccakF1600_StatePer_fu_724_ap_return_17,
        ap_return_18 => grp_KeccakF1600_StatePer_fu_724_ap_return_18,
        ap_return_19 => grp_KeccakF1600_StatePer_fu_724_ap_return_19,
        ap_return_20 => grp_KeccakF1600_StatePer_fu_724_ap_return_20,
        ap_return_21 => grp_KeccakF1600_StatePer_fu_724_ap_return_21,
        ap_return_22 => grp_KeccakF1600_StatePer_fu_724_ap_return_22,
        ap_return_23 => grp_KeccakF1600_StatePer_fu_724_ap_return_23,
        ap_return_24 => grp_KeccakF1600_StatePer_fu_724_ap_return_24);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_724_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_724_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln468_fu_1200_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln468_fu_1200_p2 = ap_const_lv1_0)))) then 
                    grp_KeccakF1600_StatePer_fu_724_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_724_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_724_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i16_0_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i16_0_reg_608 <= i_10_reg_1597;
            elsif (((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i16_0_reg_608 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_1_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_277 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_reg_277 <= i_reg_1501;
            end if; 
        end if;
    end process;

    i_2_reg_666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_666 <= i_9_reg_1631;
            elsif (((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_2_reg_666 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    nblocks_0_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                nblocks_0_reg_584 <= nblocks_fu_1320_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                nblocks_0_reg_584 <= ap_const_lv7_79;
            end if; 
        end if;
    end process;

    p_0_rec_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                p_0_rec_reg_596 <= add_ln477_fu_1314_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_0_rec_reg_596 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    s_0_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_0_0_reg_265 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                s_0_0_reg_265 <= s_1_12_fu_1161_p3;
            end if; 
        end if;
    end process;

    s_0_2_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_0_2_reg_573 <= reg_862;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_0_2_reg_573 <= s_0_0_reg_265;
            end if; 
        end if;
    end process;

    s_10_0_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_10_0_reg_456 <= reg_932;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_10_0_reg_456 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_11_0_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_11_0_reg_444 <= reg_939;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_11_0_reg_444 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_12_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_12_0_reg_432 <= reg_946;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_12_0_reg_432 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_13_0_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_13_0_reg_420 <= reg_953;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_13_0_reg_420 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_14_0_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_14_0_reg_408 <= reg_960;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_14_0_reg_408 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_15_0_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_15_0_reg_396 <= reg_967;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_15_0_reg_396 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_16_0_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_16_0_reg_384 <= reg_974;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_16_0_reg_384 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_17_0_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_17_0_reg_372 <= reg_981;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_17_0_reg_372 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_18_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_18_0_reg_360 <= reg_988;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_18_0_reg_360 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_19_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_19_0_reg_348 <= reg_995;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_19_0_reg_348 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_1_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_1_0_reg_253 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                s_1_0_reg_253 <= s_1_11_fu_1154_p3;
            end if; 
        end if;
    end process;

    s_1_2_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_1_2_reg_562 <= reg_869;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_1_2_reg_562 <= s_1_0_reg_253;
            end if; 
        end if;
    end process;

    s_20_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_20_0_reg_336 <= reg_1002;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_20_0_reg_336 <= ap_const_lv64_8000000000000000;
            end if; 
        end if;
    end process;

    s_21_0_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_21_0_reg_324 <= s_21_reg_1574;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_21_0_reg_324 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_22_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_22_0_reg_312 <= s_22_reg_1579;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_22_0_reg_312 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_23_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_23_0_reg_300 <= s_23_reg_1584;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_23_0_reg_300 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_24_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_24_0_reg_288 <= s_24_reg_1589;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_24_0_reg_288 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_2_0_reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_2_0_reg_552 <= reg_876;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_2_0_reg_552 <= p_Result_15_fu_1196_p1;
            end if; 
        end if;
    end process;

    s_3_0_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_3_0_reg_540 <= reg_883;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_3_0_reg_540 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_4_0_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_4_0_reg_528 <= reg_890;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_4_0_reg_528 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_5_0_reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_5_0_reg_516 <= reg_897;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_5_0_reg_516 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_6_0_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_6_0_reg_504 <= reg_904;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_6_0_reg_504 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_7_0_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_7_0_reg_492 <= reg_911;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_7_0_reg_492 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_8_0_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_8_0_reg_480 <= reg_918;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_8_0_reg_480 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_9_0_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then 
                s_9_0_reg_468 <= reg_925;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_9_0_reg_468 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_10_reg_1597 <= i_10_fu_1228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_9_reg_1631 <= i_9_fu_1372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1501 <= i_fu_1015_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_load_15_reg_1534 <= input_r_q0;
                input_load_16_reg_1540 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_0))) then
                p_Result_10_reg_1647 <= ap_phi_mux_p_Val2_s_phi_fu_680_p42(63 downto 48);
                p_Result_9_reg_1642 <= ap_phi_mux_p_Val2_s_phi_fu_680_p42(47 downto 32);
                    shl_ln6_reg_1636(6 downto 2) <= shl_ln6_fu_1383_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_0))) then
                p_Result_12_reg_1608 <= ap_phi_mux_p_Val2_3_phi_fu_622_p42(47 downto 32);
                p_Result_13_reg_1613 <= ap_phi_mux_p_Val2_3_phi_fu_622_p42(63 downto 48);
                    shl_ln7_reg_1602(6 downto 2) <= shl_ln7_fu_1239_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then
                reg_1002 <= grp_KeccakF1600_StatePer_fu_724_ap_return_20;
                reg_862 <= grp_KeccakF1600_StatePer_fu_724_ap_return_0;
                reg_869 <= grp_KeccakF1600_StatePer_fu_724_ap_return_1;
                reg_876 <= grp_KeccakF1600_StatePer_fu_724_ap_return_2;
                reg_883 <= grp_KeccakF1600_StatePer_fu_724_ap_return_3;
                reg_890 <= grp_KeccakF1600_StatePer_fu_724_ap_return_4;
                reg_897 <= grp_KeccakF1600_StatePer_fu_724_ap_return_5;
                reg_904 <= grp_KeccakF1600_StatePer_fu_724_ap_return_6;
                reg_911 <= grp_KeccakF1600_StatePer_fu_724_ap_return_7;
                reg_918 <= grp_KeccakF1600_StatePer_fu_724_ap_return_8;
                reg_925 <= grp_KeccakF1600_StatePer_fu_724_ap_return_9;
                reg_932 <= grp_KeccakF1600_StatePer_fu_724_ap_return_10;
                reg_939 <= grp_KeccakF1600_StatePer_fu_724_ap_return_11;
                reg_946 <= grp_KeccakF1600_StatePer_fu_724_ap_return_12;
                reg_953 <= grp_KeccakF1600_StatePer_fu_724_ap_return_13;
                reg_960 <= grp_KeccakF1600_StatePer_fu_724_ap_return_14;
                reg_967 <= grp_KeccakF1600_StatePer_fu_724_ap_return_15;
                reg_974 <= grp_KeccakF1600_StatePer_fu_724_ap_return_16;
                reg_981 <= grp_KeccakF1600_StatePer_fu_724_ap_return_17;
                reg_988 <= grp_KeccakF1600_StatePer_fu_724_ap_return_18;
                reg_995 <= grp_KeccakF1600_StatePer_fu_724_ap_return_19;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                s_21_reg_1574 <= grp_KeccakF1600_StatePer_fu_724_ap_return_21;
                s_22_reg_1579 <= grp_KeccakF1600_StatePer_fu_724_ap_return_22;
                s_23_reg_1584 <= grp_KeccakF1600_StatePer_fu_724_ap_return_23;
                s_24_reg_1589 <= grp_KeccakF1600_StatePer_fu_724_ap_return_24;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln453_fu_1009_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1513(2) <= shl_ln_fu_1025_p3(2);
                trunc_ln455_reg_1506 <= trunc_ln455_fu_1021_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1513(1 downto 0) <= "00";
    shl_ln7_reg_1602(1 downto 0) <= "00";
    shl_ln6_reg_1636(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, grp_KeccakF1600_StatePer_fu_724_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state2, icmp_ln453_fu_1009_p2, ap_CS_fsm_state8, icmp_ln470_fu_1222_p2, ap_CS_fsm_state11, icmp_ln483_fu_1366_p2, ap_CS_fsm_state6, icmp_ln468_fu_1200_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln453_fu_1009_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln468_fu_1200_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((grp_KeccakF1600_StatePer_fu_724_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln472_fu_1251_p2 <= std_logic_vector(unsigned(p_0_rec_reg_596) + unsigned(zext_ln472_fu_1247_p1));
    add_ln473_fu_1283_p2 <= std_logic_vector(unsigned(p_0_rec_reg_596) + unsigned(zext_ln473_fu_1279_p1));
    add_ln474_fu_1335_p2 <= std_logic_vector(unsigned(p_0_rec_reg_596) + unsigned(zext_ln474_fu_1331_p1));
    add_ln475_fu_1355_p2 <= std_logic_vector(unsigned(p_0_rec_reg_596) + unsigned(zext_ln475_fu_1351_p1));
    add_ln477_fu_1314_p2 <= std_logic_vector(unsigned(p_0_rec_reg_596) + unsigned(ap_const_lv14_54));
    add_ln485_fu_1395_p2 <= std_logic_vector(signed(ap_const_lv14_27B4) + signed(zext_ln485_fu_1391_p1));
    add_ln486_fu_1427_p2 <= std_logic_vector(signed(ap_const_lv14_27B4) + signed(zext_ln486_fu_1423_p1));
    add_ln487_fu_1467_p2 <= std_logic_vector(signed(ap_const_lv14_27B4) + signed(zext_ln487_fu_1463_p1));
    add_ln488_fu_1487_p2 <= std_logic_vector(signed(ap_const_lv14_27B4) + signed(zext_ln488_fu_1483_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_1618_assign_proc : process(ap_phi_mux_i16_0_phi_fu_612_p4)
    begin
                ap_condition_1618 <= (not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_13)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_12)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_11)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_1)));
    end process;


    ap_condition_1640_assign_proc : process(ap_phi_mux_i_2_phi_fu_670_p4)
    begin
                ap_condition_1640 <= (not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_13)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_12)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_11)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln483_fu_1366_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i16_0_phi_fu_612_p4 <= i16_0_reg_608;
    ap_phi_mux_i_2_phi_fu_670_p4 <= i_2_reg_666;

    ap_phi_mux_p_Val2_3_phi_fu_622_p42_assign_proc : process(reg_862, reg_869, reg_876, reg_883, reg_890, reg_897, reg_904, reg_911, reg_918, reg_925, reg_932, reg_939, reg_946, reg_953, reg_960, reg_967, reg_974, reg_981, reg_988, reg_995, reg_1002, ap_CS_fsm_state8, icmp_ln470_fu_1222_p2, ap_phi_mux_i16_0_phi_fu_612_p4, ap_condition_1618)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_0))) then
            if ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_862;
            elsif ((ap_const_boolean_1 = ap_condition_1618)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_1002;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_995;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_988;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_981;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_974;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_967;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_960;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_953;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_946;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_939;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_932;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_925;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_918;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_911;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_904;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_897;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_890;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_883;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_876;
            elsif ((ap_phi_mux_i16_0_phi_fu_612_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= reg_869;
            else 
                ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_3_phi_fu_622_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_680_p42_assign_proc : process(reg_862, reg_869, reg_876, reg_883, reg_890, reg_897, reg_904, reg_911, reg_918, reg_925, reg_932, reg_939, reg_946, reg_953, reg_960, reg_967, reg_974, reg_981, reg_988, reg_995, reg_1002, ap_CS_fsm_state11, icmp_ln483_fu_1366_p2, ap_phi_mux_i_2_phi_fu_670_p4, ap_condition_1640)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_0))) then
            if ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_862;
            elsif ((ap_const_boolean_1 = ap_condition_1640)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_1002;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_995;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_988;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_981;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_974;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_967;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_960;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_953;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_946;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_939;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_932;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_925;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_918;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_911;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_904;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_897;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_890;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_883;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_876;
            elsif ((ap_phi_mux_i_2_phi_fu_670_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= reg_869;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_680_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln483_fu_1366_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_29_fu_1081_p1 <= input_load_16_reg_1540(8 - 1 downto 0);
    empty_30_fu_1093_p1 <= input_r_q0(8 - 1 downto 0);
    empty_31_fu_1107_p1 <= input_r_q1(8 - 1 downto 0);
    empty_32_fu_1168_p1 <= input_r_q0(8 - 1 downto 0);
    empty_fu_1069_p1 <= input_load_15_reg_1534(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_724_ap_start <= grp_KeccakF1600_StatePer_fu_724_ap_start_reg;
    i_10_fu_1228_p2 <= std_logic_vector(unsigned(i16_0_reg_608) + unsigned(ap_const_lv5_1));
    i_9_fu_1372_p2 <= std_logic_vector(unsigned(i_2_reg_666) + unsigned(ap_const_lv5_1));
    i_fu_1015_p2 <= std_logic_vector(unsigned(i_1_reg_277) + unsigned(ap_const_lv2_1));
    icmp_ln453_fu_1009_p2 <= "1" when (i_1_reg_277 = ap_const_lv2_2) else "0";
    icmp_ln468_fu_1200_p2 <= "1" when (nblocks_0_reg_584 = ap_const_lv7_0) else "0";
    icmp_ln470_fu_1222_p2 <= "1" when (i16_0_reg_608 = ap_const_lv5_15) else "0";
    icmp_ln483_fu_1366_p2 <= "1" when (i_2_reg_666 = ap_const_lv5_15) else "0";
    input_load_15_1_fu_1072_p4 <= input_load_15_reg_1534(15 downto 8);
    input_load_16_1_fu_1084_p4 <= input_load_16_reg_1540(15 downto 8);
    input_load_17_1_fu_1097_p4 <= input_r_q0(15 downto 8);
    input_load_18_1_fu_1111_p4 <= input_r_q1(15 downto 8);
    input_load_1_fu_1172_p4 <= input_r_q0(15 downto 8);

    input_r_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln453_fu_1009_p2, ap_CS_fsm_state3, zext_ln455_fu_1033_p1, zext_ln457_fu_1054_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= zext_ln457_fu_1054_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln453_fu_1009_p2 = ap_const_lv1_1))) then 
            input_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln453_fu_1009_p2 = ap_const_lv1_0))) then 
            input_r_address0 <= zext_ln455_fu_1033_p1(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln456_fu_1044_p1, zext_ln458_fu_1064_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address1 <= zext_ln458_fu_1064_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address1 <= zext_ln456_fu_1044_p1(4 - 1 downto 0);
        else 
            input_r_address1 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln453_fu_1009_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln453_fu_1009_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln453_fu_1009_p2 = ap_const_lv1_0)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    nblocks_fu_1320_p2 <= std_logic_vector(unsigned(nblocks_0_reg_584) + unsigned(ap_const_lv7_7F));
    or_ln456_fu_1038_p2 <= (shl_ln_fu_1025_p3 or ap_const_lv3_1);
    or_ln457_fu_1049_p2 <= (shl_ln_reg_1513 or ap_const_lv3_2);
    or_ln458_fu_1059_p2 <= (shl_ln_reg_1513 or ap_const_lv3_3);
    or_ln461_fu_1190_p2 <= (tmp_fu_1182_p3 or ap_const_lv16_1F00);
    or_ln473_fu_1273_p2 <= (shl_ln7_fu_1239_p3 or ap_const_lv7_1);
    or_ln474_fu_1326_p2 <= (shl_ln7_reg_1602 or ap_const_lv7_2);
    or_ln475_fu_1346_p2 <= (shl_ln7_reg_1602 or ap_const_lv7_3);
    or_ln486_fu_1417_p2 <= (shl_ln6_fu_1383_p3 or ap_const_lv7_1);
    or_ln487_fu_1458_p2 <= (shl_ln6_reg_1636 or ap_const_lv7_2);
    or_ln488_fu_1478_p2 <= (shl_ln6_reg_1636 or ap_const_lv7_3);

    output_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln472_1_fu_1257_p1, zext_ln474_1_fu_1341_p1, zext_ln485_1_fu_1401_p1, zext_ln487_1_fu_1473_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address0 <= zext_ln487_1_fu_1473_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= zext_ln485_1_fu_1401_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= zext_ln474_1_fu_1341_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= zext_ln472_1_fu_1257_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln473_1_fu_1289_p1, zext_ln475_1_fu_1361_p1, zext_ln486_1_fu_1433_p1, zext_ln488_1_fu_1493_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address1 <= zext_ln488_1_fu_1493_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address1 <= zext_ln486_1_fu_1433_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address1 <= zext_ln475_1_fu_1361_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address1 <= zext_ln473_1_fu_1289_p1(14 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state8, p_Result_12_reg_1608, ap_CS_fsm_state11, p_Result_9_reg_1642, ap_CS_fsm_state9, ap_CS_fsm_state12, trunc_ln472_fu_1234_p1, trunc_ln485_fu_1378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d0 <= p_Result_9_reg_1642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d0 <= trunc_ln485_fu_1378_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d0 <= p_Result_12_reg_1608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d0 <= trunc_ln472_fu_1234_p1;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(ap_CS_fsm_state8, p_Result_13_reg_1613, ap_CS_fsm_state11, p_Result_10_reg_1647, ap_CS_fsm_state9, ap_phi_mux_p_Val2_3_phi_fu_622_p42, ap_CS_fsm_state12, ap_phi_mux_p_Val2_s_phi_fu_680_p42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d1 <= p_Result_10_reg_1647;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d1 <= ap_phi_mux_p_Val2_s_phi_fu_680_p42(31 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d1 <= p_Result_13_reg_1613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d1 <= ap_phi_mux_p_Val2_3_phi_fu_622_p42(31 downto 16);
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln470_fu_1222_p2, ap_CS_fsm_state11, icmp_ln483_fu_1366_p2, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state8, icmp_ln470_fu_1222_p2, ap_CS_fsm_state11, icmp_ln483_fu_1366_p2, ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln483_fu_1366_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln470_fu_1222_p2 = ap_const_lv1_0)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_14_fu_1121_p9 <= (((((((empty_31_fu_1107_p1 & input_load_18_1_fu_1111_p4) & empty_30_fu_1093_p1) & input_load_17_1_fu_1097_p4) & empty_29_fu_1081_p1) & input_load_16_1_fu_1084_p4) & empty_fu_1069_p1) & input_load_15_1_fu_1072_p4);
    p_Result_15_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln461_fu_1190_p2),64));
    s_0_12_fu_1148_p2 <= (select_ln459_fu_1141_p3 xor p_Result_14_fu_1121_p9);
    s_1_11_fu_1154_p3 <= 
        s_0_12_fu_1148_p2 when (trunc_ln455_reg_1506(0) = '1') else 
        s_1_0_reg_253;
    s_1_12_fu_1161_p3 <= 
        s_0_0_reg_265 when (trunc_ln455_reg_1506(0) = '1') else 
        s_0_12_fu_1148_p2;
    select_ln459_fu_1141_p3 <= 
        s_1_0_reg_253 when (trunc_ln455_reg_1506(0) = '1') else 
        s_0_0_reg_265;
    shl_ln6_fu_1383_p3 <= (i_2_reg_666 & ap_const_lv2_0);
    shl_ln7_fu_1239_p3 <= (i16_0_reg_608 & ap_const_lv2_0);
    shl_ln_fu_1025_p3 <= (trunc_ln455_fu_1021_p1 & ap_const_lv2_0);
    tmp_fu_1182_p3 <= (empty_32_fu_1168_p1 & input_load_1_fu_1172_p4);
    trunc_ln455_fu_1021_p1 <= i_1_reg_277(1 - 1 downto 0);
    trunc_ln472_fu_1234_p1 <= ap_phi_mux_p_Val2_3_phi_fu_622_p42(16 - 1 downto 0);
    trunc_ln485_fu_1378_p1 <= ap_phi_mux_p_Val2_s_phi_fu_680_p42(16 - 1 downto 0);
    zext_ln455_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1025_p3),64));
    zext_ln456_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln456_fu_1038_p2),64));
    zext_ln457_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln457_fu_1049_p2),64));
    zext_ln458_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln458_fu_1059_p2),64));
    zext_ln472_1_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln472_fu_1251_p2),64));
    zext_ln472_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_1239_p3),14));
    zext_ln473_1_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln473_fu_1283_p2),64));
    zext_ln473_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln473_fu_1273_p2),14));
    zext_ln474_1_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln474_fu_1335_p2),64));
    zext_ln474_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln474_fu_1326_p2),14));
    zext_ln475_1_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln475_fu_1355_p2),64));
    zext_ln475_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln475_fu_1346_p2),14));
    zext_ln485_1_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln485_fu_1395_p2),64));
    zext_ln485_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_1383_p3),14));
    zext_ln486_1_fu_1433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln486_fu_1427_p2),64));
    zext_ln486_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln486_fu_1417_p2),14));
    zext_ln487_1_fu_1473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln487_fu_1467_p2),64));
    zext_ln487_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln487_fu_1458_p2),14));
    zext_ln488_1_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln488_fu_1487_p2),64));
    zext_ln488_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln488_fu_1478_p2),14));
end behav;
